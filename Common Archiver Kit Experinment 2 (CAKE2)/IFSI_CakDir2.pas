unit IFSI_CakDir2;
{
This file has been generated by UnitParser v0.5, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ifps3 are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility

}
{$I ifps3_def.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,IFPS3CompExec
  ,ifpscomp
  ,ifps3
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TIFPS3CE_CakDir2 = class(TIFPS3Plugin)
  protected
    procedure CompOnUses(CompExec: TIFPS3CompExec); override;
    procedure ExecOnUses(CompExec: TIFPS3CompExec); override;
    procedure CompileImport1(CompExec: TIFPS3CompExec); override;
    procedure CompileImport2(CompExec: TIFPS3CompExec); override;
    procedure ExecImport1(CompExec: TIFPS3CompExec; const ri: TIFPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TIFPS3CompExec; const ri: TIFPSRuntimeClassImporter); override;
  end;
 
 
(*
{ compile-time registration functions }
procedure SIRegister_TCakDir2(CL: TIFPSPascalCompiler);
procedure SIRegister_CakDir2(CL: TIFPSPascalCompiler);
 
{ run-time registration functions }
procedure RIRegister_CakDir2_Routines(S: TIFPSExec);
procedure RIRegister_TCakDir2(CL: TIFPSRuntimeClassImporter);
procedure RIRegister_CakDir2(CL: TIFPSRuntimeClassImporter);
*)


implementation


uses
   Windows
  ,Messages
  ,Controls
  ,CakArchiver
  ,CakDefs2
  ,DateUtils
  ,CakDir2
  ;
 
 
{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class, 
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls 
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TIFPSPascalCompiler; const InheritsFrom, Classname: string): TIFPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;
  
  
(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TCakDir2(CL: TIFPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCakDir2') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCakDir2') do
  begin
    RegisterProperty('Arcname', 'string', iptrw);
    RegisterProperty('FOnOver', 'TCOverEvent', iptrw);
    RegisterProperty('FOnPwd', 'TCPwdEvent', iptrw);
    RegisterProperty('FOnCZipPwd', 'TCCZIPPwdEvent', iptrw);
    RegisterProperty('FOnMsg', 'TCMsgEvent', iptrw);
    RegisterProperty('FOnProg', 'TCProgEvent', iptrw);
    RegisterProperty('FonProg2', 'TCProgEvent', iptrw);
    RegisterProperty('FOnFound', 'TCFoundEvent', iptrw);
    RegisterProperty('FOnUnkCmd', 'TCUnkCmdEvent', iptrw);
    RegisterProperty('CakArchiverList', '', iptrw);
    RegisterProperty('TotalArchiverList', 'integer', iptrw);
    RegisterProperty('PercentCompleted', 'Integer', iptrw);
    RegisterProperty('TempPath', 'string', iptrw);
    RegisterProperty('ImageS', 'TImageList', iptrw);
    RegisterProperty('ImageL', 'TImageList', iptrw);
    RegisterProperty('FileType', 'TStringList', iptrw);
    RegisterProperty('FileExt', 'TStringList', iptrw);
    RegisterProperty('DirectoryList', 'TStringList', iptrw);
    RegisterProperty('SubDirectoryList', 'TStringList', iptrw);
    RegisterProperty('Abouttext', 'TStringList', iptrw);
    RegisterProperty('NewDirList', 'TStringList', iptrw);
    RegisterProperty('ScriptParam', 'TStringList', iptrw);
    RegisterProperty('MRUList', 'TStrings', iptrw);
    RegisterProperty('MaxMRU', 'integer', iptrw);
    RegisterProperty('Total_Contents', 'integer', iptrw);
    RegisterProperty('FullContentCount', 'integer', iptrw);
    RegisterProperty('Archive_Contents', 'array of Contenttype', iptrw);
    RegisterProperty('temp_Contents', 'array of Contenttype', iptrw);
    RegisterProperty('Full_Contents', 'array of Contenttype', iptrw);
    RegisterProperty('SubDir_RootPath', 'string', iptrw);
    RegisterProperty('exploremode', 'boolean', iptrw);
    RegisterProperty('OverwriteAll', 'Integer', iptrw);
    RegisterProperty('TimeStrFormat', 'string', iptrw);
    RegisterProperty('TotalProgress', 'integer', iptrw);
    RegisterProperty('Password', 'string', iptrw);
    RegisterProperty('CZPassKey', 'CZKeyType', iptrw);
    RegisterProperty('Extractoptions', 'ExtractOptionsType', iptrw);
    RegisterProperty('EncryptOptions', 'EncryptOptionsType', iptrw);
    RegisterProperty('RenameOptions', 'RenameOptionsType', iptrw);
    RegisterProperty('AddOptions', 'AddOptionsType', iptrw);
    RegisterProperty('SfxOptions', 'SfxOptionsType', iptrw);
    RegisterProperty('FinderOptions', 'FinderOptionsType', iptrw);
    RegisterProperty('FilelistOptions', 'FilelistOptionstype', iptrw);
    RegisterProperty('versioncontrol', 'boolean', iptrw);
    RegisterProperty('BaseDir', 'string', iptrw);
    RegisterMethod('Procedure AddContents( FileArchive, FileFullPath, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer; Encrypted : Boolean; FileTime : TDateTime; FileCRC : String);');
    RegisterMethod('Procedure AddContents( FileArchive, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer; Encrypted : Boolean; FileTime : TDateTime; FileCRC : String);');
    RegisterMethod('Procedure AddContents( FileArchive, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer);');
    RegisterMethod('Procedure AddContents( FileArchive, FileDefPath, FileName : String);');
    RegisterMethod('Procedure Prepare_Archiver');
    RegisterMethod('Procedure Add_Archiver( ArchiverClass : CArchiver; BaseTyp : SupportType; SupportExt : String; SupportWk : SupportWorkType)');
    RegisterMethod('Procedure Enable_Archiver( ArchiverClass : CArchiver; BaseTyp : SupportType)');
    RegisterMethod('Function Locate_Archiver( ext : string; aWork : worktype) : integer;');
    RegisterMethod('Function Locate_Archiver( arctype : SupportType; aWork : worktype) : integer;');
    RegisterMethod('Function Locate_Archiver( arctype : SupportType) : integer;');
    RegisterMethod('Function GetarcString( atype : supporttype) : string');
    RegisterMethod('Function ReturnIconType( FileName : string) : Integer');
    RegisterMethod('Function AskOverwrite( forfile : string) : Boolean');
    RegisterMethod('Function cando( fn : string; aWork : worktype) : boolean');
    RegisterMethod('Procedure Process( aWork : worktype)');
    RegisterMethod('Procedure Sort( accending : boolean; atype : Sortbytype)');
    RegisterMethod('Procedure Extract');
    RegisterMethod('Procedure Add');
    RegisterMethod('Procedure Test');
    RegisterMethod('Procedure Delete');
    RegisterMethod('Procedure SFX');
    RegisterMethod('Procedure Encrypt');
    RegisterMethod('Procedure List;');
    RegisterMethod('Procedure ListEx( Mask : string; Subdir : boolean);');
    RegisterMethod('Procedure List( SearchRec : SearchRecType);');
    RegisterMethod('Procedure New( filename : string)');
    RegisterMethod('Procedure Load( filename : string)');
    RegisterMethod('Procedure Close');
    RegisterMethod('Procedure UnSelectALL');
    RegisterMethod('Procedure Select( FileMasks, Filearchive : string);');
    RegisterMethod('Procedure Select( filename : tstrings; archivename : string);');
    RegisterMethod('Procedure Select( Index : integer);');
    RegisterMethod('Procedure SelectALL');
    RegisterMethod('Function GrabArchivePath : string');
    RegisterMethod('Function Get_Selected_Count : integer');
    RegisterMethod('Function Get_Selected_Size : Int64');
    RegisterMethod('Function Get_Target_Size : Int64');
    RegisterMethod('Function Get_Selected_CompSize : Int64');
    RegisterMethod('Function Get_Top_Selected : string');
    RegisterMethod('Function Get_Top_index : integer');
    RegisterMethod('Function Get_Total_Size : Int64');
    RegisterMethod('Function Get_Total_Packed_Size : Int64');
    RegisterMethod('Function Locate( filename : string) : integer;');
    RegisterMethod('Function Locate( filename : string; checkdir : boolean) : integer;');
    RegisterMethod('Function GetArchiveType( filename : string) : supporttype');
    RegisterMethod('Function NewTempPath : string');
    RegisterMethod('Procedure HotEdit( FileName : string)');
    RegisterMethod('Function InitContentType : ContentType');
    RegisterMethod('Procedure _SetListview( aListview : TComponent)');
    RegisterMethod('Procedure _SetTreeview( aTreeview : TComponent)');
    RegisterMethod('Procedure _SetTreeList( aTreelist : TComponent)');
    RegisterMethod('Procedure _SetTreeComboBox( aTreecombo : TComponent)');
    RegisterMethod('Procedure ReloadCAK( ReloadLv, ReloadTv, ReloadTl : boolean)');
    RegisterMethod('Function GetComment : string');
    RegisterMethod('Procedure SetComment( text : string)');
    RegisterMethod('Function CanExtract : boolean');
    RegisterMethod('Function CanAdd : boolean');
    RegisterProperty('ArchiveName', 'string', iptrw);
    RegisterProperty('ArchiveType', 'supporttype', iptrw);
    RegisterProperty('ArchiveNeedPassword', 'boolean', iptrw);
    RegisterProperty('ArchiveComment', 'string', iptrw);
    RegisterProperty('SortAuto', 'boolean', iptrw);
    RegisterProperty('SortIndex', 'SortbyType', iptrw);
    RegisterProperty('SortAccend', 'boolean', iptrw);
    RegisterProperty('SelectedCount', 'integer', iptr);
    RegisterProperty('SelectedIndex', 'integer', iptr);
    RegisterProperty('ItemIndex', 'integer', iptr);
    RegisterProperty('SelectedSize', 'Int64', iptr);
    RegisterProperty('OnCMessage', 'TCMsgEvent', iptrw);
    RegisterProperty('OnCProgress', 'TCProgEvent', iptrw);
    RegisterProperty('OnCArchiveFound', 'TCFoundEvent', iptrw);
    RegisterProperty('OnCOverwrite', 'TCOverEvent', iptrw);
    RegisterProperty('OnCPassword', 'TCPwdEvent', iptrw);
    RegisterProperty('OnCCZipPassword', 'TCCZIPPwdEvent', iptrw);
    RegisterProperty('OnCUnkCmd', 'TCUnkCmdEvent', iptrw);
    RegisterProperty('Stop', 'boolean', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_CakDir2(CL: TIFPSPascalCompiler);
begin
  //CL.AddTypeS('CArchiver', 'class of TCakArchiver');
  CL.AddTypeS('CakArchiverType', 'record CakArchiverClass : CArchiver; CakArchi'
   +'ver : TCakArchiver; SupportExtension : String; SupportWork : SupportWorkTy'
   +'pe; BaseType : SupportType; Enabled : boolean; end');
  SIRegister_TCakDir2(CL);
 CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCakDir2Stop_W(Self: TCakDir2; const T: boolean);
begin Self.Stop := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCUnkCmd_W(Self: TCakDir2; const T: TCUnkCmdEvent);
begin Self.OnCUnkCmd := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCUnkCmd_R(Self: TCakDir2; var T: TCUnkCmdEvent);
begin T := Self.OnCUnkCmd; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCCZipPassword_W(Self: TCakDir2; const T: TCCZIPPwdEvent);
begin Self.OnCCZipPassword := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCCZipPassword_R(Self: TCakDir2; var T: TCCZIPPwdEvent);
begin T := Self.OnCCZipPassword; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCPassword_W(Self: TCakDir2; const T: TCPwdEvent);
begin Self.OnCPassword := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCPassword_R(Self: TCakDir2; var T: TCPwdEvent);
begin T := Self.OnCPassword; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCOverwrite_W(Self: TCakDir2; const T: TCOverEvent);
begin Self.OnCOverwrite := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCOverwrite_R(Self: TCakDir2; var T: TCOverEvent);
begin T := Self.OnCOverwrite; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCArchiveFound_W(Self: TCakDir2; const T: TCFoundEvent);
begin Self.OnCArchiveFound := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCArchiveFound_R(Self: TCakDir2; var T: TCFoundEvent);
begin T := Self.OnCArchiveFound; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCProgress_W(Self: TCakDir2; const T: TCProgEvent);
begin Self.OnCProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCProgress_R(Self: TCakDir2; var T: TCProgEvent);
begin T := Self.OnCProgress; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCMessage_W(Self: TCakDir2; const T: TCMsgEvent);
begin Self.OnCMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OnCMessage_R(Self: TCakDir2; var T: TCMsgEvent);
begin T := Self.OnCMessage; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SelectedSize_R(Self: TCakDir2; var T: Int64);
begin T := Self.SelectedSize; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ItemIndex_R(Self: TCakDir2; var T: integer);
begin T := Self.ItemIndex; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SelectedIndex_R(Self: TCakDir2; var T: integer);
begin T := Self.SelectedIndex; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SelectedCount_R(Self: TCakDir2; var T: integer);
begin T := Self.SelectedCount; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortAccend_W(Self: TCakDir2; const T: boolean);
begin Self.SortAccend := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortAccend_R(Self: TCakDir2; var T: boolean);
begin T := Self.SortAccend; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortIndex_W(Self: TCakDir2; const T: SortbyType);
begin Self.SortIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortIndex_R(Self: TCakDir2; var T: SortbyType);
begin T := Self.SortIndex; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortAuto_W(Self: TCakDir2; const T: boolean);
begin Self.SortAuto := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SortAuto_R(Self: TCakDir2; var T: boolean);
begin T := Self.SortAuto; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveComment_W(Self: TCakDir2; const T: string);
begin Self.ArchiveComment := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveComment_R(Self: TCakDir2; var T: string);
begin T := Self.ArchiveComment; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveNeedPassword_W(Self: TCakDir2; const T: boolean);
begin Self.ArchiveNeedPassword := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveNeedPassword_R(Self: TCakDir2; var T: boolean);
begin T := Self.ArchiveNeedPassword; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveType_W(Self: TCakDir2; const T: supporttype);
begin Self.ArchiveType := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveType_R(Self: TCakDir2; var T: supporttype);
begin T := Self.ArchiveType; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveName_W(Self: TCakDir2; const T: string);
begin Self.ArchiveName := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ArchiveName_R(Self: TCakDir2; var T: string);
begin T := Self.ArchiveName; end;

(*----------------------------------------------------------------------------*)
Function TCakDir2Locate_P(Self: TCakDir2;  filename : string; checkdir : boolean) : integer;
Begin Result := Self.Locate(filename, checkdir); END;

(*----------------------------------------------------------------------------*)
Function TCakDir2Locate_P(Self: TCakDir2;  filename : string) : integer;
Begin Result := Self.Locate(filename); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2Select_P(Self: TCakDir2;  Index : integer);
Begin Self.Select(Index); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2Select_P(Self: TCakDir2;  filename : tstrings; archivename : string);
Begin Self.Select(filename, archivename); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2Select_P(Self: TCakDir2;  FileMasks, Filearchive : string);
Begin Self.Select(FileMasks, Filearchive); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2List_P(Self: TCakDir2;  SearchRec : SearchRecType);
Begin Self.List(SearchRec); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2ListEx_P(Self: TCakDir2;  Mask : string; Subdir : boolean);
Begin Self.List(Mask, Subdir); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2List_P(Self: TCakDir2);
Begin Self.List; END;

(*----------------------------------------------------------------------------*)
Function TCakDir2Locate_Archiver_P(Self: TCakDir2;  arctype : SupportType) : integer;
Begin Result := Self.Locate_Archiver(arctype); END;

(*----------------------------------------------------------------------------*)
Function TCakDir2Locate_Archiver_P(Self: TCakDir2;  arctype : SupportType; aWork : worktype) : integer;
Begin Result := Self.Locate_Archiver(arctype, aWork); END;

(*----------------------------------------------------------------------------*)
Function TCakDir2Locate_Archiver_P(Self: TCakDir2;  ext : string; aWork : worktype) : integer;
Begin Result := Self.Locate_Archiver(ext, aWork); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2AddContents_P(Self: TCakDir2;  FileArchive, FileDefPath, FileName : String);
Begin Self.AddContents(FileArchive, FileDefPath, FileName); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2AddContents_P(Self: TCakDir2;  FileArchive, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer);
Begin Self.AddContents(FileArchive, FileDefPath, FileName, FileSize, FilePackedSize); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2AddContents_P(Self: TCakDir2;  FileArchive, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer; Encrypted : Boolean; FileTime : TDateTime; FileCRC : String);
Begin Self.AddContents(FileArchive, FileDefPath, FileName, FileSize, FilePackedSize, Encrypted, FileTime, FileCRC); END;

(*----------------------------------------------------------------------------*)
Procedure TCakDir2AddContents_P(Self: TCakDir2;  FileArchive, FileFullPath, FileDefPath, FileName : String; FileSize, FilePackedSize : Integer; Encrypted : Boolean; FileTime : TDateTime; FileCRC : String);
Begin Self.AddContents(FileArchive, FileFullPath, FileDefPath, FileName, FileSize, FilePackedSize, Encrypted, FileTime, FileCRC); END;

(*----------------------------------------------------------------------------*)
procedure TCakDir2BaseDir_W(Self: TCakDir2; const T: string);
Begin Self.BaseDir := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2BaseDir_R(Self: TCakDir2; var T: string);
Begin T := Self.BaseDir; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2versioncontrol_W(Self: TCakDir2; const T: boolean);
Begin Self.versioncontrol := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2versioncontrol_R(Self: TCakDir2; var T: boolean);
Begin T := Self.versioncontrol; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FilelistOptions_W(Self: TCakDir2; const T: FilelistOptionstype);
Begin Self.FilelistOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FilelistOptions_R(Self: TCakDir2; var T: FilelistOptionstype);
Begin T := Self.FilelistOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FinderOptions_W(Self: TCakDir2; const T: FinderOptionsType);
Begin Self.FinderOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FinderOptions_R(Self: TCakDir2; var T: FinderOptionsType);
Begin T := Self.FinderOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SfxOptions_W(Self: TCakDir2; const T: SfxOptionsType);
Begin Self.SfxOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SfxOptions_R(Self: TCakDir2; var T: SfxOptionsType);
Begin T := Self.SfxOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2AddOptions_W(Self: TCakDir2; const T: AddOptionsType);
Begin Self.AddOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2AddOptions_R(Self: TCakDir2; var T: AddOptionsType);
Begin T := Self.AddOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2RenameOptions_W(Self: TCakDir2; const T: RenameOptionsType);
Begin Self.RenameOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2RenameOptions_R(Self: TCakDir2; var T: RenameOptionsType);
Begin T := Self.RenameOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2EncryptOptions_W(Self: TCakDir2; const T: EncryptOptionsType);
Begin Self.EncryptOptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2EncryptOptions_R(Self: TCakDir2; var T: EncryptOptionsType);
Begin T := Self.EncryptOptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Extractoptions_W(Self: TCakDir2; const T: ExtractOptionsType);
Begin Self.Extractoptions := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Extractoptions_R(Self: TCakDir2; var T: ExtractOptionsType);
Begin T := Self.Extractoptions; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2CZPassKey_W(Self: TCakDir2; const T: CZKeyType);
Begin Self.CZPassKey := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2CZPassKey_R(Self: TCakDir2; var T: CZKeyType);
Begin T := Self.CZPassKey; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Password_W(Self: TCakDir2; const T: string);
Begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Password_R(Self: TCakDir2; var T: string);
Begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TotalProgress_W(Self: TCakDir2; const T: integer);
Begin Self.TotalProgress := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TotalProgress_R(Self: TCakDir2; var T: integer);
Begin T := Self.TotalProgress; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TimeStrFormat_W(Self: TCakDir2; const T: string);
Begin Self.TimeStrFormat := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TimeStrFormat_R(Self: TCakDir2; var T: string);
Begin T := Self.TimeStrFormat; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OverwriteAll_W(Self: TCakDir2; const T: Integer);
Begin Self.OverwriteAll := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2OverwriteAll_R(Self: TCakDir2; var T: Integer);
Begin T := Self.OverwriteAll; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2exploremode_W(Self: TCakDir2; const T: boolean);
Begin Self.exploremode := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2exploremode_R(Self: TCakDir2; var T: boolean);
Begin T := Self.exploremode; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SubDir_RootPath_W(Self: TCakDir2; const T: string);
Begin Self.SubDir_RootPath := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SubDir_RootPath_R(Self: TCakDir2; var T: string);
Begin T := Self.SubDir_RootPath; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Full_Contents_W(Self: TCakDir2; const T: array of Contenttype);
Begin Self.Full_Contents := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Full_Contents_R(Self: TCakDir2; var T: array of Contenttype);
Begin T := Self.Full_Contents; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2temp_Contents_W(Self: TCakDir2; const T: array of Contenttype);
Begin Self.temp_Contents := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2temp_Contents_R(Self: TCakDir2; var T: array of Contenttype);
Begin T := Self.temp_Contents; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Archive_Contents_W(Self: TCakDir2; const T: array of Contenttype);
Begin Self.Archive_Contents := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Archive_Contents_R(Self: TCakDir2; var T: array of Contenttype);
Begin T := Self.Archive_Contents; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FullContentCount_W(Self: TCakDir2; const T: integer);
Begin Self.FullContentCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FullContentCount_R(Self: TCakDir2; var T: integer);
Begin T := Self.FullContentCount; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Total_Contents_W(Self: TCakDir2; const T: integer);
Begin Self.Total_Contents := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Total_Contents_R(Self: TCakDir2; var T: integer);
Begin T := Self.Total_Contents; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2MaxMRU_W(Self: TCakDir2; const T: integer);
Begin Self.MaxMRU := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2MaxMRU_R(Self: TCakDir2; var T: integer);
Begin T := Self.MaxMRU; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2MRUList_W(Self: TCakDir2; const T: TStrings);
Begin Self.MRUList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2MRUList_R(Self: TCakDir2; var T: TStrings);
Begin T := Self.MRUList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ScriptParam_W(Self: TCakDir2; const T: TStringList);
Begin Self.ScriptParam := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ScriptParam_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.ScriptParam; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2NewDirList_W(Self: TCakDir2; const T: TStringList);
Begin Self.NewDirList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2NewDirList_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.NewDirList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Abouttext_W(Self: TCakDir2; const T: TStringList);
Begin Self.Abouttext := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Abouttext_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.Abouttext; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SubDirectoryList_W(Self: TCakDir2; const T: TStringList);
Begin Self.SubDirectoryList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2SubDirectoryList_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.SubDirectoryList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2DirectoryList_W(Self: TCakDir2; const T: TStringList);
Begin Self.DirectoryList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2DirectoryList_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.DirectoryList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FileExt_W(Self: TCakDir2; const T: TStringList);
Begin Self.FileExt := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FileExt_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.FileExt; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FileType_W(Self: TCakDir2; const T: TStringList);
Begin Self.FileType := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FileType_R(Self: TCakDir2; var T: TStringList);
Begin T := Self.FileType; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ImageL_W(Self: TCakDir2; const T: TImageList);
Begin Self.ImageL := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ImageL_R(Self: TCakDir2; var T: TImageList);
Begin T := Self.ImageL; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ImageS_W(Self: TCakDir2; const T: TImageList);
Begin Self.ImageS := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2ImageS_R(Self: TCakDir2; var T: TImageList);
Begin T := Self.ImageS; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TempPath_W(Self: TCakDir2; const T: string);
Begin Self.TempPath := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TempPath_R(Self: TCakDir2; var T: string);
Begin T := Self.TempPath; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2PercentCompleted_W(Self: TCakDir2; const T: Integer);
Begin Self.PercentCompleted := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2PercentCompleted_R(Self: TCakDir2; var T: Integer);
Begin T := Self.PercentCompleted; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TotalArchiverList_W(Self: TCakDir2; const T: integer);
Begin Self.TotalArchiverList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2TotalArchiverList_R(Self: TCakDir2; var T: integer);
Begin T := Self.TotalArchiverList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2CakArchiverList_W(Self: TCakDir2; const T: );
Begin Self.CakArchiverList := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2CakArchiverList_R(Self: TCakDir2; var T: );
Begin T := Self.CakArchiverList; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnUnkCmd_W(Self: TCakDir2; const T: TCUnkCmdEvent);
Begin Self.FOnUnkCmd := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnUnkCmd_R(Self: TCakDir2; var T: TCUnkCmdEvent);
Begin T := Self.FOnUnkCmd; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnFound_W(Self: TCakDir2; const T: TCFoundEvent);
Begin Self.FOnFound := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnFound_R(Self: TCakDir2; var T: TCFoundEvent);
Begin T := Self.FOnFound; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FonProg2_W(Self: TCakDir2; const T: TCProgEvent);
Begin Self.FonProg2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FonProg2_R(Self: TCakDir2; var T: TCProgEvent);
Begin T := Self.FonProg2; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnProg_W(Self: TCakDir2; const T: TCProgEvent);
Begin Self.FOnProg := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnProg_R(Self: TCakDir2; var T: TCProgEvent);
Begin T := Self.FOnProg; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnMsg_W(Self: TCakDir2; const T: TCMsgEvent);
Begin Self.FOnMsg := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnMsg_R(Self: TCakDir2; var T: TCMsgEvent);
Begin T := Self.FOnMsg; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnCZipPwd_W(Self: TCakDir2; const T: TCCZIPPwdEvent);
Begin Self.FOnCZipPwd := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnCZipPwd_R(Self: TCakDir2; var T: TCCZIPPwdEvent);
Begin T := Self.FOnCZipPwd; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnPwd_W(Self: TCakDir2; const T: TCPwdEvent);
Begin Self.FOnPwd := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnPwd_R(Self: TCakDir2; var T: TCPwdEvent);
Begin T := Self.FOnPwd; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnOver_W(Self: TCakDir2; const T: TCOverEvent);
Begin Self.FOnOver := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2FOnOver_R(Self: TCakDir2; var T: TCOverEvent);
Begin T := Self.FOnOver; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Arcname_W(Self: TCakDir2; const T: string);
Begin Self.Arcname := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakDir2Arcname_R(Self: TCakDir2; var T: string);
Begin T := Self.Arcname; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_CakDir2_Routines(S: TIFPSExec);
begin
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCakDir2(CL: TIFPSRuntimeClassImporter);
begin
  with CL.Add(TCakDir2) do
  begin
    RegisterPropertyHelper(@TCakDir2Arcname_R,@TCakDir2Arcname_W,'Arcname');
    RegisterPropertyHelper(@TCakDir2FOnOver_R,@TCakDir2FOnOver_W,'FOnOver');
    RegisterPropertyHelper(@TCakDir2FOnPwd_R,@TCakDir2FOnPwd_W,'FOnPwd');
    RegisterPropertyHelper(@TCakDir2FOnCZipPwd_R,@TCakDir2FOnCZipPwd_W,'FOnCZipPwd');
    RegisterPropertyHelper(@TCakDir2FOnMsg_R,@TCakDir2FOnMsg_W,'FOnMsg');
    RegisterPropertyHelper(@TCakDir2FOnProg_R,@TCakDir2FOnProg_W,'FOnProg');
    RegisterPropertyHelper(@TCakDir2FonProg2_R,@TCakDir2FonProg2_W,'FonProg2');
    RegisterPropertyHelper(@TCakDir2FOnFound_R,@TCakDir2FOnFound_W,'FOnFound');
    RegisterPropertyHelper(@TCakDir2FOnUnkCmd_R,@TCakDir2FOnUnkCmd_W,'FOnUnkCmd');
    RegisterPropertyHelper(@TCakDir2CakArchiverList_R,@TCakDir2CakArchiverList_W,'CakArchiverList');
    RegisterPropertyHelper(@TCakDir2TotalArchiverList_R,@TCakDir2TotalArchiverList_W,'TotalArchiverList');
    RegisterPropertyHelper(@TCakDir2PercentCompleted_R,@TCakDir2PercentCompleted_W,'PercentCompleted');
    RegisterPropertyHelper(@TCakDir2TempPath_R,@TCakDir2TempPath_W,'TempPath');
    RegisterPropertyHelper(@TCakDir2ImageS_R,@TCakDir2ImageS_W,'ImageS');
    RegisterPropertyHelper(@TCakDir2ImageL_R,@TCakDir2ImageL_W,'ImageL');
    RegisterPropertyHelper(@TCakDir2FileType_R,@TCakDir2FileType_W,'FileType');
    RegisterPropertyHelper(@TCakDir2FileExt_R,@TCakDir2FileExt_W,'FileExt');
    RegisterPropertyHelper(@TCakDir2DirectoryList_R,@TCakDir2DirectoryList_W,'DirectoryList');
    RegisterPropertyHelper(@TCakDir2SubDirectoryList_R,@TCakDir2SubDirectoryList_W,'SubDirectoryList');
    RegisterPropertyHelper(@TCakDir2Abouttext_R,@TCakDir2Abouttext_W,'Abouttext');
    RegisterPropertyHelper(@TCakDir2NewDirList_R,@TCakDir2NewDirList_W,'NewDirList');
    RegisterPropertyHelper(@TCakDir2ScriptParam_R,@TCakDir2ScriptParam_W,'ScriptParam');
    RegisterPropertyHelper(@TCakDir2MRUList_R,@TCakDir2MRUList_W,'MRUList');
    RegisterPropertyHelper(@TCakDir2MaxMRU_R,@TCakDir2MaxMRU_W,'MaxMRU');
    RegisterPropertyHelper(@TCakDir2Total_Contents_R,@TCakDir2Total_Contents_W,'Total_Contents');
    RegisterPropertyHelper(@TCakDir2FullContentCount_R,@TCakDir2FullContentCount_W,'FullContentCount');
    RegisterPropertyHelper(@TCakDir2Archive_Contents_R,@TCakDir2Archive_Contents_W,'Archive_Contents');
    RegisterPropertyHelper(@TCakDir2temp_Contents_R,@TCakDir2temp_Contents_W,'temp_Contents');
    RegisterPropertyHelper(@TCakDir2Full_Contents_R,@TCakDir2Full_Contents_W,'Full_Contents');
    RegisterPropertyHelper(@TCakDir2SubDir_RootPath_R,@TCakDir2SubDir_RootPath_W,'SubDir_RootPath');
    RegisterPropertyHelper(@TCakDir2exploremode_R,@TCakDir2exploremode_W,'exploremode');
    RegisterPropertyHelper(@TCakDir2OverwriteAll_R,@TCakDir2OverwriteAll_W,'OverwriteAll');
    RegisterPropertyHelper(@TCakDir2TimeStrFormat_R,@TCakDir2TimeStrFormat_W,'TimeStrFormat');
    RegisterPropertyHelper(@TCakDir2TotalProgress_R,@TCakDir2TotalProgress_W,'TotalProgress');
    RegisterPropertyHelper(@TCakDir2Password_R,@TCakDir2Password_W,'Password');
    RegisterPropertyHelper(@TCakDir2CZPassKey_R,@TCakDir2CZPassKey_W,'CZPassKey');
    RegisterPropertyHelper(@TCakDir2Extractoptions_R,@TCakDir2Extractoptions_W,'Extractoptions');
    RegisterPropertyHelper(@TCakDir2EncryptOptions_R,@TCakDir2EncryptOptions_W,'EncryptOptions');
    RegisterPropertyHelper(@TCakDir2RenameOptions_R,@TCakDir2RenameOptions_W,'RenameOptions');
    RegisterPropertyHelper(@TCakDir2AddOptions_R,@TCakDir2AddOptions_W,'AddOptions');
    RegisterPropertyHelper(@TCakDir2SfxOptions_R,@TCakDir2SfxOptions_W,'SfxOptions');
    RegisterPropertyHelper(@TCakDir2FinderOptions_R,@TCakDir2FinderOptions_W,'FinderOptions');
    RegisterPropertyHelper(@TCakDir2FilelistOptions_R,@TCakDir2FilelistOptions_W,'FilelistOptions');
    RegisterPropertyHelper(@TCakDir2versioncontrol_R,@TCakDir2versioncontrol_W,'versioncontrol');
    RegisterPropertyHelper(@TCakDir2BaseDir_R,@TCakDir2BaseDir_W,'BaseDir');
    RegisterMethod(@TCakDir2AddContents_P, 'AddContents');
    RegisterMethod(@TCakDir2AddContents_P, 'AddContents');
    RegisterMethod(@TCakDir2AddContents_P, 'AddContents');
    RegisterMethod(@TCakDir2AddContents_P, 'AddContents');
    RegisterMethod(@TCakDir2.Prepare_Archiver, 'Prepare_Archiver');
    RegisterMethod(@TCakDir2.Add_Archiver, 'Add_Archiver');
    RegisterMethod(@TCakDir2.Enable_Archiver, 'Enable_Archiver');
    RegisterMethod(@TCakDir2Locate_Archiver_P, 'Locate_Archiver');
    RegisterMethod(@TCakDir2Locate_Archiver_P, 'Locate_Archiver');
    RegisterMethod(@TCakDir2Locate_Archiver_P, 'Locate_Archiver');
    RegisterMethod(@TCakDir2.GetarcString, 'GetarcString');
    RegisterMethod(@TCakDir2.ReturnIconType, 'ReturnIconType');
    RegisterMethod(@TCakDir2.AskOverwrite, 'AskOverwrite');
    RegisterMethod(@TCakDir2.cando, 'cando');
    RegisterMethod(@TCakDir2.Process, 'Process');
    RegisterMethod(@TCakDir2.Sort, 'Sort');
    RegisterMethod(@TCakDir2.Extract, 'Extract');
    RegisterMethod(@TCakDir2.Add, 'Add');
    RegisterMethod(@TCakDir2.Test, 'Test');
    RegisterMethod(@TCakDir2.Delete, 'Delete');
    RegisterMethod(@TCakDir2.SFX, 'SFX');
    RegisterMethod(@TCakDir2.Encrypt, 'Encrypt');
    RegisterMethod(@TCakDir2List_P, 'List');
    RegisterMethod(@TCakDir2ListEx_P, 'ListEx');
    RegisterMethod(@TCakDir2List_P, 'List');
    RegisterMethod(@TCakDir2.New, 'New');
    RegisterMethod(@TCakDir2.Load, 'Load');
    RegisterMethod(@TCakDir2.Close, 'Close');
    RegisterMethod(@TCakDir2.UnSelectALL, 'UnSelectALL');
    RegisterMethod(@TCakDir2Select_P, 'Select');
    RegisterMethod(@TCakDir2Select_P, 'Select');
    RegisterMethod(@TCakDir2Select_P, 'Select');
    RegisterMethod(@TCakDir2.SelectALL, 'SelectALL');
    RegisterMethod(@TCakDir2.GrabArchivePath, 'GrabArchivePath');
    RegisterMethod(@TCakDir2.Get_Selected_Count, 'Get_Selected_Count');
    RegisterMethod(@TCakDir2.Get_Selected_Size, 'Get_Selected_Size');
    RegisterMethod(@TCakDir2.Get_Target_Size, 'Get_Target_Size');
    RegisterMethod(@TCakDir2.Get_Selected_CompSize, 'Get_Selected_CompSize');
    RegisterMethod(@TCakDir2.Get_Top_Selected, 'Get_Top_Selected');
    RegisterMethod(@TCakDir2.Get_Top_index, 'Get_Top_index');
    RegisterMethod(@TCakDir2.Get_Total_Size, 'Get_Total_Size');
    RegisterMethod(@TCakDir2.Get_Total_Packed_Size, 'Get_Total_Packed_Size');
    RegisterMethod(@TCakDir2Locate_P, 'Locate');
    RegisterMethod(@TCakDir2Locate_P, 'Locate');
    RegisterMethod(@TCakDir2.GetArchiveType, 'GetArchiveType');
    RegisterMethod(@TCakDir2.NewTempPath, 'NewTempPath');
    RegisterMethod(@TCakDir2.HotEdit, 'HotEdit');
    RegisterMethod(@TCakDir2.InitContentType, 'InitContentType');
    RegisterMethod(@TCakDir2._SetListview, '_SetListview');
    RegisterMethod(@TCakDir2._SetTreeview, '_SetTreeview');
    RegisterMethod(@TCakDir2._SetTreeList, '_SetTreeList');
    RegisterMethod(@TCakDir2._SetTreeComboBox, '_SetTreeComboBox');
    RegisterMethod(@TCakDir2.ReloadCAK, 'ReloadCAK');
    RegisterMethod(@TCakDir2.GetComment, 'GetComment');
    RegisterMethod(@TCakDir2.SetComment, 'SetComment');
    RegisterMethod(@TCakDir2.CanExtract, 'CanExtract');
    RegisterMethod(@TCakDir2.CanAdd, 'CanAdd');
    RegisterPropertyHelper(@TCakDir2ArchiveName_R,@TCakDir2ArchiveName_W,'ArchiveName');
    RegisterPropertyHelper(@TCakDir2ArchiveType_R,@TCakDir2ArchiveType_W,'ArchiveType');
    RegisterPropertyHelper(@TCakDir2ArchiveNeedPassword_R,@TCakDir2ArchiveNeedPassword_W,'ArchiveNeedPassword');
    RegisterPropertyHelper(@TCakDir2ArchiveComment_R,@TCakDir2ArchiveComment_W,'ArchiveComment');
    RegisterPropertyHelper(@TCakDir2SortAuto_R,@TCakDir2SortAuto_W,'SortAuto');
    RegisterPropertyHelper(@TCakDir2SortIndex_R,@TCakDir2SortIndex_W,'SortIndex');
    RegisterPropertyHelper(@TCakDir2SortAccend_R,@TCakDir2SortAccend_W,'SortAccend');
    RegisterPropertyHelper(@TCakDir2SelectedCount_R,nil,'SelectedCount');
    RegisterPropertyHelper(@TCakDir2SelectedIndex_R,nil,'SelectedIndex');
    RegisterPropertyHelper(@TCakDir2ItemIndex_R,nil,'ItemIndex');
    RegisterPropertyHelper(@TCakDir2SelectedSize_R,nil,'SelectedSize');
    RegisterPropertyHelper(@TCakDir2OnCMessage_R,@TCakDir2OnCMessage_W,'OnCMessage');
    RegisterPropertyHelper(@TCakDir2OnCProgress_R,@TCakDir2OnCProgress_W,'OnCProgress');
    RegisterPropertyHelper(@TCakDir2OnCArchiveFound_R,@TCakDir2OnCArchiveFound_W,'OnCArchiveFound');
    RegisterPropertyHelper(@TCakDir2OnCOverwrite_R,@TCakDir2OnCOverwrite_W,'OnCOverwrite');
    RegisterPropertyHelper(@TCakDir2OnCPassword_R,@TCakDir2OnCPassword_W,'OnCPassword');
    RegisterPropertyHelper(@TCakDir2OnCCZipPassword_R,@TCakDir2OnCCZipPassword_W,'OnCCZipPassword');
    RegisterPropertyHelper(@TCakDir2OnCUnkCmd_R,@TCakDir2OnCUnkCmd_W,'OnCUnkCmd');
    RegisterPropertyHelper(nil,@TCakDir2Stop_W,'Stop');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_CakDir2(CL: TIFPSRuntimeClassImporter);
begin
  RIRegister_TCakDir2(CL);
end;

 
 
{ TIFPS3CE_CakDir2 }
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.CompOnUses(CompExec: TIFPS3CompExec);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.ExecOnUses(CompExec: TIFPS3CompExec);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.CompileImport1(CompExec: TIFPS3CompExec);
begin
  SIRegister_CakDir2(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.CompileImport2(CompExec: TIFPS3CompExec);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.ExecImport1(CompExec: TIFPS3CompExec; const ri: TIFPSRuntimeClassImporter);
begin
  RIRegister_CakDir2(ri);
  RIRegister_CakDir2_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakDir2.ExecImport2(CompExec: TIFPS3CompExec; const ri: TIFPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
initialization
 (**) 
{$IFDEF USEIMPORTER}
CIImporter.AddCallBack(@SIRegister_CakDir2,PT_ClassImport);
{$ENDIF}
finalization
 (**) 
 
end.
