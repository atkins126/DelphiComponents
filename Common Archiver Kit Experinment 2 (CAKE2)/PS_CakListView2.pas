unit PS_CakListView2;
{
This file has been generated by UnitParser v0.5, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ifps3 are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility

}
{$I ifps3_def.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSCompiler
  ,uPSComponent
  ,uPSRuntime
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TIFPS3CE_CakListView2 = class(TIFPS3Plugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 

{ compile-time registration functions }
procedure SIRegister_TCakListView2(CL: TIFPSPascalCompiler);
procedure SIRegister_CakListView2(CL: TIFPSPascalCompiler);
 
{ run-time registration functions }
procedure RIRegister_CakListView2_Routines(S: TIFPSExec);
procedure RIRegister_TCakListView2(CL: TPSRuntimeClassImporter);
procedure RIRegister_CakListView2(CL: TPSRuntimeClassImporter);



implementation


uses
   Windows
  ,Messages
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,ComCtrls
  ,CakDir2
  ,CakDefs2
  ,CakUtils2
  ,DragDropFile
  ,DragDrop
  ,CakListView2
  ;
 
 
{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class, 
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls 
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TIFPSPascalCompiler; const InheritsFrom, Classname: string): TIFPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;
  
  
(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TCakListView2(CL: TIFPSPascalCompiler);
begin
  //with RegClassS(CL,'TListView', 'TCakListView2') do
  with CL.AddClassN(CL.FindClass('TListView'),'TCakListView2') do
  begin
    RegisterProperty('CakDir', 'TCakDir2', iptrw);
    RegisterProperty('Passive', 'Boolean', iptrw);
    RegisterMethod('Procedure ReloadCAK');
    RegisterMethod('Procedure SetCakdir( aCakdir : TCakdir2)');
    RegisterMethod('Procedure DefaultCol');
    RegisterMethod('Procedure UpdateCol');
    RegisterMethod('Procedure ResetCol');
    RegisterMethod('Procedure UpdateColWidth');
    RegisterMethod('Procedure AddCol( ColType, DefWidth : integer; Autosize : boolean)');
    RegisterMethod('Procedure DropFileSourceDrop( Sender : TObject; DragType : TDragType; var ContinueDrop : Boolean)');
    RegisterMethod('Procedure Copy2Clipboard');
    RegisterMethod('Function SaveColSetting : string');
    RegisterMethod('Procedure LoadColSetting( Value : string)');
    RegisterProperty('CakDir2', 'TCakDir2', iptrw);
    RegisterProperty('OnLVData', 'TLVOwnerDataEvent', iptrw);
    RegisterProperty('OnRequestColCapt', 'TCReqColumnCaptionEvent', iptrw);
    RegisterProperty('PassiveMode', 'boolean', iptrw);
    RegisterProperty('UpdateSelection', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_CakListView2(CL: TIFPSPascalCompiler);
begin
 CL.AddConstantN('MaxColType','LongInt').SetInt( 9);
 CL.AddConstantN('deffilelist','String').SetString( ' 0_ 150_0| 1_ 100_0| 2_  50_0| 3_ 120_0| 4_  50_0| 5_  40_0| 6_  70_0| 7_ 200_0| 8_ 200_0|');
  SIRegister_TCakListView2(CL);
 CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TCakListView2UpdateSelection_W(Self: TCakListView2; const T: boolean);
begin Self.UpdateSelection := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2UpdateSelection_R(Self: TCakListView2; var T: boolean);
begin T := Self.UpdateSelection; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2PassiveMode_W(Self: TCakListView2; const T: boolean);
begin Self.PassiveMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2PassiveMode_R(Self: TCakListView2; var T: boolean);
begin T := Self.PassiveMode; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2OnRequestColCapt_W(Self: TCakListView2; const T: TCReqColumnCaptionEvent);
begin Self.OnRequestColCapt := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2OnRequestColCapt_R(Self: TCakListView2; var T: TCReqColumnCaptionEvent);
begin T := Self.OnRequestColCapt; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2OnLVData_W(Self: TCakListView2; const T: TLVOwnerDataEvent);
begin Self.OnLVData := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2OnLVData_R(Self: TCakListView2; var T: TLVOwnerDataEvent);
begin T := Self.OnLVData; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2CakDir2_W(Self: TCakListView2; const T: TCakDir2);
begin Self.CakDir2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2CakDir2_R(Self: TCakListView2; var T: TCakDir2);
begin T := Self.CakDir2; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2Passive_W(Self: TCakListView2; const T: Boolean);
Begin Self.Passive := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2Passive_R(Self: TCakListView2; var T: Boolean);
Begin T := Self.Passive; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2CakDir_W(Self: TCakListView2; const T: TCakDir2);
Begin Self.CakDir := T; end;

(*----------------------------------------------------------------------------*)
procedure TCakListView2CakDir_R(Self: TCakListView2; var T: TCakDir2);
Begin T := Self.CakDir; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_CakListView2_Routines(S: TIFPSExec);
begin
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCakListView2(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCakListView2) do
  begin
    RegisterPropertyHelper(@TCakListView2CakDir_R,@TCakListView2CakDir_W,'CakDir');
    RegisterPropertyHelper(@TCakListView2Passive_R,@TCakListView2Passive_W,'Passive');
    RegisterMethod(@TCakListView2.ReloadCAK, 'ReloadCAK');
    RegisterMethod(@TCakListView2.SetCakdir, 'SetCakdir');
    RegisterMethod(@TCakListView2.DefaultCol, 'DefaultCol');
    RegisterMethod(@TCakListView2.UpdateCol, 'UpdateCol');
    RegisterMethod(@TCakListView2.ResetCol, 'ResetCol');
    RegisterMethod(@TCakListView2.UpdateColWidth, 'UpdateColWidth');
    RegisterMethod(@TCakListView2.AddCol, 'AddCol');
    RegisterMethod(@TCakListView2.DropFileSourceDrop, 'DropFileSourceDrop');
    RegisterMethod(@TCakListView2.Copy2Clipboard, 'Copy2Clipboard');
    RegisterMethod(@TCakListView2.SaveColSetting, 'SaveColSetting');
    RegisterMethod(@TCakListView2.LoadColSetting, 'LoadColSetting');
    RegisterPropertyHelper(@TCakListView2CakDir2_R,@TCakListView2CakDir2_W,'CakDir2');
    RegisterPropertyHelper(@TCakListView2OnLVData_R,@TCakListView2OnLVData_W,'OnLVData');
    RegisterPropertyHelper(@TCakListView2OnRequestColCapt_R,@TCakListView2OnRequestColCapt_W,'OnRequestColCapt');
    RegisterPropertyHelper(@TCakListView2PassiveMode_R,@TCakListView2PassiveMode_W,'PassiveMode');
    RegisterPropertyHelper(@TCakListView2UpdateSelection_R,@TCakListView2UpdateSelection_W,'UpdateSelection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_CakListView2(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TCakListView2(CL);
end;

 
 
{ TIFPS3CE_CakListView2 }
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.ExecOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_CakListView2(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_CakListView2(ri);
  RIRegister_CakListView2_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_CakListView2.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
initialization
 (**) 
{$IFDEF USEIMPORTER}
CIImporter.AddCallBack(@SIRegister_CakListView2,PT_ClassImport);
{$ENDIF}
finalization
 (**) 
 
end.
