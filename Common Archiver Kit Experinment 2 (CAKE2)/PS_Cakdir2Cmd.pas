unit PS_cakdir2cmd;
{
This file has been generated by UnitParser v0.5, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ifps3 are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility

}

{$I ifps3_def.inc}
interface
 
uses
   SysUtils
  ,DateUtils
  ,Classes
  ,uPSCompiler
  ,uPSComponent
  ,uPSRuntime;

type 
(*----------------------------------------------------------------------------*)
  TIFPS3CE_cakdir2cmd = class(TIFPS3Plugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 

{ compile-time registration functions }
procedure SIRegister_cakdir2cmd(CL: TPSScript);

{ run-time registration functions }
procedure RIRegister_cakdir2cmd_Routines(S: TPSExec);



implementation


uses
   Windows
  ,Dialogs
  ,Cakdir2
  ,Forms
  ,QzRegistry
  ,StdCtrls
  ,PBFolderDialog
  ,cakdir2cmd
  ,Cakutils2
  ;
 

  
(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cakdir2cmd(CL: TPSScript);
begin

 CL.AddFunction(@Param,'Function Param : Tstrings');
 CL.AddFunction(@New,'Procedure New( name : string)');
 CL.AddFunction(@Open,'Procedure Open( name : string)');
 CL.AddFunction(@Close,'Procedure Close');
 CL.AddFunction(@Test,'Procedure Test');
 CL.AddFunction(@Extract,'Procedure Extract( what, too : string)');
 CL.AddFunction(@Add,'Procedure Add( what : string)');
 CL.AddFunction(@DoAdd,'Procedure DoAdd');
 CL.AddFunction(@Del,'Procedure Del( what : string)');
 CL.AddFunction(@Ren,'Procedure Ren( what, too : string)');
 CL.AddFunction(@Convert,'Procedure Convert( what, totype : string)');
 CL.AddFunction(@Password,'Procedure Password( what : string)');
 CL.AddFunction(@Useextrpath,'Procedure Useextrpath( toggle : boolean)');
 CL.AddFunction(@Useextroverwrite,'Procedure Useextroverwrite( toggle : boolean)');
 CL.AddFunction(@Useaddpath,'Procedure Useaddpath( toggle : boolean)');
 CL.AddFunction(@UseVerCtrl,'Procedure UseVerCtrl( toggle : boolean)');
 CL.AddFunction(@Userelativepath,'Procedure Userelativepath( toggle : boolean)');
 CL.AddFunction(@Usesubdir,'Procedure Usesubdir( toggle : boolean)');
 CL.AddFunction(@RunFile,'procedure RunFile(what,param : string);');
 CL.AddFunction(@RunAndwait,'procedure RunAndwait(ProgramPath, ProgramParam: string);');
 CL.AddFunction(@MoveFile,'Procedure MoveFile( what, too : string)');
 CL.AddFunction(@RenFile,'Procedure RenFile( what, too : string)');
 CL.AddFunction(@DelFile,'Procedure DelFile( what : string)');
 CL.AddFunction(@CopyFile,'Procedure CopyFile( what, too : string)');
 CL.AddFunction(@MakeDir,'Procedure MakeDir( what : string)');
 CL.AddFunction(@DelDir,'Procedure DelDir( what : string)');
 CL.AddFunction(@OpenFolder,'Procedure OpenFolder( what : string)');
 CL.AddFunction(@Sort,'Procedure Sort( index : integer; accending : boolean)');
 CL.AddFunction(@Total_Contents,'Function Total_Contents : integer');
 CL.AddFunction(@Contents_Filename,'Function Contents_Filename( which : integer) : String');
 CL.AddFunction(@Contents_FileDefPath,'Function Contents_FileDefPath( which : integer) : String');
 CL.AddFunction(@Contents_FileSize,'Function Contents_FileSize( which : integer) : Integer');
 CL.AddFunction(@Contents_FileCompSize,'Function Contents_FileCompSize( which : integer) : Integer');
 CL.AddFunction(@Contents_FileSelected,'Function Contents_FileSelected( which : integer) : Boolean');
 CL.AddFunction(@Contents_FileType,'Function Contents_FileType( which : integer) : String');
 CL.AddFunction(@Contents_FileDateTime,'Function Contents_FileDateTime( which : integer) : TDatetime');
 CL.AddFunction(@Select_File,'Procedure Select_File( which : integer)');
 CL.AddFunction(@DeSelect_File,'Procedure DeSelect_File( which : integer)');
 CL.AddFunction(@Mask_Select_File,'Function Mask_Select_File( mask : string) : integer');
 CL.AddFunction(@Clear_select,'Procedure Clear_select');
 CL.AddFunction(@TempPath,'Function TempPath : String');
 CL.AddFunction(@MydocuPath,'Function MydocuPath : string');
 CL.AddFunction(@DesktopPath,'Function DesktopPath : string');
 CL.AddFunction(@CakUtils2.GrabProgramPath,'Function ProgramPath : string'); 
 CL.AddFunction(@SystemPath,'Function SystemPath : string');
 CL.AddFunction(@GetFileSize,'Function GetFileSize( const FileName : String) : Integer');
 CL.AddFunction(@GetFileDateTime,'Function GetFileDateTime( const FileName : String) : TDatetime');
 CL.AddFunction(@appendSlash,'Function appendSlash( input : string) : string');
 CL.AddFunction(@pollfilelist,'Function pollfilelist( maskedname : string; subdir : boolean) : tstrings');
 CL.AddFunction(@New_Form,'Function New_Form( Left, Top, Width, Height : integer; Caption : string) : TForm');
 CL.AddFunction(@New_Label,'function New_Label(Parent : TWinControl; Left, Top : integer; Caption : String) : TLabel;');
 CL.AddFunction(@New_Edit,'Function New_Edit( Parent : TWinControl; Left, Top, Width, Height : integer; Text : String) : TEdit');
 CL.AddFunction(@New_Button,'Function New_Button( Parent : TWinControl; Left, Top, Width, Height : integer; Caption : String) : TButton');
 CL.AddFunction(@New_Memo,'Function New_Memo( Parent : TWinControl; Left, Top, Width, Height : integer) : TMemo');
 CL.AddFunction(@AskDirDialog,'Function AskDirDialog( Default : String) : String');
 CL.AddFunction(@AskFilenameDialog,'Function AskFilenameDialog( Default, filter : String) : String');
 CL.AddFunction(@Show_Form,'Procedure Show_Form( aForm : TForm)');
 CL.AddFunction(@FileExists,'function FileExists(const FileName: string): Boolean;');
 CL.AddFunction(@ChangeFileExt,'function ChangeFileExt(const FileName, Extension: string): string;');

 CL.AddFunction(@Sysutils.CreateDir,'function CreateDir(const Dir: string): Boolean;');
 CL.AddFunction(@Sysutils.DateTimeToStr,'function DateTimeToStr(DateTime: TDateTime): string;');
 CL.AddFunction(@Sysutils.DeleteFile,'function DeleteFile(const FileName: string): Boolean;');
 CL.AddFunction(@Sysutils.DirectoryExists,'function DirectoryExists(const Directory: string): Boolean;');
 CL.AddFunction(@Sysutils.DiskFree,'function DiskFree(Drive: Byte): Int64;');
 CL.AddFunction(@Sysutils.DiskSize,'function DiskSize(Drive: Byte): Int64;');
 CL.AddFunction(@Sysutils.EncodeDate,'function EncodeDate(Year, Month, Day: Word): TDateTime;');
 CL.AddFunction(@DateUtils.DecodeDateWeek,'procedure DecodeDateWeek(const AValue: TDateTime; out AYear, AWeekOfYear, ADayOfWeek: Word);');
 CL.AddFunction(@DateUtils.DecodeDayOfWeekInMonth,'procedure DecodeDayOfWeekInMonth(const AValue: TDateTime; out AYear, AMonth, ANthDayOfWeek, ADayOfWeek: Word);');
 CL.AddFunction(@DateUtils.DecodeDateTime,'procedure DecodeDateTime(const AValue: TDateTime; out AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word);');
 CL.AddFunction(@Sysutils.DecodeDate,'procedure DecodeDate(Date: TDateTime; var Year, Month, Day: Word);');
 CL.AddFunction(@Sysutils.ExpandFileName,'function ExpandFileName(const FileName: string): string;');
 CL.AddFunction(@Sysutils.ExtractFileName,'function ExtractFileName(const FileName: string): string;');
 CL.AddFunction(@Sysutils.ExtractFilePath,'function ExtractFilePath(const FileName: string): string;');
// CL.AddFunction(@Sysutils.FindFirst,'function FindFirst(const Path: string; Attr: Integer; var F: TSearchRec): Integer;');
// CL.AddFunction(@Sysutils.FindNext,'function FindNext(var F: TSearchRec): Integer;');
 CL.AddFunction(@Sysutils.RenameFile,'function RenameFile(const OldName, NewName: string): Boolean;');
 CL.AddFunction(@Sysutils.Format,'function Format(const Format: string; const Args: array of const): string;');
 CL.AddFunction(@QzRegistry.keyWrite,'procedure  KeyWrite(Section, Keyname : string; vartype : TVariabletype;var ValueInt : integer; var ValueStr : string;var Valuebol : boolean);');
 CL.AddFunction(@QzRegistry.KeyRead,'function  KeyRead(Section, Keyname : string; vartype : TVariabletype;var resultInt : integer; var resultStr : string;var resultbol : boolean) : boolean;');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_cakdir2cmd_Routines(S: TIFPSExec);
begin
{ S.RegisterDelphiFunction(@Param, 'Param', cdRegister);
 S.RegisterDelphiFunction(@New, 'New', cdRegister);
 S.RegisterDelphiFunction(@Open, 'Open', cdRegister);
 S.RegisterDelphiFunction(@Close, 'Close', cdRegister);
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
 S.RegisterDelphiFunction(@Extract, 'Extract', cdRegister);
 S.RegisterDelphiFunction(@Add, 'Add', cdRegister);
 S.RegisterDelphiFunction(@DoAdd, 'DoAdd', cdRegister);
 S.RegisterDelphiFunction(@Del, 'Del', cdRegister);
 S.RegisterDelphiFunction(@Ren, 'Ren', cdRegister);
 S.RegisterDelphiFunction(@Convert, 'Convert', cdRegister);
 S.RegisterDelphiFunction(@Password, 'Password', cdRegister);
 S.RegisterDelphiFunction(@Useextrpath, 'Useextrpath', cdRegister);
 S.RegisterDelphiFunction(@Useextroverwrite, 'Useextroverwrite', cdRegister);
 S.RegisterDelphiFunction(@Useaddpath, 'Useaddpath', cdRegister);
 S.RegisterDelphiFunction(@UseVerCtrl, 'UseVerCtrl', cdRegister);
 S.RegisterDelphiFunction(@Userelativepath, 'Userelativepath', cdRegister);
 S.RegisterDelphiFunction(@Usesubdir, 'Usesubdir', cdRegister);
 S.RegisterDelphiFunction(@RunFile, 'RunFile', cdRegister);
 S.RegisterDelphiFunction(@MoveFile, 'MoveFile', cdRegister);
 S.RegisterDelphiFunction(@RenFile, 'RenFile', cdRegister);
 S.RegisterDelphiFunction(@DelFile, 'DelFile', cdRegister);
 S.RegisterDelphiFunction(@CopyFile, 'CopyFile', cdRegister);
 S.RegisterDelphiFunction(@MakeDir, 'MakeDir', cdRegister);
 S.RegisterDelphiFunction(@DelDir, 'DelDir', cdRegister);
 S.RegisterDelphiFunction(@OpenFolder, 'OpenFolder', cdRegister);
 S.RegisterDelphiFunction(@Sort, 'Sort', cdRegister);
 S.RegisterDelphiFunction(@Total_Contents, 'Total_Contents', cdRegister);
 S.RegisterDelphiFunction(@Contents_Filename, 'Contents_Filename', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileDefPath, 'Contents_FileDefPath', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileSize, 'Contents_FileSize', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileCompSize, 'Contents_FileCompSize', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileSelected, 'Contents_FileSelected', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileType, 'Contents_FileType', cdRegister);
 S.RegisterDelphiFunction(@Contents_FileDateTime, 'Contents_FileDateTime', cdRegister);
 S.RegisterDelphiFunction(@Select_File, 'Select_File', cdRegister);
 S.RegisterDelphiFunction(@DeSelect_File, 'DeSelect_File', cdRegister);
 S.RegisterDelphiFunction(@Mask_Select_File, 'Mask_Select_File', cdRegister);
 S.RegisterDelphiFunction(@Clear_select, 'Clear_select', cdRegister);
 S.RegisterDelphiFunction(@TempPath, 'TempPath', cdRegister);
 S.RegisterDelphiFunction(@MydocuPath, 'MydocuPath', cdRegister);
 S.RegisterDelphiFunction(@DesktopPath, 'DesktopPath', cdRegister);
 S.RegisterDelphiFunction(@SystemPath, 'SystemPath', cdRegister);
 S.RegisterDelphiFunction(@GetFileSize, 'GetFileSize', cdRegister);
 S.RegisterDelphiFunction(@GetFileDateTime, 'GetFileDateTime', cdRegister);
 S.RegisterDelphiFunction(@appendSlash, 'appendSlash', cdRegister);
 S.RegisterDelphiFunction(@pollfilelist, 'pollfilelist', cdRegister);
 S.RegisterDelphiFunction(@New_Form, 'New_Form', cdRegister);
 S.RegisterDelphiFunction(@New_Label, 'New_Label', cdRegister);
 S.RegisterDelphiFunction(@New_Edit, 'New_Edit', cdRegister);
 S.RegisterDelphiFunction(@New_Button, 'New_Button', cdRegister);
 S.RegisterDelphiFunction(@New_Memo, 'New_Memo', cdRegister);
 S.RegisterDelphiFunction(@AskDirDialog, 'AskDirDialog', cdRegister);
 S.RegisterDelphiFunction(@AskFilenameDialog, 'AskFilenameDialog', cdRegister);
 S.RegisterDelphiFunction(@Show_Form, 'Show_Form', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.FileExists, 'FileExists', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.ChangeFileExt, 'ChangeFileExt', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.DateTimeToStr, 'DateTimeToStr', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.DeleteFile, 'DeleteFile', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.DirectoryExists, 'DirectoryExists', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.DiskFree, 'DiskFree', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.DiskSize, 'DiskSize', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.EncodeDate, 'EncodeDate', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.ExpandFileName, 'ExpandFileName', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.ExtractFileName, 'ExtractFileName', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.ExtractFilePath, 'ExtractFilePath', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.FindFirst, 'FindFirst', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.FindNext, 'FindNext', cdRegister);
 S.RegisterDelphiFunction(@Sysutils.RenameFile, 'RenameFile', cdRegister);
 }
end;

 
 
{ TIFPS3CE_cakdir2cmd }
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.ExecOnUses(CompExec: TPSScript);
begin
  { nothing }
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.CompileImport1(CompExec: TPSScript);
begin
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_cakdir2cmd(ri);
  //RIRegister_cakdir2cmd_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
procedure TIFPS3CE_cakdir2cmd.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;
 
 
initialization
 (**)
{$IFDEF USEIMPORTER}
CIImporter.AddCallBack(@SIRegister_cakdir2cmd,PT_ClassImport);
{$ENDIF}
finalization
 (**) 
 
end.
