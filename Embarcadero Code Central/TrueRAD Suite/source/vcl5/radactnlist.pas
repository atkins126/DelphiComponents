{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radactnlist;interfaceuses RadCommon, actnlist, radClasses, Classes, ImgList, Messages;type  TContainedActionClassInfo = class;  TCustomActionListClassInfo = class;  TActionListClassInfo = class;  TCustomActionClassInfo = class;  TActionClassInfo = class;  TActionLinkClassInfo = class;  TContainedActionClassInfo = class(TBasicActionClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomActionListClassInfo = class(TComponentClassInfo)  private    _VarParam_IsShortCut_Message: ^TWMKey;    _Event_OnChange: TNotifyEvent;    _Event_OnExecute: TActionEvent;    _Event_OnUpdate: TActionEvent;    procedure OnChange(Sender: TObject);    procedure OnExecute(Action: TBasicAction; var Handled: Boolean);    procedure OnUpdate(Action: TBasicAction; var Handled: Boolean);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TActionListClassInfo = class(TCustomActionListClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomActionClassInfo = class(TContainedActionClassInfo)  private    _VarParam_DoHint_HintStr: string;    _Event_OnHint: THintEvent;    procedure OnHint(var HintStr: string; var CanShow: Boolean);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TActionClassInfo = class(TCustomActionClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TActionLinkClassInfo = class(TBasicActionLinkClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTContainedAction = class(TContainedAction);  TProtectedTCustomActionList = class(TCustomActionList);  TProtectedTActionList = class(TActionList);  TProtectedTCustomAction = class(TCustomAction);  TProtectedTAction = class(TAction);  TProtectedTActionLink = class(TActionLink);const  TContainedActionProperties: String =     'Define::ActionList::psReadable..psWritable::pvPublic::0::' +    'Define::Index::psReadable..psWritable::pvPublic::0::' +    'Define::Category::psReadable..psWritable::pvPublished::0';  TContainedActionMethods: String =     '';  TContainedActionConstructors: String =     '';  TContainedActionEvents: String =     '';  TCustomActionListProperties: String =     'Define::Actions::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::ActionCount::psReadable::pvPublic::0::' +    'Define::Images::psReadable..psWritable::pvPublic::0';  TCustomActionListMethods: String =     'IsShortCut::msFunction::1::Message';  TCustomActionListConstructors: String =     '';  TCustomActionListEvents: String =     'Define::OnChange::pvProtected::1::Sender::' +    'Define::OnExecute::pvProtected::2::Action::Handled::' +    'Define::OnUpdate::pvProtected::2::Action::Handled';  TActionListProperties: String =     'Override::Images::::pvPublished';  TActionListMethods: String =     '';  TActionListConstructors: String =     '';  TActionListEvents: String =     'Override::OnChange::pvPublished::' +    'Override::OnExecute::pvPublished::' +    'Override::OnUpdate::pvPublished';  TCustomActionProperties: String =     'Define::Caption::psReadable..psWritable::pvPublic::0::' +    'Define::Checked::psReadable..psWritable::pvPublic::0::' +    'Define::DisableIfNoHandler::psReadable..psWritable::pvPublic::0::' +    'Define::Enabled::psReadable..psWritable::pvPublic::0::' +    'Define::HelpContext::psReadable..psWritable::pvPublic::0::' +    'Define::Hint::psReadable..psWritable::pvPublic::0::' +    'Define::ImageIndex::psReadable..psWritable::pvPublic::0::' +    'Define::ShortCut::psReadable..psWritable::pvPublic::0::' +    'Define::Visible::psReadable..psWritable::pvPublic::0';  TCustomActionMethods: String =     'DoHint::msFunction::1::HintStr';  TCustomActionConstructors: String =     '';  TCustomActionEvents: String =     'Define::OnHint::pvPublic::2::HintStr::CanShow';  TActionProperties: String =     'Override::Caption::::pvPublished::' +    'Override::Checked::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::HelpContext::::pvPublished::' +    'Override::Hint::::pvPublished::' +    'Override::ImageIndex::::pvPublished::' +    'Override::ShortCut::::pvPublished::' +    'Override::Visible::::pvPublished';  TActionMethods: String =     '';  TActionConstructors: String =     '';  TActionEvents: String =     'Override::OnExecute::pvPublished::' +    'Override::OnHint::pvPublished::' +    'Override::OnUpdate::pvPublished';  TActionLinkProperties: String =     '';  TActionLinkMethods: String =     '';  TActionLinkConstructors: String =     '';  TActionLinkEvents: String =     '';procedure TContainedActionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TContainedActionClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TContainedActionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TContainedActionProperties);end;procedure TContainedActionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TContainedActionMethods);end;procedure TContainedActionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TContainedActionConstructors);end;procedure TContainedActionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TContainedActionEvents);end;function TContainedActionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ActionList' then begin    Result := Longint(TProtectedTContainedAction(Owner).ActionList);  end else if Prop.Name = 'Index' then begin    Result := TProtectedTContainedAction(Owner).Index;  end else if Prop.Name = 'Category' then begin    Result := TProtectedTContainedAction(Owner).Category;  end else    Result := inherited GetProperty(Prop);end;procedure TContainedActionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'ActionList' then begin    TProtectedTContainedAction(Owner).ActionList := TCustomActionList(Longint(Value));  end else if Prop.Name = 'Index' then begin    TProtectedTContainedAction(Owner).Index := Value;  end else if Prop.Name = 'Category' then begin    TProtectedTContainedAction(Owner).Category := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TContainedActionClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TContainedActionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomActionListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTCustomActionList(Owner).OnChange;  TProtectedTCustomActionList(Owner).OnChange := OnChange;  _Event_OnExecute := TProtectedTCustomActionList(Owner).OnExecute;  TProtectedTCustomActionList(Owner).OnExecute := OnExecute;  _Event_OnUpdate := TProtectedTCustomActionList(Owner).OnUpdate;  TProtectedTCustomActionList(Owner).OnUpdate := OnUpdate;end;procedure TCustomActionListClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomActionList(Owner).OnChange := _Event_OnChange;  TProtectedTCustomActionList(Owner).OnExecute := _Event_OnExecute;  TProtectedTCustomActionList(Owner).OnUpdate := _Event_OnUpdate;  inherited UnConnectEventHandlers;end;procedure TCustomActionListClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TCustomActionListClassInfo.OnExecute(Action: TBasicAction; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnExecute');  _E.Args[0].Value := Longint(Action);  _E.Args[1].Value := Handled;  if Assigned(_Event_OnExecute) then _Event_OnExecute(Action, Handled);  FireEvent(_E);  Handled := _E.Args[1].Value;end;procedure TCustomActionListClassInfo.OnUpdate(Action: TBasicAction; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnUpdate');  _E.Args[0].Value := Longint(Action);  _E.Args[1].Value := Handled;  if Assigned(_Event_OnUpdate) then _Event_OnUpdate(Action, Handled);  FireEvent(_E);  Handled := _E.Args[1].Value;end;procedure TCustomActionListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomActionListProperties);end;procedure TCustomActionListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomActionListMethods);end;procedure TCustomActionListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomActionListConstructors);end;procedure TCustomActionListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomActionListEvents);end;function TCustomActionListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Actions' then begin    Result := Longint(TProtectedTCustomActionList(Owner).Actions[Prop.Indexes[0].Value]);  end else if Prop.Name = 'ActionCount' then begin    Result := TProtectedTCustomActionList(Owner).ActionCount;  end else if Prop.Name = 'Images' then begin    Result := Longint(TProtectedTCustomActionList(Owner).Images);  end else    Result := inherited GetProperty(Prop);end;procedure TCustomActionListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Actions' then begin    TProtectedTCustomActionList(Owner).Actions[Prop.Indexes[0].Value] := TContainedAction(Longint(Value));  end else if Prop.Name = 'Images' then begin    TProtectedTCustomActionList(Owner).Images := TCustomImageList(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TCustomActionListClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'IsShortCut' then begin    _VarParam_IsShortCut_Message := Pointer(Longint(Method.Args[0].Value));    TProtectedTCustomActionList(Owner).IsShortCut(_VarParam_IsShortCut_Message^);    Method.Args[0].Value := Longint(_VarParam_IsShortCut_Message);  end else    inherited InvokeMethod(Method);end;procedure TCustomActionListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TActionListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TActionListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TActionListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TActionListProperties);end;procedure TActionListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TActionListMethods);end;procedure TActionListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TActionListConstructors);end;procedure TActionListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TActionListEvents);end;function TActionListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TActionListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TActionListClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TActionListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomActionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnHint := TProtectedTCustomAction(Owner).OnHint;  TProtectedTCustomAction(Owner).OnHint := OnHint;end;procedure TCustomActionClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomAction(Owner).OnHint := _Event_OnHint;  inherited UnConnectEventHandlers;end;procedure TCustomActionClassInfo.OnHint(var HintStr: string; var CanShow: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnHint');  _E.Args[0].Value := HintStr;  _E.Args[1].Value := CanShow;  if Assigned(_Event_OnHint) then _Event_OnHint(HintStr, CanShow);  FireEvent(_E);  HintStr := _E.Args[0].Value;  CanShow := _E.Args[1].Value;end;procedure TCustomActionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomActionProperties);end;procedure TCustomActionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomActionMethods);end;procedure TCustomActionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomActionConstructors);end;procedure TCustomActionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomActionEvents);end;function TCustomActionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Caption' then begin    Result := TProtectedTCustomAction(Owner).Caption;  end else if Prop.Name = 'Checked' then begin    Result := TProtectedTCustomAction(Owner).Checked;  end else if Prop.Name = 'DisableIfNoHandler' then begin    Result := TProtectedTCustomAction(Owner).DisableIfNoHandler;  end else if Prop.Name = 'Enabled' then begin    Result := TProtectedTCustomAction(Owner).Enabled;  end else if Prop.Name = 'HelpContext' then begin    Result := TProtectedTCustomAction(Owner).HelpContext;  end else if Prop.Name = 'Hint' then begin    Result := TProtectedTCustomAction(Owner).Hint;  end else if Prop.Name = 'ImageIndex' then begin    Result := TProtectedTCustomAction(Owner).ImageIndex;  end else if Prop.Name = 'ShortCut' then begin    Result := TProtectedTCustomAction(Owner).ShortCut;  end else if Prop.Name = 'Visible' then begin    Result := TProtectedTCustomAction(Owner).Visible;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomActionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Caption' then begin    TProtectedTCustomAction(Owner).Caption := Value;  end else if Prop.Name = 'Checked' then begin    TProtectedTCustomAction(Owner).Checked := Value;  end else if Prop.Name = 'DisableIfNoHandler' then begin    TProtectedTCustomAction(Owner).DisableIfNoHandler := Value;  end else if Prop.Name = 'Enabled' then begin    TProtectedTCustomAction(Owner).Enabled := Value;  end else if Prop.Name = 'HelpContext' then begin    TProtectedTCustomAction(Owner).HelpContext := Value;  end else if Prop.Name = 'Hint' then begin    TProtectedTCustomAction(Owner).Hint := Value;  end else if Prop.Name = 'ImageIndex' then begin    TProtectedTCustomAction(Owner).ImageIndex := Value;  end else if Prop.Name = 'ShortCut' then begin    TProtectedTCustomAction(Owner).ShortCut := Value;  end else if Prop.Name = 'Visible' then begin    TProtectedTCustomAction(Owner).Visible := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomActionClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'DoHint' then begin    _VarParam_DoHint_HintStr := Method.Args[0].Value;    TProtectedTCustomAction(Owner).DoHint(_VarParam_DoHint_HintStr);    Method.Args[0].Value := _VarParam_DoHint_HintStr;  end else    inherited InvokeMethod(Method);end;procedure TCustomActionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TActionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TActionClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TActionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TActionProperties);end;procedure TActionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TActionMethods);end;procedure TActionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TActionConstructors);end;procedure TActionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TActionEvents);end;function TActionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TActionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TActionClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TActionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TActionLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TActionLinkClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TActionLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TActionLinkProperties);end;procedure TActionLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TActionLinkMethods);end;procedure TActionLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TActionLinkConstructors);end;procedure TActionLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TActionLinkEvents);end;function TActionLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TActionLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TActionLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TActionLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TContainedAction', TContainedActionClassInfo);  TradClassRegistry.RegisterClass('TCustomActionList', TCustomActionListClassInfo);  TradClassRegistry.RegisterClass('TActionList', TActionListClassInfo);  TradClassRegistry.RegisterClass('TCustomAction', TCustomActionClassInfo);  TradClassRegistry.RegisterClass('TAction', TActionClassInfo);  TradClassRegistry.RegisterClass('TActionLink', TActionLinkClassInfo);end.