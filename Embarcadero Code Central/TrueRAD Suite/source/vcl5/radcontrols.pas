{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radcontrols;interfaceuses RadCommon, Windows, controls, radSystem, Graphics, radGraphics, radActnList, radClasses, Classes, Menus, Messages, radImgList, ImgList;type  TDragObjectClassInfo = class;  TBaseDragControlObjectClassInfo = class;  TDragControlObjectClassInfo = class;  TDragDockObjectClassInfo = class;  TControlCanvasClassInfo = class;  TControlActionLinkClassInfo = class;  TSizeConstraintsClassInfo = class;  TControlClassInfo = class;  TWinControlActionLinkClassInfo = class;  TWinControlClassInfo = class;  TGraphicControlClassInfo = class;  TCustomControlClassInfo = class;  THintWindowClassInfo = class;  TDragImageListClassInfo = class;  TImageListClassInfo = class;  TDockZoneClassInfo = class;  TDockTreeClassInfo = class;  TMouseClassInfo = class;  TDragObjectClassInfo = class(TObjectClassInfo)  private    _Prop_DragHandle: HWND;    _Prop_DragPos: TPoint;    _Prop_DragTargetPos: TPoint;    _MethodRes_Instance: THandle;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBaseDragControlObjectClassInfo = class(TDragObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TDragControlObjectClassInfo = class(TBaseDragControlObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TDragDockObjectClassInfo = class(TBaseDragControlObjectClassInfo)  private    _Prop_DockRect: TRect;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TControlCanvasClassInfo = class(TCanvasClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TControlActionLinkClassInfo = class(TActionLinkClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TSizeConstraintsClassInfo = class(TPersistentClassInfo)  private    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TControlClassInfo = class(TComponentClassInfo)  private    _Prop_ScalingFlags: TScalingFlags;    _Prop_Anchors: TAnchors;    _Prop_BoundsRect: TRect;    _Prop_ClientOrigin: TPoint;    _Prop_ClientRect: TRect;    _Prop_ControlState: TControlState;    _Prop_ControlStyle: TControlStyle;    _MethodRes_ClientToScreen: TPoint;    _MethodRes_ScreenToClient: TPoint;    _Event_OnCanResize: TCanResizeEvent;    _Event_OnClick: TNotifyEvent;    _Event_OnConstrainedResize: TConstrainedResizeEvent;    _Event_OnContextPopup: TContextPopupEvent;    _Event_OnDblClick: TNotifyEvent;    _Event_OnDragDrop: TDragDropEvent;    _Event_OnDragOver: TDragOverEvent;    _Event_OnEndDock: TEndDragEvent;    _Event_OnEndDrag: TEndDragEvent;    _Event_OnMouseDown: TMouseEvent;    _Event_OnMouseMove: TMouseMoveEvent;    _Event_OnMouseUp: TMouseEvent;    _Event_OnResize: TNotifyEvent;    _Event_OnStartDock: TStartDockEvent;    _Event_OnStartDrag: TStartDragEvent;    procedure OnCanResize(Sender: TObject; var NewWidth: Integer; var NewHeight: Integer; var Resize: Boolean);    procedure OnClick(Sender: TObject);    procedure OnConstrainedResize(Sender: TObject; var MinWidth: Integer; var MinHeight: Integer; var MaxWidth: Integer; var MaxHeight: Integer);    procedure OnContextPopup(Sender: TObject; MousePos: TPoint; var Handled: Boolean);    procedure OnDblClick(Sender: TObject);    procedure OnDragDrop(Sender: TObject; Source: TObject; X: Integer; Y: Integer);    procedure OnDragOver(Sender: TObject; Source: TObject; X: Integer; Y: Integer; State: TDragState; var Accept: Boolean);    procedure OnEndDock(Sender: TObject; Target: TObject; X: Integer; Y: Integer);    procedure OnEndDrag(Sender: TObject; Target: TObject; X: Integer; Y: Integer);    procedure OnMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X: Integer; Y: Integer);    procedure OnMouseMove(Sender: TObject; Shift: TShiftState; X: Integer; Y: Integer);    procedure OnMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X: Integer; Y: Integer);    procedure OnResize(Sender: TObject);    procedure OnStartDock(Sender: TObject; var DragObject: TDragDockObject);    procedure OnStartDrag(Sender: TObject; var DragObject: TDragObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TWinControlActionLinkClassInfo = class(TControlActionLinkClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TWinControlClassInfo = class(TControlClassInfo)  private    _Prop_BevelEdges: TBevelEdges;    _Prop_WindowHandle: HWND;    _Prop_Handle: HWND;    _Prop_ParentWindow: HWND;    _VarParam_Broadcast_Message: Variant;    _VarParam_MouseWheelHandler_Message: ^TMessage;    _Event_OnDockDrop: TDockDropEvent;    _Event_OnDockOver: TDockOverEvent;    _Event_OnEnter: TNotifyEvent;    _Event_OnExit: TNotifyEvent;    _Event_OnGetSiteInfo: TGetSiteInfoEvent;    _Event_OnKeyDown: TKeyEvent;    _Event_OnKeyPress: TKeyPressEvent;    _Event_OnKeyUp: TKeyEvent;    _Event_OnMouseWheel: TMouseWheelEvent;    _Event_OnMouseWheelDown: TMouseWheelUpDownEvent;    _Event_OnMouseWheelUp: TMouseWheelUpDownEvent;    _Event_OnUnDock: TUnDockEvent;    procedure OnDockDrop(Sender: TObject; Source: TDragDockObject; X: Integer; Y: Integer);    procedure OnDockOver(Sender: TObject; Source: TDragDockObject; X: Integer; Y: Integer; State: TDragState; var Accept: Boolean);    procedure OnEnter(Sender: TObject);    procedure OnExit(Sender: TObject);    procedure OnGetSiteInfo(Sender: TObject; DockClient: TControl; var InfluenceRect: TRect; MousePos: TPoint; var CanDock: Boolean);    procedure OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);    procedure OnKeyPress(Sender: TObject; var Key: Char);    procedure OnKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);    procedure OnMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);    procedure OnMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);    procedure OnMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);    procedure OnUnDock(Sender: TObject; Client: TControl; NewTarget: TWinControl; var Allow: Boolean);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TGraphicControlClassInfo = class(TControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomControlClassInfo = class(TWinControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  THintWindowClassInfo = class(TCustomControlClassInfo)  private    _MethodRes_CalcHintRect: TRect;    _VarParam_IsHintMsg_Msg: ^TMsg;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TDragImageListClassInfo = class(TCustomImageListClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TImageListClassInfo = class(TDragImageListClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TDockZoneClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TDockTreeClassInfo = class(TInterfacedObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMouseClassInfo = class(TObjectClassInfo)  private    _Prop_Capture: HWND;    _Prop_CursorPos: TPoint;    _Prop_RegWheelMessage: UINT;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTDragObject = class(TDragObject);  TProtectedTBaseDragControlObject = class(TBaseDragControlObject);  TProtectedTDragControlObject = class(TDragControlObject);  TProtectedTDragDockObject = class(TDragDockObject);  TProtectedTControlCanvas = class(TControlCanvas);  TProtectedTControlActionLink = class(TControlActionLink);  TProtectedTSizeConstraints = class(TSizeConstraints);  TProtectedTControl = class(TControl);  TProtectedTWinControlActionLink = class(TWinControlActionLink);  TProtectedTWinControl = class(TWinControl);  TProtectedTGraphicControl = class(TGraphicControl);  TProtectedTCustomControl = class(TCustomControl);  TProtectedTHintWindow = class(THintWindow);  TProtectedTDragImageList = class(TDragImageList);  TProtectedTImageList = class(TImageList);  TProtectedTDockZone = class(TDockZone);  TProtectedTDockTree = class(TDockTree);  TProtectedTMouse = class(TMouse);const  TDragObjectProperties: String =     'Define::Cancelling::psReadable..psWritable::pvPublic::0::' +    'Define::DragHandle::psReadable..psWritable::pvPublic::0::' +    'Define::DragPos::psReadable..psWritable::pvPublic::0::' +    'Define::DragTargetPos::psReadable..psWritable::pvPublic::0::' +    'Define::DragTarget::psReadable..psWritable::pvPublic::0::' +    'Define::MouseDeltaX::psReadable::pvPublic::0::' +    'Define::MouseDeltaY::psReadable::pvPublic::0';  TDragObjectMethods: String =     'Assign::msProcedure::1::Source::' +    'GetName::msFunction::0::' +    'HideDragImage::msProcedure::0::' +    'Instance::msFunction::0::' +    'ShowDragImage::msProcedure::0';  TDragObjectConstructors: String =     '';  TDragObjectEvents: String =     '';  TBaseDragControlObjectProperties: String =     'Define::Control::psReadable..psWritable::pvPublic::0';  TBaseDragControlObjectMethods: String =     '';  TBaseDragControlObjectConstructors: String =     'Create::1::AControl';  TBaseDragControlObjectEvents: String =     '';  TDragControlObjectProperties: String =     '';  TDragControlObjectMethods: String =     '';  TDragControlObjectConstructors: String =     '';  TDragControlObjectEvents: String =     '';  TDragDockObjectProperties: String =     'Define::Brush::psReadable..psWritable::pvPublic::0::' +    'Define::DockRect::psReadable..psWritable::pvPublic::0::' +    'Define::DropAlign::psReadable::pvPublic::0::' +    'Define::DropOnControl::psReadable::pvPublic::0::' +    'Define::Floating::psReadable..psWritable::pvPublic::0::' +    'Define::FrameWidth::psReadable::pvPublic::0';  TDragDockObjectMethods: String =     '';  TDragDockObjectConstructors: String =     '';  TDragDockObjectEvents: String =     '';  TControlCanvasProperties: String =     'Define::Control::psReadable..psWritable::pvPublic::0';  TControlCanvasMethods: String =     'FreeHandle::msProcedure::0::' +    'UpdateTextFlags::msProcedure::0';  TControlCanvasConstructors: String =     '';  TControlCanvasEvents: String =     '';  TControlActionLinkProperties: String =     '';  TControlActionLinkMethods: String =     '';  TControlActionLinkConstructors: String =     '';  TControlActionLinkEvents: String =     '';  TSizeConstraintsProperties: String =     'Define::Control::psReadable::pvProtected::0::' +    'Define::MaxHeight::psReadable..psWritable::pvPublished::0::' +    'Define::MaxWidth::psReadable..psWritable::pvPublished::0::' +    'Define::MinHeight::psReadable..psWritable::pvPublished::0::' +    'Define::MinWidth::psReadable..psWritable::pvPublished::0';  TSizeConstraintsMethods: String =     '';  TSizeConstraintsConstructors: String =     'Create::1::Control';  TSizeConstraintsEvents: String =     'Define::OnChange::pvPublic::1::Sender';  TControlProperties: String =     'Define::ActionLink::psReadable..psWritable::pvProtected::0::' +    'Define::AutoSize::psReadable..psWritable::pvProtected::0::' +    'Define::Caption::psReadable..psWritable::pvProtected::0::' +    'Define::Color::psReadable..psWritable::pvProtected::0::' +    'Define::DesktopFont::psReadable..psWritable::pvProtected::0::' +    'Define::DragKind::psReadable..psWritable::pvProtected::0::' +    'Define::DragCursor::psReadable..psWritable::pvProtected::0::' +    'Define::DragMode::psReadable..psWritable::pvProtected::0::' +    'Define::Font::psReadable..psWritable::pvProtected::0::' +    'Define::IsControl::psReadable..psWritable::pvProtected::0::' +    'Define::MouseCapture::psReadable..psWritable::pvProtected::0::' +    'Define::ParentBiDiMode::psReadable..psWritable::pvProtected::0::' +    'Define::ParentColor::psReadable..psWritable::pvProtected::0::' +    'Define::ParentFont::psReadable..psWritable::pvProtected::0::' +    'Define::ParentShowHint::psReadable..psWritable::pvProtected::0::' +    'Define::PopupMenu::psReadable..psWritable::pvProtected::0::' +    'Define::ScalingFlags::psReadable..psWritable::pvProtected::0::' +    'Define::Text::psReadable..psWritable::pvProtected::0::' +    'Define::WindowText::psReadable..psWritable::pvProtected::0::' +    'Define::Enabled::psReadable..psWritable::pvPublic::0::' +    'Define::Action::psReadable..psWritable::pvPublic::0::' +    'Define::Align::psReadable..psWritable::pvPublic::0::' +    'Define::Anchors::psReadable..psWritable::pvPublic::0::' +    'Define::BiDiMode::psReadable..psWritable::pvPublic::0::' +    'Define::BoundsRect::psReadable..psWritable::pvPublic::0::' +    'Define::ClientHeight::psReadable..psWritable::pvPublic::0::' +    'Define::ClientOrigin::psReadable::pvPublic::0::' +    'Define::ClientRect::psReadable::pvPublic::0::' +    'Define::ClientWidth::psReadable..psWritable::pvPublic::0::' +    'Define::Constraints::psReadable..psWritable::pvPublic::0::' +    'Define::ControlState::psReadable..psWritable::pvPublic::0::' +    'Define::ControlStyle::psReadable..psWritable::pvPublic::0::' +    'Define::DockOrientation::psReadable..psWritable::pvPublic::0::' +    'Define::Floating::psReadable::pvPublic::0::' +    'Define::FloatingDockSiteClass::psReadable..psWritable::pvPublic::0::' +    'Define::HostDockSite::psReadable..psWritable::pvPublic::0::' +    'Define::LRDockWidth::psReadable..psWritable::pvPublic::0::' +    'Define::Parent::psReadable..psWritable::pvPublic::0::' +    'Define::ShowHint::psReadable..psWritable::pvPublic::0::' +    'Define::TBDockHeight::psReadable..psWritable::pvPublic::0::' +    'Define::UndockHeight::psReadable..psWritable::pvPublic::0::' +    'Define::UndockWidth::psReadable..psWritable::pvPublic::0::' +    'Define::Visible::psReadable..psWritable::pvPublic::0::' +    'Define::Left::psReadable..psWritable::pvPublished::0::' +    'Define::Top::psReadable..psWritable::pvPublished::0::' +    'Define::Width::psReadable..psWritable::pvPublished::0::' +    'Define::Height::psReadable..psWritable::pvPublished::0::' +    'Define::Cursor::psReadable..psWritable::pvPublished::0::' +    'Define::Hint::psReadable..psWritable::pvPublished::0';  TControlMethods: String =     'BeginDrag::msProcedure::2::Immediate::Threshold::' +    'BringToFront::msProcedure::0::' +    'ClientToScreen::msFunction::1::Point::' +    'Dock::msProcedure::2::NewDockSite::ARect::' +    'Dragging::msFunction::0::' +    'DragDrop::msProcedure::3::Source::X::Y::' +    'DrawTextBiDiModeFlags::msFunction::1::Flags::' +    'DrawTextBiDiModeFlagsReadingOnly::msFunction::0::' +    'EndDrag::msProcedure::1::Drop::' +    'GetControlsAlignment::msFunction::0::' +    'GetTextBuf::msFunction::2::Buffer::BufSize::' +    'GetTextLen::msFunction::0::' +    'Hide::msProcedure::0::' +    'InitiateAction::msProcedure::0::' +    'Invalidate::msProcedure::0::' +    'IsRightToLeft::msFunction::0::' +    'ManualDock::msFunction::3::NewDockSite::DropControl::ControlSide::' +    'ManualFloat::msFunction::1::ScreenPos::' +    'Perform::msFunction::3::Msg::WParam::LParam::' +    'Refresh::msProcedure::0::' +    'Repaint::msProcedure::0::' +    'ReplaceDockedControl::msFunction::4::Control::NewDockSite::DropControl::ControlSide::' +    'ScreenToClient::msFunction::1::Point::' +    'SendToBack::msProcedure::0::' +    'SetBounds::msProcedure::4::ALeft::ATop::AWidth::AHeight::' +    'SetTextBuf::msProcedure::1::Buffer::' +    'Show::msProcedure::0::' +    'Update::msProcedure::0::' +    'UseRightToLeftAlignment::msFunction::0::' +    'UseRightToLeftReading::msFunction::0::' +    'UseRightToLeftScrollBar::msFunction::0';  TControlConstructors: String =     '';  TControlEvents: String =     'Define::OnCanResize::pvProtected::4::Sender::NewWidth::NewHeight::Resize::' +    'Define::OnClick::pvProtected::1::Sender::' +    'Define::OnConstrainedResize::pvProtected::5::Sender::MinWidth::MinHeight::MaxWidth::MaxHeight::' +    'Define::OnContextPopup::pvProtected::3::Sender::MousePos::Handled::' +    'Define::OnDblClick::pvProtected::1::Sender::' +    'Define::OnDragDrop::pvProtected::4::Sender::Source::X::Y::' +    'Define::OnDragOver::pvProtected::6::Sender::Source::X::Y::State::Accept::' +    'Define::OnEndDock::pvProtected::4::Sender::Target::X::Y::' +    'Define::OnEndDrag::pvProtected::4::Sender::Target::X::Y::' +    'Define::OnMouseDown::pvProtected::5::Sender::Button::Shift::X::Y::' +    'Define::OnMouseMove::pvProtected::4::Sender::Shift::X::Y::' +    'Define::OnMouseUp::pvProtected::5::Sender::Button::Shift::X::Y::' +    'Define::OnResize::pvProtected::1::Sender::' +    'Define::OnStartDock::pvProtected::2::Sender::DragObject::' +    'Define::OnStartDrag::pvProtected::2::Sender::DragObject';  TWinControlActionLinkProperties: String =     '';  TWinControlActionLinkMethods: String =     '';  TWinControlActionLinkConstructors: String =     '';  TWinControlActionLinkEvents: String =     '';  TWinControlProperties: String =     'Define::BevelEdges::psReadable..psWritable::pvProtected::0::' +    'Define::BevelInner::psReadable..psWritable::pvProtected::0::' +    'Define::BevelOuter::psReadable..psWritable::pvProtected::0::' +    'Define::BevelKind::psReadable..psWritable::pvProtected::0::' +    'Define::BevelWidth::psReadable..psWritable::pvProtected::0::' +    'Define::BorderWidth::psReadable..psWritable::pvProtected::0::' +    'Define::Ctl3D::psReadable..psWritable::pvProtected::0::' +    'Define::DefWndProc::psReadable..psWritable::pvProtected::0::' +    'Define::DockSite::psReadable..psWritable::pvProtected::0::' +    'Define::DockManager::psReadable..psWritable::pvProtected::0::' +    'Define::ImeMode::psReadable..psWritable::pvProtected::0::' +    'Define::ImeName::psReadable..psWritable::pvProtected::0::' +    'Define::ParentCtl3D::psReadable..psWritable::pvProtected::0::' +    'Define::UseDockManager::psReadable..psWritable::pvProtected::0::' +    'Define::WheelAccumulator::psReadable..psWritable::pvProtected::0::' +    'Define::WindowHandle::psReadable..psWritable::pvProtected::0::' +    'Define::DockClientCount::psReadable::pvPublic::0::' +    'Define::DockClients::psReadable..psIndexed::pvPublic::1::Index::' +    'Define::DoubleBuffered::psReadable..psWritable::pvPublic::0::' +    'Define::VisibleDockClientCount::psReadable::pvPublic::0::' +    'Define::Brush::psReadable::pvPublic::0::' +    'Define::Controls::psReadable..psIndexed::pvPublic::1::Index::' +    'Define::ControlCount::psReadable::pvPublic::0::' +    'Define::Handle::psReadable::pvPublic::0::' +    'Define::ParentWindow::psReadable..psWritable::pvPublic::0::' +    'Define::Showing::psReadable::pvPublic::0::' +    'Define::TabOrder::psReadable..psWritable::pvPublic::0::' +    'Define::TabStop::psReadable..psWritable::pvPublic::0::' +    'Define::HelpContext::psReadable..psWritable::pvPublished::0';  TWinControlMethods: String =     'CreateParentedControl::msFunction::1::ParentWindow::' +    'Broadcast::msProcedure::1::Message::' +    'CanFocus::msFunction::0::' +    'ContainsControl::msFunction::1::Control::' +    'ControlAtPos::msFunction::3::Pos::AllowDisabled::AllowWinControls::' +    'DisableAlign::msProcedure::0::' +    'DockDrop::msProcedure::3::Source::X::Y::' +    'EnableAlign::msProcedure::0::' +    'FindChildControl::msFunction::1::ControlName::' +    'FlipChildren::msProcedure::1::AllLevels::' +    'Focused::msFunction::0::' +    'GetTabOrderList::msProcedure::1::List::' +    'HandleAllocated::msFunction::0::' +    'HandleNeeded::msProcedure::0::' +    'InsertControl::msProcedure::1::AControl::' +    'MouseWheelHandler::msProcedure::1::Message::' +    'PaintTo::msProcedure::3::DC::X::Y::' +    'RemoveControl::msProcedure::1::AControl::' +    'Realign::msProcedure::0::' +    'ScaleBy::msProcedure::2::M::D::' +    'ScrollBy::msProcedure::2::DeltaX::DeltaY::' +    'SetFocus::msProcedure::0::' +    'UpdateControlState::msProcedure::0';  TWinControlConstructors: String =     'CreateParented::1::ParentWindow';  TWinControlEvents: String =     'Define::OnDockDrop::pvProtected::4::Sender::Source::X::Y::' +    'Define::OnDockOver::pvProtected::6::Sender::Source::X::Y::State::Accept::' +    'Define::OnEnter::pvProtected::1::Sender::' +    'Define::OnExit::pvProtected::1::Sender::' +    'Define::OnGetSiteInfo::pvProtected::5::Sender::DockClient::InfluenceRect::MousePos::CanDock::' +    'Define::OnKeyDown::pvProtected::3::Sender::Key::Shift::' +    'Define::OnKeyPress::pvProtected::2::Sender::Key::' +    'Define::OnKeyUp::pvProtected::3::Sender::Key::Shift::' +    'Define::OnMouseWheel::pvProtected::5::Sender::Shift::WheelDelta::MousePos::Handled::' +    'Define::OnMouseWheelDown::pvProtected::4::Sender::Shift::MousePos::Handled::' +    'Define::OnMouseWheelUp::pvProtected::4::Sender::Shift::MousePos::Handled::' +    'Define::OnUnDock::pvProtected::4::Sender::Client::NewTarget::Allow';  TGraphicControlProperties: String =     'Define::Canvas::psReadable::pvProtected::0';  TGraphicControlMethods: String =     '';  TGraphicControlConstructors: String =     '';  TGraphicControlEvents: String =     '';  TCustomControlProperties: String =     'Define::Canvas::psReadable::pvProtected::0';  TCustomControlMethods: String =     '';  TCustomControlConstructors: String =     '';  TCustomControlEvents: String =     '';  THintWindowProperties: String =     'Override::BiDiMode::::pvPublic::' +    'Override::Caption::::pvPublic::' +    'Override::Color::::pvPublic::' +    'Override::Canvas::::pvPublic::' +    'Override::Font::::pvPublic';  THintWindowMethods: String =     'ActivateHint::msProcedure::2::Rect::AHint::' +    'ActivateHintData::msProcedure::3::Rect::AHint::AData::' +    'CalcHintRect::msFunction::3::MaxWidth::AHint::AData::' +    'IsHintMsg::msFunction::1::Msg::' +    'ReleaseHandle::msProcedure::0';  THintWindowConstructors: String =     '';  THintWindowEvents: String =     '';  TDragImageListProperties: String =     'Define::DragCursor::psReadable..psWritable::pvPublic::0::' +    'Define::Dragging::psReadable::pvPublic::0';  TDragImageListMethods: String =     'BeginDrag::msFunction::3::Window::X::Y::' +    'DragLock::msFunction::3::Window::XPos::YPos::' +    'DragMove::msFunction::2::X::Y::' +    'DragUnlock::msProcedure::0::' +    'EndDrag::msFunction::0::' +    'HideDragImage::msProcedure::0::' +    'SetDragImage::msFunction::3::Index::HotSpotX::HotSpotY::' +    'ShowDragImage::msProcedure::0';  TDragImageListConstructors: String =     '';  TDragImageListEvents: String =     '';  TImageListProperties: String =     'Override::BlendColor::::pvPublished::' +    'Override::BkColor::::pvPublished::' +    'Override::AllocBy::::pvPublished::' +    'Override::DrawingStyle::::pvPublished::' +    'Override::Height::::pvPublished::' +    'Override::ImageType::::pvPublished::' +    'Override::Masked::::pvPublished::' +    'Override::ShareImages::::pvPublished::' +    'Override::Width::::pvPublished';  TImageListMethods: String =     '';  TImageListConstructors: String =     '';  TImageListEvents: String =     'Override::OnChange::pvPublished';  TDockZoneProperties: String =     'Define::ChildCount::psReadable::pvPublic::0::' +    'Define::Height::psReadable::pvPublic::0::' +    'Define::Left::psReadable::pvPublic::0::' +    'Define::LimitBegin::psReadable::pvPublic::0::' +    'Define::LimitSize::psReadable::pvPublic::0::' +    'Define::Top::psReadable::pvPublic::0::' +    'Define::Width::psReadable::pvPublic::0';  TDockZoneMethods: String =     'ResetChildren::msProcedure::0::' +    'Update::msProcedure::0';  TDockZoneConstructors: String =     'Create::1::Tree';  TDockZoneEvents: String =     '';  TDockTreeProperties: String =     'Define::DockSite::psReadable..psWritable::pvProtected::0';  TDockTreeMethods: String =     'PaintSite::msProcedure::1::DC';  TDockTreeConstructors: String =     'Create::1::DockSite';  TDockTreeEvents: String =     '';  TMouseProperties: String =     'Define::Capture::psReadable..psWritable::pvPublic::0::' +    'Define::CursorPos::psReadable..psWritable::pvPublic::0::' +    'Define::DragImmediate::psReadable..psWritable::pvPublic::0::' +    'Define::DragThreshold::psReadable..psWritable::pvPublic::0::' +    'Define::MousePresent::psReadable::pvPublic::0::' +    'Define::RegWheelMessage::psReadable::pvPublic::0::' +    'Define::WheelPresent::psReadable::pvPublic::0::' +    'Define::WheelScrollLines::psReadable::pvPublic::0';  TMouseMethods: String =     'SettingChanged::msProcedure::1::Setting';  TMouseConstructors: String =     'Create::0';  TMouseEvents: String =     '';procedure TDragObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDragObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDragObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDragObjectProperties);end;procedure TDragObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDragObjectMethods);end;procedure TDragObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDragObjectConstructors);end;procedure TDragObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDragObjectEvents);end;function TDragObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Cancelling' then begin    Result := TProtectedTDragObject(Owner).Cancelling;  end else if Prop.Name = 'DragHandle' then begin    _Prop_DragHandle := TProtectedTDragObject(Owner).DragHandle;    Result := Longint(@_Prop_DragHandle);  end else if Prop.Name = 'DragPos' then begin    _Prop_DragPos := TProtectedTDragObject(Owner).DragPos;    Result := Longint(@_Prop_DragPos);  end else if Prop.Name = 'DragTargetPos' then begin    _Prop_DragTargetPos := TProtectedTDragObject(Owner).DragTargetPos;    Result := Longint(@_Prop_DragTargetPos);  end else if Prop.Name = 'DragTarget' then begin    Result := Longint(TProtectedTDragObject(Owner).DragTarget);  end else if Prop.Name = 'MouseDeltaX' then begin    Result := TProtectedTDragObject(Owner).MouseDeltaX;  end else if Prop.Name = 'MouseDeltaY' then begin    Result := TProtectedTDragObject(Owner).MouseDeltaY;  end else    Result := inherited GetProperty(Prop);end;procedure TDragObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _DragHandle: ^Longword;  _DragPos: ^TPoint;  _DragTargetPos: ^TPoint;begin  if Prop.Name = 'Cancelling' then begin    TProtectedTDragObject(Owner).Cancelling := Value;  end else if Prop.Name = 'DragHandle' then begin    _DragHandle := Pointer(Longint(Value));    TProtectedTDragObject(Owner).DragHandle := _DragHandle^;  end else if Prop.Name = 'DragPos' then begin    _DragPos := Pointer(Longint(Value));    TProtectedTDragObject(Owner).DragPos := _DragPos^;  end else if Prop.Name = 'DragTargetPos' then begin    _DragTargetPos := Pointer(Longint(Value));    TProtectedTDragObject(Owner).DragTargetPos := _DragTargetPos^;  end else if Prop.Name = 'DragTarget' then begin    TProtectedTDragObject(Owner).DragTarget := Pointer(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TDragObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Assign' then begin    TProtectedTDragObject(Owner).Assign(TDragObject(Longint(Method.Args[0].Value)));  end else if Method.Name = 'GetName' then begin    TProtectedTDragObject(Owner).GetName();  end else if Method.Name = 'HideDragImage' then begin    TProtectedTDragObject(Owner).HideDragImage();  end else if Method.Name = 'Instance' then begin    _MethodRes_Instance := TProtectedTDragObject(Owner).Instance();    Method.Result := Longint(@_MethodRes_Instance);  end else if Method.Name = 'ShowDragImage' then begin    TProtectedTDragObject(Owner).ShowDragImage();  end else    inherited InvokeMethod(Method);end;procedure TDragObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBaseDragControlObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TBaseDragControlObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TBaseDragControlObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBaseDragControlObjectProperties);end;procedure TBaseDragControlObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBaseDragControlObjectMethods);end;procedure TBaseDragControlObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBaseDragControlObjectConstructors);end;procedure TBaseDragControlObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBaseDragControlObjectEvents);end;function TBaseDragControlObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Control' then begin    Result := Longint(TProtectedTBaseDragControlObject(Owner).Control);  end else    Result := inherited GetProperty(Prop);end;procedure TBaseDragControlObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Control' then begin    TProtectedTBaseDragControlObject(Owner).Control := TControl(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TBaseDragControlObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TBaseDragControlObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TDragControlObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDragControlObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDragControlObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDragControlObjectProperties);end;procedure TDragControlObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDragControlObjectMethods);end;procedure TDragControlObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDragControlObjectConstructors);end;procedure TDragControlObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDragControlObjectEvents);end;function TDragControlObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TDragControlObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TDragControlObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TDragControlObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TDragDockObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDragDockObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDragDockObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDragDockObjectProperties);end;procedure TDragDockObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDragDockObjectMethods);end;procedure TDragDockObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDragDockObjectConstructors);end;procedure TDragDockObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDragDockObjectEvents);end;function TDragDockObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Brush' then begin    Result := Longint(TProtectedTDragDockObject(Owner).Brush);  end else if Prop.Name = 'DockRect' then begin    _Prop_DockRect := TProtectedTDragDockObject(Owner).DockRect;    Result := Longint(@_Prop_DockRect);  end else if Prop.Name = 'DropAlign' then begin    Result := TProtectedTDragDockObject(Owner).DropAlign;  end else if Prop.Name = 'DropOnControl' then begin    Result := Longint(TProtectedTDragDockObject(Owner).DropOnControl);  end else if Prop.Name = 'Floating' then begin    Result := TProtectedTDragDockObject(Owner).Floating;  end else if Prop.Name = 'FrameWidth' then begin    Result := TProtectedTDragDockObject(Owner).FrameWidth;  end else    Result := inherited GetProperty(Prop);end;procedure TDragDockObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _DockRect: ^TRect;begin  if Prop.Name = 'Brush' then begin    TProtectedTDragDockObject(Owner).Brush := TBrush(Longint(Value));  end else if Prop.Name = 'DockRect' then begin    _DockRect := Pointer(Longint(Value));    TProtectedTDragDockObject(Owner).DockRect := _DockRect^;  end else if Prop.Name = 'Floating' then begin    TProtectedTDragDockObject(Owner).Floating := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TDragDockObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TDragDockObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TControlCanvasClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TControlCanvasClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TControlCanvasClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TControlCanvasProperties);end;procedure TControlCanvasClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TControlCanvasMethods);end;procedure TControlCanvasClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TControlCanvasConstructors);end;procedure TControlCanvasClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TControlCanvasEvents);end;function TControlCanvasClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Control' then begin    Result := Longint(TProtectedTControlCanvas(Owner).Control);  end else    Result := inherited GetProperty(Prop);end;procedure TControlCanvasClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Control' then begin    TProtectedTControlCanvas(Owner).Control := TControl(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TControlCanvasClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'FreeHandle' then begin    TProtectedTControlCanvas(Owner).FreeHandle();  end else if Method.Name = 'UpdateTextFlags' then begin    TProtectedTControlCanvas(Owner).UpdateTextFlags();  end else    inherited InvokeMethod(Method);end;procedure TControlCanvasClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TControlActionLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TControlActionLinkClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TControlActionLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TControlActionLinkProperties);end;procedure TControlActionLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TControlActionLinkMethods);end;procedure TControlActionLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TControlActionLinkConstructors);end;procedure TControlActionLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TControlActionLinkEvents);end;function TControlActionLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TControlActionLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TControlActionLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TControlActionLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TSizeConstraintsClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTSizeConstraints(Owner).OnChange;  TProtectedTSizeConstraints(Owner).OnChange := OnChange;end;procedure TSizeConstraintsClassInfo.UnConnectEventHandlers;begin  TProtectedTSizeConstraints(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TSizeConstraintsClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TSizeConstraintsClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TSizeConstraintsProperties);end;procedure TSizeConstraintsClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TSizeConstraintsMethods);end;procedure TSizeConstraintsClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TSizeConstraintsConstructors);end;procedure TSizeConstraintsClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TSizeConstraintsEvents);end;function TSizeConstraintsClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Control' then begin    Result := Longint(TProtectedTSizeConstraints(Owner).Control);  end else if Prop.Name = 'MaxHeight' then begin    Result := TProtectedTSizeConstraints(Owner).MaxHeight;  end else if Prop.Name = 'MaxWidth' then begin    Result := TProtectedTSizeConstraints(Owner).MaxWidth;  end else if Prop.Name = 'MinHeight' then begin    Result := TProtectedTSizeConstraints(Owner).MinHeight;  end else if Prop.Name = 'MinWidth' then begin    Result := TProtectedTSizeConstraints(Owner).MinWidth;  end else    Result := inherited GetProperty(Prop);end;procedure TSizeConstraintsClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'MaxHeight' then begin    TProtectedTSizeConstraints(Owner).MaxHeight := Value;  end else if Prop.Name = 'MaxWidth' then begin    TProtectedTSizeConstraints(Owner).MaxWidth := Value;  end else if Prop.Name = 'MinHeight' then begin    TProtectedTSizeConstraints(Owner).MinHeight := Value;  end else if Prop.Name = 'MinWidth' then begin    TProtectedTSizeConstraints(Owner).MinWidth := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TSizeConstraintsClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TSizeConstraintsClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TControlClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnCanResize := TProtectedTControl(Owner).OnCanResize;  TProtectedTControl(Owner).OnCanResize := OnCanResize;  _Event_OnClick := TProtectedTControl(Owner).OnClick;  TProtectedTControl(Owner).OnClick := OnClick;  _Event_OnConstrainedResize := TProtectedTControl(Owner).OnConstrainedResize;  TProtectedTControl(Owner).OnConstrainedResize := OnConstrainedResize;  _Event_OnContextPopup := TProtectedTControl(Owner).OnContextPopup;  TProtectedTControl(Owner).OnContextPopup := OnContextPopup;  _Event_OnDblClick := TProtectedTControl(Owner).OnDblClick;  TProtectedTControl(Owner).OnDblClick := OnDblClick;  _Event_OnDragDrop := TProtectedTControl(Owner).OnDragDrop;  TProtectedTControl(Owner).OnDragDrop := OnDragDrop;  _Event_OnDragOver := TProtectedTControl(Owner).OnDragOver;  TProtectedTControl(Owner).OnDragOver := OnDragOver;  _Event_OnEndDock := TProtectedTControl(Owner).OnEndDock;  TProtectedTControl(Owner).OnEndDock := OnEndDock;  _Event_OnEndDrag := TProtectedTControl(Owner).OnEndDrag;  TProtectedTControl(Owner).OnEndDrag := OnEndDrag;  _Event_OnMouseDown := TProtectedTControl(Owner).OnMouseDown;  TProtectedTControl(Owner).OnMouseDown := OnMouseDown;  _Event_OnMouseMove := TProtectedTControl(Owner).OnMouseMove;  TProtectedTControl(Owner).OnMouseMove := OnMouseMove;  _Event_OnMouseUp := TProtectedTControl(Owner).OnMouseUp;  TProtectedTControl(Owner).OnMouseUp := OnMouseUp;  _Event_OnResize := TProtectedTControl(Owner).OnResize;  TProtectedTControl(Owner).OnResize := OnResize;  _Event_OnStartDock := TProtectedTControl(Owner).OnStartDock;  TProtectedTControl(Owner).OnStartDock := OnStartDock;  _Event_OnStartDrag := TProtectedTControl(Owner).OnStartDrag;  TProtectedTControl(Owner).OnStartDrag := OnStartDrag;end;procedure TControlClassInfo.UnConnectEventHandlers;begin  TProtectedTControl(Owner).OnCanResize := _Event_OnCanResize;  TProtectedTControl(Owner).OnClick := _Event_OnClick;  TProtectedTControl(Owner).OnConstrainedResize := _Event_OnConstrainedResize;  TProtectedTControl(Owner).OnContextPopup := _Event_OnContextPopup;  TProtectedTControl(Owner).OnDblClick := _Event_OnDblClick;  TProtectedTControl(Owner).OnDragDrop := _Event_OnDragDrop;  TProtectedTControl(Owner).OnDragOver := _Event_OnDragOver;  TProtectedTControl(Owner).OnEndDock := _Event_OnEndDock;  TProtectedTControl(Owner).OnEndDrag := _Event_OnEndDrag;  TProtectedTControl(Owner).OnMouseDown := _Event_OnMouseDown;  TProtectedTControl(Owner).OnMouseMove := _Event_OnMouseMove;  TProtectedTControl(Owner).OnMouseUp := _Event_OnMouseUp;  TProtectedTControl(Owner).OnResize := _Event_OnResize;  TProtectedTControl(Owner).OnStartDock := _Event_OnStartDock;  TProtectedTControl(Owner).OnStartDrag := _Event_OnStartDrag;  inherited UnConnectEventHandlers;end;procedure TControlClassInfo.OnCanResize(Sender: TObject; var NewWidth: Integer; var NewHeight: Integer; var Resize: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnCanResize');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := NewWidth;  _E.Args[2].Value := NewHeight;  _E.Args[3].Value := Resize;  if Assigned(_Event_OnCanResize) then _Event_OnCanResize(Sender, NewWidth, NewHeight, Resize);  FireEvent(_E);  NewWidth := _E.Args[1].Value;  NewHeight := _E.Args[2].Value;  Resize := _E.Args[3].Value;end;procedure TControlClassInfo.OnClick(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnClick');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnClick) then _Event_OnClick(Sender);  FireEvent(_E);end;procedure TControlClassInfo.OnConstrainedResize(Sender: TObject; var MinWidth: Integer; var MinHeight: Integer; var MaxWidth: Integer; var MaxHeight: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnConstrainedResize');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := MinWidth;  _E.Args[2].Value := MinHeight;  _E.Args[3].Value := MaxWidth;  _E.Args[4].Value := MaxHeight;  if Assigned(_Event_OnConstrainedResize) then _Event_OnConstrainedResize(Sender, MinWidth, MinHeight, MaxWidth, MaxHeight);  FireEvent(_E);  MinWidth := _E.Args[1].Value;  MinHeight := _E.Args[2].Value;  MaxWidth := _E.Args[3].Value;  MaxHeight := _E.Args[4].Value;end;procedure TControlClassInfo.OnContextPopup(Sender: TObject; MousePos: TPoint; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnContextPopup');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(@MousePos);  _E.Args[2].Value := Handled;  if Assigned(_Event_OnContextPopup) then _Event_OnContextPopup(Sender, MousePos, Handled);  FireEvent(_E);  Handled := _E.Args[2].Value;end;procedure TControlClassInfo.OnDblClick(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnDblClick');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnDblClick) then _Event_OnDblClick(Sender);  FireEvent(_E);end;procedure TControlClassInfo.OnDragDrop(Sender: TObject; Source: TObject; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnDragDrop');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Source);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  if Assigned(_Event_OnDragDrop) then _Event_OnDragDrop(Sender, Source, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnDragOver(Sender: TObject; Source: TObject; X: Integer; Y: Integer; State: TDragState; var Accept: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnDragOver');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Source);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  _E.Args[4].Value := State;  _E.Args[5].Value := Accept;  if Assigned(_Event_OnDragOver) then _Event_OnDragOver(Sender, Source, X, Y, State, Accept);  FireEvent(_E);  Accept := _E.Args[5].Value;end;procedure TControlClassInfo.OnEndDock(Sender: TObject; Target: TObject; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnEndDock');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Target);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  if Assigned(_Event_OnEndDock) then _Event_OnEndDock(Sender, Target, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnEndDrag(Sender: TObject; Target: TObject; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnEndDrag');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Target);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  if Assigned(_Event_OnEndDrag) then _Event_OnEndDrag(Sender, Target, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseDown');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Button;  _E.Args[2].Value := Longint(@Shift);  _E.Args[3].Value := X;  _E.Args[4].Value := Y;  if Assigned(_Event_OnMouseDown) then _Event_OnMouseDown(Sender, Button, Shift, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnMouseMove(Sender: TObject; Shift: TShiftState; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseMove');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(@Shift);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  if Assigned(_Event_OnMouseMove) then _Event_OnMouseMove(Sender, Shift, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseUp');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Button;  _E.Args[2].Value := Longint(@Shift);  _E.Args[3].Value := X;  _E.Args[4].Value := Y;  if Assigned(_Event_OnMouseUp) then _Event_OnMouseUp(Sender, Button, Shift, X, Y);  FireEvent(_E);end;procedure TControlClassInfo.OnResize(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnResize');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnResize) then _Event_OnResize(Sender);  FireEvent(_E);end;procedure TControlClassInfo.OnStartDock(Sender: TObject; var DragObject: TDragDockObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnStartDock');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(DragObject);  if Assigned(_Event_OnStartDock) then _Event_OnStartDock(Sender, DragObject);  FireEvent(_E);  DragObject := TDragDockObject(Longint(_E.Args[1].Value));end;procedure TControlClassInfo.OnStartDrag(Sender: TObject; var DragObject: TDragObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnStartDrag');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(DragObject);  if Assigned(_Event_OnStartDrag) then _Event_OnStartDrag(Sender, DragObject);  FireEvent(_E);  DragObject := TDragObject(Longint(_E.Args[1].Value));end;procedure TControlClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TControlProperties);end;procedure TControlClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TControlMethods);end;procedure TControlClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TControlConstructors);end;procedure TControlClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TControlEvents);end;function TControlClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ActionLink' then begin    Result := Longint(TProtectedTControl(Owner).ActionLink);  end else if Prop.Name = 'AutoSize' then begin    Result := TProtectedTControl(Owner).AutoSize;  end else if Prop.Name = 'Caption' then begin    Result := TProtectedTControl(Owner).Caption;  end else if Prop.Name = 'Color' then begin    Result := TProtectedTControl(Owner).Color;  end else if Prop.Name = 'DesktopFont' then begin    Result := TProtectedTControl(Owner).DesktopFont;  end else if Prop.Name = 'DragKind' then begin    Result := TProtectedTControl(Owner).DragKind;  end else if Prop.Name = 'DragCursor' then begin    Result := TProtectedTControl(Owner).DragCursor;  end else if Prop.Name = 'DragMode' then begin    Result := TProtectedTControl(Owner).DragMode;  end else if Prop.Name = 'Font' then begin    Result := Longint(TProtectedTControl(Owner).Font);  end else if Prop.Name = 'IsControl' then begin    Result := TProtectedTControl(Owner).IsControl;  end else if Prop.Name = 'MouseCapture' then begin    Result := TProtectedTControl(Owner).MouseCapture;  end else if Prop.Name = 'ParentBiDiMode' then begin    Result := TProtectedTControl(Owner).ParentBiDiMode;  end else if Prop.Name = 'ParentColor' then begin    Result := TProtectedTControl(Owner).ParentColor;  end else if Prop.Name = 'ParentFont' then begin    Result := TProtectedTControl(Owner).ParentFont;  end else if Prop.Name = 'ParentShowHint' then begin    Result := TProtectedTControl(Owner).ParentShowHint;  end else if Prop.Name = 'PopupMenu' then begin    Result := Longint(TProtectedTControl(Owner).PopupMenu);  end else if Prop.Name = 'ScalingFlags' then begin    _Prop_ScalingFlags := TProtectedTControl(Owner).ScalingFlags;    Result := Longint(@_Prop_ScalingFlags);  end else if Prop.Name = 'Text' then begin    Result := TProtectedTControl(Owner).Text;  end else if Prop.Name = 'WindowText' then begin    Result := Longint(TProtectedTControl(Owner).WindowText);  end else if Prop.Name = 'Enabled' then begin    Result := TProtectedTControl(Owner).Enabled;  end else if Prop.Name = 'Action' then begin    Result := Longint(TProtectedTControl(Owner).Action);  end else if Prop.Name = 'Align' then begin    Result := TProtectedTControl(Owner).Align;  end else if Prop.Name = 'Anchors' then begin    _Prop_Anchors := TProtectedTControl(Owner).Anchors;    Result := Longint(@_Prop_Anchors);  end else if Prop.Name = 'BiDiMode' then begin    Result := TProtectedTControl(Owner).BiDiMode;  end else if Prop.Name = 'BoundsRect' then begin    _Prop_BoundsRect := TProtectedTControl(Owner).BoundsRect;    Result := Longint(@_Prop_BoundsRect);  end else if Prop.Name = 'ClientHeight' then begin    Result := TProtectedTControl(Owner).ClientHeight;  end else if Prop.Name = 'ClientOrigin' then begin    _Prop_ClientOrigin := TProtectedTControl(Owner).ClientOrigin;    Result := Longint(@_Prop_ClientOrigin);  end else if Prop.Name = 'ClientRect' then begin    _Prop_ClientRect := TProtectedTControl(Owner).ClientRect;    Result := Longint(@_Prop_ClientRect);  end else if Prop.Name = 'ClientWidth' then begin    Result := TProtectedTControl(Owner).ClientWidth;  end else if Prop.Name = 'Constraints' then begin    Result := Longint(TProtectedTControl(Owner).Constraints);  end else if Prop.Name = 'ControlState' then begin    _Prop_ControlState := TProtectedTControl(Owner).ControlState;    Result := Longint(@_Prop_ControlState);  end else if Prop.Name = 'ControlStyle' then begin    _Prop_ControlStyle := TProtectedTControl(Owner).ControlStyle;    Result := Longint(@_Prop_ControlStyle);  end else if Prop.Name = 'DockOrientation' then begin    Result := TProtectedTControl(Owner).DockOrientation;  end else if Prop.Name = 'Floating' then begin    Result := TProtectedTControl(Owner).Floating;  end else if Prop.Name = 'FloatingDockSiteClass' then begin    Result := Longint(TProtectedTControl(Owner).FloatingDockSiteClass);  end else if Prop.Name = 'HostDockSite' then begin    Result := Longint(TProtectedTControl(Owner).HostDockSite);  end else if Prop.Name = 'LRDockWidth' then begin    Result := TProtectedTControl(Owner).LRDockWidth;  end else if Prop.Name = 'Parent' then begin    Result := Longint(TProtectedTControl(Owner).Parent);  end else if Prop.Name = 'ShowHint' then begin    Result := TProtectedTControl(Owner).ShowHint;  end else if Prop.Name = 'TBDockHeight' then begin    Result := TProtectedTControl(Owner).TBDockHeight;  end else if Prop.Name = 'UndockHeight' then begin    Result := TProtectedTControl(Owner).UndockHeight;  end else if Prop.Name = 'UndockWidth' then begin    Result := TProtectedTControl(Owner).UndockWidth;  end else if Prop.Name = 'Visible' then begin    Result := TProtectedTControl(Owner).Visible;  end else if Prop.Name = 'WindowProc' then begin  end else if Prop.Name = 'Left' then begin    Result := TProtectedTControl(Owner).Left;  end else if Prop.Name = 'Top' then begin    Result := TProtectedTControl(Owner).Top;  end else if Prop.Name = 'Width' then begin    Result := TProtectedTControl(Owner).Width;  end else if Prop.Name = 'Height' then begin    Result := TProtectedTControl(Owner).Height;  end else if Prop.Name = 'Cursor' then begin    Result := TProtectedTControl(Owner).Cursor;  end else if Prop.Name = 'Hint' then begin    Result := TProtectedTControl(Owner).Hint;  end else    Result := inherited GetProperty(Prop);end;procedure TControlClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _ScalingFlags: ^TScalingFlags;  _Anchors: ^TAnchors;  _BoundsRect: ^TRect;  _ControlState: ^TControlState;  _ControlStyle: ^TControlStyle;begin  if Prop.Name = 'ActionLink' then begin    TProtectedTControl(Owner).ActionLink := TControlActionLink(Longint(Value));  end else if Prop.Name = 'AutoSize' then begin    TProtectedTControl(Owner).AutoSize := Value;  end else if Prop.Name = 'Caption' then begin    TProtectedTControl(Owner).Caption := Value;  end else if Prop.Name = 'Color' then begin    TProtectedTControl(Owner).Color := Value;  end else if Prop.Name = 'DesktopFont' then begin    TProtectedTControl(Owner).DesktopFont := Value;  end else if Prop.Name = 'DragKind' then begin    TProtectedTControl(Owner).DragKind := Value;  end else if Prop.Name = 'DragCursor' then begin    TProtectedTControl(Owner).DragCursor := Value;  end else if Prop.Name = 'DragMode' then begin    TProtectedTControl(Owner).DragMode := Value;  end else if Prop.Name = 'Font' then begin    TProtectedTControl(Owner).Font := TFont(Longint(Value));  end else if Prop.Name = 'IsControl' then begin    TProtectedTControl(Owner).IsControl := Value;  end else if Prop.Name = 'MouseCapture' then begin    TProtectedTControl(Owner).MouseCapture := Value;  end else if Prop.Name = 'ParentBiDiMode' then begin    TProtectedTControl(Owner).ParentBiDiMode := Value;  end else if Prop.Name = 'ParentColor' then begin    TProtectedTControl(Owner).ParentColor := Value;  end else if Prop.Name = 'ParentFont' then begin    TProtectedTControl(Owner).ParentFont := Value;  end else if Prop.Name = 'ParentShowHint' then begin    TProtectedTControl(Owner).ParentShowHint := Value;  end else if Prop.Name = 'PopupMenu' then begin    TProtectedTControl(Owner).PopupMenu := TPopupMenu(Longint(Value));  end else if Prop.Name = 'ScalingFlags' then begin    _ScalingFlags := Pointer(Longint(Value));    TProtectedTControl(Owner).ScalingFlags := _ScalingFlags^;  end else if Prop.Name = 'Text' then begin    TProtectedTControl(Owner).Text := Value;  end else if Prop.Name = 'WindowText' then begin    TProtectedTControl(Owner).WindowText := PChar(Longint(Value));  end else if Prop.Name = 'Enabled' then begin    TProtectedTControl(Owner).Enabled := Value;  end else if Prop.Name = 'Action' then begin    TProtectedTControl(Owner).Action := TBasicAction(Longint(Value));  end else if Prop.Name = 'Align' then begin    TProtectedTControl(Owner).Align := Value;  end else if Prop.Name = 'Anchors' then begin    _Anchors := Pointer(Longint(Value));    TProtectedTControl(Owner).Anchors := _Anchors^;  end else if Prop.Name = 'BiDiMode' then begin    TProtectedTControl(Owner).BiDiMode := Value;  end else if Prop.Name = 'BoundsRect' then begin    _BoundsRect := Pointer(Longint(Value));    TProtectedTControl(Owner).BoundsRect := _BoundsRect^;  end else if Prop.Name = 'ClientHeight' then begin    TProtectedTControl(Owner).ClientHeight := Value;  end else if Prop.Name = 'ClientWidth' then begin    TProtectedTControl(Owner).ClientWidth := Value;  end else if Prop.Name = 'Constraints' then begin    TProtectedTControl(Owner).Constraints := TSizeConstraints(Longint(Value));  end else if Prop.Name = 'ControlState' then begin    _ControlState := Pointer(Longint(Value));    TProtectedTControl(Owner).ControlState := _ControlState^;  end else if Prop.Name = 'ControlStyle' then begin    _ControlStyle := Pointer(Longint(Value));    TProtectedTControl(Owner).ControlStyle := _ControlStyle^;  end else if Prop.Name = 'DockOrientation' then begin    TProtectedTControl(Owner).DockOrientation := Value;  end else if Prop.Name = 'FloatingDockSiteClass' then begin    TProtectedTControl(Owner).FloatingDockSiteClass := TWinControlClass(Longint(Value));  end else if Prop.Name = 'HostDockSite' then begin    TProtectedTControl(Owner).HostDockSite := TWinControl(Longint(Value));  end else if Prop.Name = 'LRDockWidth' then begin    TProtectedTControl(Owner).LRDockWidth := Value;  end else if Prop.Name = 'Parent' then begin    TProtectedTControl(Owner).Parent := TWinControl(Longint(Value));  end else if Prop.Name = 'ShowHint' then begin    TProtectedTControl(Owner).ShowHint := Value;  end else if Prop.Name = 'TBDockHeight' then begin    TProtectedTControl(Owner).TBDockHeight := Value;  end else if Prop.Name = 'UndockHeight' then begin    TProtectedTControl(Owner).UndockHeight := Value;  end else if Prop.Name = 'UndockWidth' then begin    TProtectedTControl(Owner).UndockWidth := Value;  end else if Prop.Name = 'Visible' then begin    TProtectedTControl(Owner).Visible := Value;  end else if Prop.Name = 'WindowProc' then begin  end else if Prop.Name = 'Left' then begin    TProtectedTControl(Owner).Left := Value;  end else if Prop.Name = 'Top' then begin    TProtectedTControl(Owner).Top := Value;  end else if Prop.Name = 'Width' then begin    TProtectedTControl(Owner).Width := Value;  end else if Prop.Name = 'Height' then begin    TProtectedTControl(Owner).Height := Value;  end else if Prop.Name = 'Cursor' then begin    TProtectedTControl(Owner).Cursor := Value;  end else if Prop.Name = 'Hint' then begin    TProtectedTControl(Owner).Hint := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TControlClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_ClientToScreen_Point: ^TPoint;  _Param_Dock_ARect: ^TRect;  _Param_ManualFloat_ScreenPos: ^TRect;  _Param_Perform_Msg: ^Cardinal;  _Param_ScreenToClient_Point: ^TPoint;begin  if Method.Name = 'BeginDrag' then begin    TProtectedTControl(Owner).BeginDrag(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'BringToFront' then begin    TProtectedTControl(Owner).BringToFront();  end else if Method.Name = 'ClientToScreen' then begin    _Param_ClientToScreen_Point := Pointer(Longint(Method.Args[0].Value));    _MethodRes_ClientToScreen := TProtectedTControl(Owner).ClientToScreen(_Param_ClientToScreen_Point^);    Method.Result := Longint(@_MethodRes_ClientToScreen);  end else if Method.Name = 'Dock' then begin    _Param_Dock_ARect := Pointer(Longint(Method.Args[1].Value));    TProtectedTControl(Owner).Dock(TWinControl(Longint(Method.Args[0].Value)), _Param_Dock_ARect^);  end else if Method.Name = 'Dragging' then begin    TProtectedTControl(Owner).Dragging();  end else if Method.Name = 'DragDrop' then begin    TProtectedTControl(Owner).DragDrop(TObject(Longint(Method.Args[0].Value)), Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'DrawTextBiDiModeFlags' then begin    TProtectedTControl(Owner).DrawTextBiDiModeFlags(Method.Args[0].Value);  end else if Method.Name = 'DrawTextBiDiModeFlagsReadingOnly' then begin    TProtectedTControl(Owner).DrawTextBiDiModeFlagsReadingOnly();  end else if Method.Name = 'EndDrag' then begin    TProtectedTControl(Owner).EndDrag(Method.Args[0].Value);  end else if Method.Name = 'GetControlsAlignment' then begin    TProtectedTControl(Owner).GetControlsAlignment();  end else if Method.Name = 'GetTextBuf' then begin    TProtectedTControl(Owner).GetTextBuf(PChar(Longint(Method.Args[0].Value)), Method.Args[1].Value);  end else if Method.Name = 'GetTextLen' then begin    TProtectedTControl(Owner).GetTextLen();  end else if Method.Name = 'Hide' then begin    TProtectedTControl(Owner).Hide();  end else if Method.Name = 'InitiateAction' then begin    TProtectedTControl(Owner).InitiateAction();  end else if Method.Name = 'Invalidate' then begin    TProtectedTControl(Owner).Invalidate();  end else if Method.Name = 'IsRightToLeft' then begin    TProtectedTControl(Owner).IsRightToLeft();  end else if Method.Name = 'ManualDock' then begin    TProtectedTControl(Owner).ManualDock(TWinControl(Longint(Method.Args[0].Value)), TControl(Longint(Method.Args[1].Value)), Method.Args[2].Value);  end else if Method.Name = 'ManualFloat' then begin    _Param_ManualFloat_ScreenPos := Pointer(Longint(Method.Args[0].Value));    TProtectedTControl(Owner).ManualFloat(_Param_ManualFloat_ScreenPos^);  end else if Method.Name = 'Perform' then begin    _Param_Perform_Msg := Pointer(Longint(Method.Args[0].Value));    TProtectedTControl(Owner).Perform(_Param_Perform_Msg^, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'Refresh' then begin    TProtectedTControl(Owner).Refresh();  end else if Method.Name = 'Repaint' then begin    TProtectedTControl(Owner).Repaint();  end else if Method.Name = 'ReplaceDockedControl' then begin    TProtectedTControl(Owner).ReplaceDockedControl(TControl(Longint(Method.Args[0].Value)), TWinControl(Longint(Method.Args[1].Value)), TControl(Longint(Method.Args[2].Value)), Method.Args[3].Value);  end else if Method.Name = 'ScreenToClient' then begin    _Param_ScreenToClient_Point := Pointer(Longint(Method.Args[0].Value));    _MethodRes_ScreenToClient := TProtectedTControl(Owner).ScreenToClient(_Param_ScreenToClient_Point^);    Method.Result := Longint(@_MethodRes_ScreenToClient);  end else if Method.Name = 'SendToBack' then begin    TProtectedTControl(Owner).SendToBack();  end else if Method.Name = 'SetBounds' then begin    TProtectedTControl(Owner).SetBounds(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value);  end else if Method.Name = 'SetTextBuf' then begin    TProtectedTControl(Owner).SetTextBuf(PChar(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Show' then begin    TProtectedTControl(Owner).Show();  end else if Method.Name = 'Update' then begin    TProtectedTControl(Owner).Update();  end else if Method.Name = 'UseRightToLeftAlignment' then begin    TProtectedTControl(Owner).UseRightToLeftAlignment();  end else if Method.Name = 'UseRightToLeftReading' then begin    TProtectedTControl(Owner).UseRightToLeftReading();  end else if Method.Name = 'UseRightToLeftScrollBar' then begin    TProtectedTControl(Owner).UseRightToLeftScrollBar();  end else    inherited InvokeMethod(Method);end;procedure TControlClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TWinControlActionLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TWinControlActionLinkClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TWinControlActionLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TWinControlActionLinkProperties);end;procedure TWinControlActionLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TWinControlActionLinkMethods);end;procedure TWinControlActionLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TWinControlActionLinkConstructors);end;procedure TWinControlActionLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TWinControlActionLinkEvents);end;function TWinControlActionLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TWinControlActionLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TWinControlActionLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TWinControlActionLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TWinControlClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnDockDrop := TProtectedTWinControl(Owner).OnDockDrop;  TProtectedTWinControl(Owner).OnDockDrop := OnDockDrop;  _Event_OnDockOver := TProtectedTWinControl(Owner).OnDockOver;  TProtectedTWinControl(Owner).OnDockOver := OnDockOver;  _Event_OnEnter := TProtectedTWinControl(Owner).OnEnter;  TProtectedTWinControl(Owner).OnEnter := OnEnter;  _Event_OnExit := TProtectedTWinControl(Owner).OnExit;  TProtectedTWinControl(Owner).OnExit := OnExit;  _Event_OnGetSiteInfo := TProtectedTWinControl(Owner).OnGetSiteInfo;  TProtectedTWinControl(Owner).OnGetSiteInfo := OnGetSiteInfo;  _Event_OnKeyDown := TProtectedTWinControl(Owner).OnKeyDown;  TProtectedTWinControl(Owner).OnKeyDown := OnKeyDown;  _Event_OnKeyPress := TProtectedTWinControl(Owner).OnKeyPress;  TProtectedTWinControl(Owner).OnKeyPress := OnKeyPress;  _Event_OnKeyUp := TProtectedTWinControl(Owner).OnKeyUp;  TProtectedTWinControl(Owner).OnKeyUp := OnKeyUp;  _Event_OnMouseWheel := TProtectedTWinControl(Owner).OnMouseWheel;  TProtectedTWinControl(Owner).OnMouseWheel := OnMouseWheel;  _Event_OnMouseWheelDown := TProtectedTWinControl(Owner).OnMouseWheelDown;  TProtectedTWinControl(Owner).OnMouseWheelDown := OnMouseWheelDown;  _Event_OnMouseWheelUp := TProtectedTWinControl(Owner).OnMouseWheelUp;  TProtectedTWinControl(Owner).OnMouseWheelUp := OnMouseWheelUp;  _Event_OnUnDock := TProtectedTWinControl(Owner).OnUnDock;  TProtectedTWinControl(Owner).OnUnDock := OnUnDock;end;procedure TWinControlClassInfo.UnConnectEventHandlers;begin  TProtectedTWinControl(Owner).OnDockDrop := _Event_OnDockDrop;  TProtectedTWinControl(Owner).OnDockOver := _Event_OnDockOver;  TProtectedTWinControl(Owner).OnEnter := _Event_OnEnter;  TProtectedTWinControl(Owner).OnExit := _Event_OnExit;  TProtectedTWinControl(Owner).OnGetSiteInfo := _Event_OnGetSiteInfo;  TProtectedTWinControl(Owner).OnKeyDown := _Event_OnKeyDown;  TProtectedTWinControl(Owner).OnKeyPress := _Event_OnKeyPress;  TProtectedTWinControl(Owner).OnKeyUp := _Event_OnKeyUp;  TProtectedTWinControl(Owner).OnMouseWheel := _Event_OnMouseWheel;  TProtectedTWinControl(Owner).OnMouseWheelDown := _Event_OnMouseWheelDown;  TProtectedTWinControl(Owner).OnMouseWheelUp := _Event_OnMouseWheelUp;  TProtectedTWinControl(Owner).OnUnDock := _Event_OnUnDock;  inherited UnConnectEventHandlers;end;procedure TWinControlClassInfo.OnDockDrop(Sender: TObject; Source: TDragDockObject; X: Integer; Y: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnDockDrop');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Source);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  if Assigned(_Event_OnDockDrop) then _Event_OnDockDrop(Sender, Source, X, Y);  FireEvent(_E);end;procedure TWinControlClassInfo.OnDockOver(Sender: TObject; Source: TDragDockObject; X: Integer; Y: Integer; State: TDragState; var Accept: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnDockOver');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Source);  _E.Args[2].Value := X;  _E.Args[3].Value := Y;  _E.Args[4].Value := State;  _E.Args[5].Value := Accept;  if Assigned(_Event_OnDockOver) then _Event_OnDockOver(Sender, Source, X, Y, State, Accept);  FireEvent(_E);  Accept := _E.Args[5].Value;end;procedure TWinControlClassInfo.OnEnter(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnEnter');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnEnter) then _Event_OnEnter(Sender);  FireEvent(_E);end;procedure TWinControlClassInfo.OnExit(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnExit');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnExit) then _Event_OnExit(Sender);  FireEvent(_E);end;procedure TWinControlClassInfo.OnGetSiteInfo(Sender: TObject; DockClient: TControl; var InfluenceRect: TRect; MousePos: TPoint; var CanDock: Boolean);var  _E: TradEventInfo;  _VarParam_InfluenceRect: ^TRect;begin  _E := FindEvent('OnGetSiteInfo');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(DockClient);  _E.Args[2].Value := Longint(@InfluenceRect);  _E.Args[3].Value := Longint(@MousePos);  _E.Args[4].Value := CanDock;  if Assigned(_Event_OnGetSiteInfo) then _Event_OnGetSiteInfo(Sender, DockClient, InfluenceRect, MousePos, CanDock);  FireEvent(_E);  _VarParam_InfluenceRect := Pointer(Longint(_E.Args[2].Value));  InfluenceRect := _VarParam_InfluenceRect^;  CanDock := _E.Args[4].Value;end;procedure TWinControlClassInfo.OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);var  _E: TradEventInfo;begin  _E := FindEvent('OnKeyDown');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Key;  _E.Args[2].Value := Longint(@Shift);  if Assigned(_Event_OnKeyDown) then _Event_OnKeyDown(Sender, Key, Shift);  FireEvent(_E);  Key := _E.Args[1].Value;end;procedure TWinControlClassInfo.OnKeyPress(Sender: TObject; var Key: Char);var  _E: TradEventInfo;begin  _E := FindEvent('OnKeyPress');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := '' + Key;  if Assigned(_Event_OnKeyPress) then _Event_OnKeyPress(Sender, Key);  FireEvent(_E);  Key := String(_E.Args[1].Value)[1];end;procedure TWinControlClassInfo.OnKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);var  _E: TradEventInfo;begin  _E := FindEvent('OnKeyUp');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Key;  _E.Args[2].Value := Longint(@Shift);  if Assigned(_Event_OnKeyUp) then _Event_OnKeyUp(Sender, Key, Shift);  FireEvent(_E);  Key := _E.Args[1].Value;end;procedure TWinControlClassInfo.OnMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseWheel');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(@Shift);  _E.Args[2].Value := WheelDelta;  _E.Args[3].Value := Longint(@MousePos);  _E.Args[4].Value := Handled;  if Assigned(_Event_OnMouseWheel) then _Event_OnMouseWheel(Sender, Shift, WheelDelta, MousePos, Handled);  FireEvent(_E);  Handled := _E.Args[4].Value;end;procedure TWinControlClassInfo.OnMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseWheelDown');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(@Shift);  _E.Args[2].Value := Longint(@MousePos);  _E.Args[3].Value := Handled;  if Assigned(_Event_OnMouseWheelDown) then _Event_OnMouseWheelDown(Sender, Shift, MousePos, Handled);  FireEvent(_E);  Handled := _E.Args[3].Value;end;procedure TWinControlClassInfo.OnMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnMouseWheelUp');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(@Shift);  _E.Args[2].Value := Longint(@MousePos);  _E.Args[3].Value := Handled;  if Assigned(_Event_OnMouseWheelUp) then _Event_OnMouseWheelUp(Sender, Shift, MousePos, Handled);  FireEvent(_E);  Handled := _E.Args[3].Value;end;procedure TWinControlClassInfo.OnUnDock(Sender: TObject; Client: TControl; NewTarget: TWinControl; var Allow: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnUnDock');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Longint(Client);  _E.Args[2].Value := Longint(NewTarget);  _E.Args[3].Value := Allow;  if Assigned(_Event_OnUnDock) then _Event_OnUnDock(Sender, Client, NewTarget, Allow);  FireEvent(_E);  Allow := _E.Args[3].Value;end;procedure TWinControlClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TWinControlProperties);end;procedure TWinControlClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TWinControlMethods);end;procedure TWinControlClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TWinControlConstructors);end;procedure TWinControlClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TWinControlEvents);end;function TWinControlClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'BevelEdges' then begin    _Prop_BevelEdges := TProtectedTWinControl(Owner).BevelEdges;    Result := Longint(@_Prop_BevelEdges);  end else if Prop.Name = 'BevelInner' then begin    Result := TProtectedTWinControl(Owner).BevelInner;  end else if Prop.Name = 'BevelOuter' then begin    Result := TProtectedTWinControl(Owner).BevelOuter;  end else if Prop.Name = 'BevelKind' then begin    Result := TProtectedTWinControl(Owner).BevelKind;  end else if Prop.Name = 'BevelWidth' then begin    Result := TProtectedTWinControl(Owner).BevelWidth;  end else if Prop.Name = 'BorderWidth' then begin    Result := TProtectedTWinControl(Owner).BorderWidth;  end else if Prop.Name = 'Ctl3D' then begin    Result := TProtectedTWinControl(Owner).Ctl3D;  end else if Prop.Name = 'DefWndProc' then begin    Result := Longint(TProtectedTWinControl(Owner).DefWndProc);  end else if Prop.Name = 'DockSite' then begin    Result := TProtectedTWinControl(Owner).DockSite;  end else if Prop.Name = 'DockManager' then begin    Result := Longint(TProtectedTWinControl(Owner).DockManager);  end else if Prop.Name = 'ImeMode' then begin    Result := TProtectedTWinControl(Owner).ImeMode;  end else if Prop.Name = 'ImeName' then begin    Result := TProtectedTWinControl(Owner).ImeName;  end else if Prop.Name = 'ParentCtl3D' then begin    Result := TProtectedTWinControl(Owner).ParentCtl3D;  end else if Prop.Name = 'UseDockManager' then begin    Result := TProtectedTWinControl(Owner).UseDockManager;  end else if Prop.Name = 'WheelAccumulator' then begin    Result := TProtectedTWinControl(Owner).WheelAccumulator;  end else if Prop.Name = 'WindowHandle' then begin    _Prop_WindowHandle := TProtectedTWinControl(Owner).WindowHandle;    Result := Longint(@_Prop_WindowHandle);  end else if Prop.Name = 'DockClientCount' then begin    Result := TProtectedTWinControl(Owner).DockClientCount;  end else if Prop.Name = 'DockClients' then begin    Result := Longint(TProtectedTWinControl(Owner).DockClients[Prop.Indexes[0].Value]);  end else if Prop.Name = 'DoubleBuffered' then begin    Result := TProtectedTWinControl(Owner).DoubleBuffered;  end else if Prop.Name = 'VisibleDockClientCount' then begin    Result := TProtectedTWinControl(Owner).VisibleDockClientCount;  end else if Prop.Name = 'Brush' then begin    Result := Longint(TProtectedTWinControl(Owner).Brush);  end else if Prop.Name = 'Controls' then begin    Result := Longint(TProtectedTWinControl(Owner).Controls[Prop.Indexes[0].Value]);  end else if Prop.Name = 'ControlCount' then begin    Result := TProtectedTWinControl(Owner).ControlCount;  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTWinControl(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'ParentWindow' then begin    _Prop_ParentWindow := TProtectedTWinControl(Owner).ParentWindow;    Result := Longint(@_Prop_ParentWindow);  end else if Prop.Name = 'Showing' then begin    Result := TProtectedTWinControl(Owner).Showing;  end else if Prop.Name = 'TabOrder' then begin    Result := TProtectedTWinControl(Owner).TabOrder;  end else if Prop.Name = 'TabStop' then begin    Result := TProtectedTWinControl(Owner).TabStop;  end else if Prop.Name = 'HelpContext' then begin    Result := TProtectedTWinControl(Owner).HelpContext;  end else    Result := inherited GetProperty(Prop);end;procedure TWinControlClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _BevelEdges: ^TBevelEdges;  _WindowHandle: ^Longword;  _ParentWindow: ^Longword;begin  if Prop.Name = 'BevelEdges' then begin    _BevelEdges := Pointer(Longint(Value));    TProtectedTWinControl(Owner).BevelEdges := _BevelEdges^;  end else if Prop.Name = 'BevelInner' then begin    TProtectedTWinControl(Owner).BevelInner := Value;  end else if Prop.Name = 'BevelOuter' then begin    TProtectedTWinControl(Owner).BevelOuter := Value;  end else if Prop.Name = 'BevelKind' then begin    TProtectedTWinControl(Owner).BevelKind := Value;  end else if Prop.Name = 'BevelWidth' then begin    TProtectedTWinControl(Owner).BevelWidth := Value;  end else if Prop.Name = 'BorderWidth' then begin    TProtectedTWinControl(Owner).BorderWidth := Value;  end else if Prop.Name = 'Ctl3D' then begin    TProtectedTWinControl(Owner).Ctl3D := Value;  end else if Prop.Name = 'DefWndProc' then begin    TProtectedTWinControl(Owner).DefWndProc := Pointer(Longint(Value));  end else if Prop.Name = 'DockSite' then begin    TProtectedTWinControl(Owner).DockSite := Value;  end else if Prop.Name = 'DockManager' then begin    TProtectedTWinControl(Owner).DockManager := IDockManager(Longint(Value));  end else if Prop.Name = 'ImeMode' then begin    TProtectedTWinControl(Owner).ImeMode := Value;  end else if Prop.Name = 'ImeName' then begin    TProtectedTWinControl(Owner).ImeName := Value;  end else if Prop.Name = 'ParentCtl3D' then begin    TProtectedTWinControl(Owner).ParentCtl3D := Value;  end else if Prop.Name = 'UseDockManager' then begin    TProtectedTWinControl(Owner).UseDockManager := Value;  end else if Prop.Name = 'WheelAccumulator' then begin    TProtectedTWinControl(Owner).WheelAccumulator := Value;  end else if Prop.Name = 'WindowHandle' then begin    _WindowHandle := Pointer(Longint(Value));    TProtectedTWinControl(Owner).WindowHandle := _WindowHandle^;  end else if Prop.Name = 'DoubleBuffered' then begin    TProtectedTWinControl(Owner).DoubleBuffered := Value;  end else if Prop.Name = 'ParentWindow' then begin    _ParentWindow := Pointer(Longint(Value));    TProtectedTWinControl(Owner).ParentWindow := _ParentWindow^;  end else if Prop.Name = 'TabOrder' then begin    TProtectedTWinControl(Owner).TabOrder := Value;  end else if Prop.Name = 'TabStop' then begin    TProtectedTWinControl(Owner).TabStop := Value;  end else if Prop.Name = 'HelpContext' then begin    TProtectedTWinControl(Owner).HelpContext := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TWinControlClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_CreateParentedControl_ParentWindow: ^HWND;  _Param_ControlAtPos_Pos: ^TPoint;  _Param_PaintTo_DC: ^HDC;begin  if Method.Name = 'CreateParentedControl' then begin    _Param_CreateParentedControl_ParentWindow := Pointer(Longint(Method.Args[0].Value));    Method.Result := Longint(TProtectedTWinControl(Owner).CreateParentedControl(_Param_CreateParentedControl_ParentWindow^));  end else if Method.Name = 'Broadcast' then begin    _VarParam_Broadcast_Message := Method.Args[0].Value;    TProtectedTWinControl(Owner).Broadcast(_VarParam_Broadcast_Message);    Method.Args[0].Value := _VarParam_Broadcast_Message;  end else if Method.Name = 'CanFocus' then begin    TProtectedTWinControl(Owner).CanFocus();  end else if Method.Name = 'ContainsControl' then begin    TProtectedTWinControl(Owner).ContainsControl(TControl(Longint(Method.Args[0].Value)));  end else if Method.Name = 'ControlAtPos' then begin    _Param_ControlAtPos_Pos := Pointer(Longint(Method.Args[0].Value));    Method.Result := Longint(TProtectedTWinControl(Owner).ControlAtPos(_Param_ControlAtPos_Pos^, Method.Args[1].Value, Method.Args[2].Value));  end else if Method.Name = 'DisableAlign' then begin    TProtectedTWinControl(Owner).DisableAlign();  end else if Method.Name = 'DockDrop' then begin    TProtectedTWinControl(Owner).DockDrop(TDragDockObject(Longint(Method.Args[0].Value)), Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'EnableAlign' then begin    TProtectedTWinControl(Owner).EnableAlign();  end else if Method.Name = 'FindChildControl' then begin    Method.Result := Longint(TProtectedTWinControl(Owner).FindChildControl(Method.Args[0].Value));  end else if Method.Name = 'FlipChildren' then begin    TProtectedTWinControl(Owner).FlipChildren(Method.Args[0].Value);  end else if Method.Name = 'Focused' then begin    TProtectedTWinControl(Owner).Focused();  end else if Method.Name = 'GetTabOrderList' then begin    TProtectedTWinControl(Owner).GetTabOrderList(TList(Longint(Method.Args[0].Value)));  end else if Method.Name = 'HandleAllocated' then begin    TProtectedTWinControl(Owner).HandleAllocated();  end else if Method.Name = 'HandleNeeded' then begin    TProtectedTWinControl(Owner).HandleNeeded();  end else if Method.Name = 'InsertControl' then begin    TProtectedTWinControl(Owner).InsertControl(TControl(Longint(Method.Args[0].Value)));  end else if Method.Name = 'MouseWheelHandler' then begin    _VarParam_MouseWheelHandler_Message := Pointer(Longint(Method.Args[0].Value));    TProtectedTWinControl(Owner).MouseWheelHandler(_VarParam_MouseWheelHandler_Message^);    Method.Args[0].Value := Longint(_VarParam_MouseWheelHandler_Message);  end else if Method.Name = 'PaintTo' then begin    _Param_PaintTo_DC := Pointer(Longint(Method.Args[0].Value));    TProtectedTWinControl(Owner).PaintTo(_Param_PaintTo_DC^, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'RemoveControl' then begin    TProtectedTWinControl(Owner).RemoveControl(TControl(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Realign' then begin    TProtectedTWinControl(Owner).Realign();  end else if Method.Name = 'ScaleBy' then begin    TProtectedTWinControl(Owner).ScaleBy(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'ScrollBy' then begin    TProtectedTWinControl(Owner).ScrollBy(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'SetFocus' then begin    TProtectedTWinControl(Owner).SetFocus();  end else if Method.Name = 'UpdateControlState' then begin    TProtectedTWinControl(Owner).UpdateControlState();  end else    inherited InvokeMethod(Method);end;procedure TWinControlClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TGraphicControlClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TGraphicControlClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TGraphicControlClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TGraphicControlProperties);end;procedure TGraphicControlClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TGraphicControlMethods);end;procedure TGraphicControlClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TGraphicControlConstructors);end;procedure TGraphicControlClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TGraphicControlEvents);end;function TGraphicControlClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Canvas' then begin    Result := Longint(TProtectedTGraphicControl(Owner).Canvas);  end else    Result := inherited GetProperty(Prop);end;procedure TGraphicControlClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TGraphicControlClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TGraphicControlClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomControlClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomControlClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomControlClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomControlProperties);end;procedure TCustomControlClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomControlMethods);end;procedure TCustomControlClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomControlConstructors);end;procedure TCustomControlClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomControlEvents);end;function TCustomControlClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Canvas' then begin    Result := Longint(TProtectedTCustomControl(Owner).Canvas);  end else    Result := inherited GetProperty(Prop);end;procedure TCustomControlClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TCustomControlClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomControlClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure THintWindowClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure THintWindowClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure THintWindowClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(THintWindowProperties);end;procedure THintWindowClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(THintWindowMethods);end;procedure THintWindowClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(THintWindowConstructors);end;procedure THintWindowClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(THintWindowEvents);end;function THintWindowClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure THintWindowClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure THintWindowClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_ActivateHint_Rect: ^TRect;  _Param_ActivateHintData_Rect: ^TRect;begin  if Method.Name = 'ActivateHint' then begin    _Param_ActivateHint_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTHintWindow(Owner).ActivateHint(_Param_ActivateHint_Rect^, Method.Args[1].Value);  end else if Method.Name = 'ActivateHintData' then begin    _Param_ActivateHintData_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTHintWindow(Owner).ActivateHintData(_Param_ActivateHintData_Rect^, Method.Args[1].Value, Pointer(Longint(Method.Args[2].Value)));  end else if Method.Name = 'CalcHintRect' then begin    _MethodRes_CalcHintRect := TProtectedTHintWindow(Owner).CalcHintRect(Method.Args[0].Value, Method.Args[1].Value, Pointer(Longint(Method.Args[2].Value)));    Method.Result := Longint(@_MethodRes_CalcHintRect);  end else if Method.Name = 'IsHintMsg' then begin    _VarParam_IsHintMsg_Msg := Pointer(Longint(Method.Args[0].Value));    TProtectedTHintWindow(Owner).IsHintMsg(_VarParam_IsHintMsg_Msg^);    Method.Args[0].Value := Longint(_VarParam_IsHintMsg_Msg);  end else if Method.Name = 'ReleaseHandle' then begin    TProtectedTHintWindow(Owner).ReleaseHandle();  end else    inherited InvokeMethod(Method);end;procedure THintWindowClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TDragImageListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDragImageListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDragImageListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDragImageListProperties);end;procedure TDragImageListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDragImageListMethods);end;procedure TDragImageListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDragImageListConstructors);end;procedure TDragImageListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDragImageListEvents);end;function TDragImageListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'DragCursor' then begin    Result := TProtectedTDragImageList(Owner).DragCursor;  end else if Prop.Name = 'Dragging' then begin    Result := TProtectedTDragImageList(Owner).Dragging;  end else    Result := inherited GetProperty(Prop);end;procedure TDragImageListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'DragCursor' then begin    TProtectedTDragImageList(Owner).DragCursor := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TDragImageListClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_BeginDrag_Window: ^HWND;  _Param_DragLock_Window: ^HWND;begin  if Method.Name = 'BeginDrag' then begin    _Param_BeginDrag_Window := Pointer(Longint(Method.Args[0].Value));    TProtectedTDragImageList(Owner).BeginDrag(_Param_BeginDrag_Window^, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'DragLock' then begin    _Param_DragLock_Window := Pointer(Longint(Method.Args[0].Value));    TProtectedTDragImageList(Owner).DragLock(_Param_DragLock_Window^, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'DragMove' then begin    TProtectedTDragImageList(Owner).DragMove(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'DragUnlock' then begin    TProtectedTDragImageList(Owner).DragUnlock();  end else if Method.Name = 'EndDrag' then begin    TProtectedTDragImageList(Owner).EndDrag();  end else if Method.Name = 'HideDragImage' then begin    TProtectedTDragImageList(Owner).HideDragImage();  end else if Method.Name = 'SetDragImage' then begin    TProtectedTDragImageList(Owner).SetDragImage(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'ShowDragImage' then begin    TProtectedTDragImageList(Owner).ShowDragImage();  end else    inherited InvokeMethod(Method);end;procedure TDragImageListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TImageListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TImageListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TImageListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TImageListProperties);end;procedure TImageListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TImageListMethods);end;procedure TImageListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TImageListConstructors);end;procedure TImageListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TImageListEvents);end;function TImageListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TImageListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TImageListClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TImageListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TDockZoneClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDockZoneClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDockZoneClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDockZoneProperties);end;procedure TDockZoneClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDockZoneMethods);end;procedure TDockZoneClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDockZoneConstructors);end;procedure TDockZoneClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDockZoneEvents);end;function TDockZoneClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ChildCount' then begin    Result := TProtectedTDockZone(Owner).ChildCount;  end else if Prop.Name = 'Height' then begin    Result := TProtectedTDockZone(Owner).Height;  end else if Prop.Name = 'Left' then begin    Result := TProtectedTDockZone(Owner).Left;  end else if Prop.Name = 'LimitBegin' then begin    Result := TProtectedTDockZone(Owner).LimitBegin;  end else if Prop.Name = 'LimitSize' then begin    Result := TProtectedTDockZone(Owner).LimitSize;  end else if Prop.Name = 'Top' then begin    Result := TProtectedTDockZone(Owner).Top;  end else if Prop.Name = 'Width' then begin    Result := TProtectedTDockZone(Owner).Width;  end else    Result := inherited GetProperty(Prop);end;procedure TDockZoneClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TDockZoneClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'ResetChildren' then begin    TProtectedTDockZone(Owner).ResetChildren();  end else if Method.Name = 'Update' then begin    TProtectedTDockZone(Owner).Update();  end else    inherited InvokeMethod(Method);end;procedure TDockZoneClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TDockTreeClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TDockTreeClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TDockTreeClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TDockTreeProperties);end;procedure TDockTreeClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TDockTreeMethods);end;procedure TDockTreeClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TDockTreeConstructors);end;procedure TDockTreeClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TDockTreeEvents);end;function TDockTreeClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'DockSite' then begin    Result := Longint(TProtectedTDockTree(Owner).DockSite);  end else    Result := inherited GetProperty(Prop);end;procedure TDockTreeClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'DockSite' then begin    TProtectedTDockTree(Owner).DockSite := TWinControl(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TDockTreeClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_PaintSite_DC: ^HDC;begin  if Method.Name = 'PaintSite' then begin    _Param_PaintSite_DC := Pointer(Longint(Method.Args[0].Value));    TProtectedTDockTree(Owner).PaintSite(_Param_PaintSite_DC^);  end else    inherited InvokeMethod(Method);end;procedure TDockTreeClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMouseClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMouseClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMouseClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMouseProperties);end;procedure TMouseClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMouseMethods);end;procedure TMouseClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMouseConstructors);end;procedure TMouseClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMouseEvents);end;function TMouseClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Capture' then begin    _Prop_Capture := TProtectedTMouse(Owner).Capture;    Result := Longint(@_Prop_Capture);  end else if Prop.Name = 'CursorPos' then begin    _Prop_CursorPos := TProtectedTMouse(Owner).CursorPos;    Result := Longint(@_Prop_CursorPos);  end else if Prop.Name = 'DragImmediate' then begin    Result := TProtectedTMouse(Owner).DragImmediate;  end else if Prop.Name = 'DragThreshold' then begin    Result := TProtectedTMouse(Owner).DragThreshold;  end else if Prop.Name = 'MousePresent' then begin    Result := TProtectedTMouse(Owner).MousePresent;  end else if Prop.Name = 'RegWheelMessage' then begin    _Prop_RegWheelMessage := TProtectedTMouse(Owner).RegWheelMessage;    Result := Longint(@_Prop_RegWheelMessage);  end else if Prop.Name = 'WheelPresent' then begin    Result := TProtectedTMouse(Owner).WheelPresent;  end else if Prop.Name = 'WheelScrollLines' then begin    Result := TProtectedTMouse(Owner).WheelScrollLines;  end else    Result := inherited GetProperty(Prop);end;procedure TMouseClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Capture: ^Longword;  _CursorPos: ^TPoint;begin  if Prop.Name = 'Capture' then begin    _Capture := Pointer(Longint(Value));    TProtectedTMouse(Owner).Capture := _Capture^;  end else if Prop.Name = 'CursorPos' then begin    _CursorPos := Pointer(Longint(Value));    TProtectedTMouse(Owner).CursorPos := _CursorPos^;  end else if Prop.Name = 'DragImmediate' then begin    TProtectedTMouse(Owner).DragImmediate := Value;  end else if Prop.Name = 'DragThreshold' then begin    TProtectedTMouse(Owner).DragThreshold := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TMouseClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'SettingChanged' then begin    TProtectedTMouse(Owner).SettingChanged(Method.Args[0].Value);  end else    inherited InvokeMethod(Method);end;procedure TMouseClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TDragObject', TDragObjectClassInfo);  TradClassRegistry.RegisterClass('TBaseDragControlObject', TBaseDragControlObjectClassInfo);  TradClassRegistry.RegisterClass('TDragControlObject', TDragControlObjectClassInfo);  TradClassRegistry.RegisterClass('TDragDockObject', TDragDockObjectClassInfo);  TradClassRegistry.RegisterClass('TControlCanvas', TControlCanvasClassInfo);  TradClassRegistry.RegisterClass('TControlActionLink', TControlActionLinkClassInfo);  TradClassRegistry.RegisterClass('TSizeConstraints', TSizeConstraintsClassInfo);  TradClassRegistry.RegisterClass('TControl', TControlClassInfo);  TradClassRegistry.RegisterClass('TWinControlActionLink', TWinControlActionLinkClassInfo);  TradClassRegistry.RegisterClass('TWinControl', TWinControlClassInfo);  TradClassRegistry.RegisterClass('TGraphicControl', TGraphicControlClassInfo);  TradClassRegistry.RegisterClass('TCustomControl', TCustomControlClassInfo);  TradClassRegistry.RegisterClass('THintWindow', THintWindowClassInfo);  TradClassRegistry.RegisterClass('TDragImageList', TDragImageListClassInfo);  TradClassRegistry.RegisterClass('TImageList', TImageListClassInfo);  TradClassRegistry.RegisterClass('TDockZone', TDockZoneClassInfo);  TradClassRegistry.RegisterClass('TDockTree', TDockTreeClassInfo);  TradClassRegistry.RegisterClass('TMouse', TMouseClassInfo);end.