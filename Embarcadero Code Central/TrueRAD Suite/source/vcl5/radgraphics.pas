{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radgraphics;interfaceuses RadCommon, Windows, graphics, radClasses, Classes, radSystem;type  TGraphicsObjectClassInfo = class;  TFontClassInfo = class;  TPenClassInfo = class;  TBrushClassInfo = class;  TCanvasClassInfo = class;  TGraphicClassInfo = class;  TPictureClassInfo = class;  TMetafileCanvasClassInfo = class;  TSharedImageClassInfo = class;  TMetafileImageClassInfo = class;  TMetafileClassInfo = class;  TBitmapImageClassInfo = class;  TBitmapClassInfo = class;  TIconImageClassInfo = class;  TIconClassInfo = class;  TGraphicsObjectClassInfo = class(TPersistentClassInfo)  private    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TFontClassInfo = class(TGraphicsObjectClassInfo)  private    _Prop_Handle: HFONT;    _Prop_Style: TFontStyles;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TPenClassInfo = class(TGraphicsObjectClassInfo)  private    _Prop_Handle: HPEN;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBrushClassInfo = class(TGraphicsObjectClassInfo)  private    _Prop_Handle: HBRUSH;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCanvasClassInfo = class(TPersistentClassInfo)  private    _Prop_ClipRect: TRect;    _Prop_Handle: HDC;    _Prop_PenPos: TPoint;    _MethodRes_TextExtent: TSize;    _Event_OnChange: TNotifyEvent;    _Event_OnChanging: TNotifyEvent;    procedure OnChange(Sender: TObject);    procedure OnChanging(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TGraphicClassInfo = class(TPersistentClassInfo)  private    _Prop_Palette: HPALETTE;    _VarParam_SaveToClipboardFormat_AFormat: Word;    _VarParam_SaveToClipboardFormat_AData: ^THandle;    _VarParam_SaveToClipboardFormat_APalette: ^HPALETTE;    _Event_OnChange: TNotifyEvent;    _Event_OnProgress: TProgressEvent;    procedure OnChange(Sender: TObject);    procedure OnProgress(Sender: TObject; Stage: TProgressStage; PercentDone: Byte; RedrawNow: Boolean; const R: TRect; const Msg: string);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TPictureClassInfo = class(TPersistentClassInfo)  private    _VarParam_SaveToClipboardFormat_AFormat: Word;    _VarParam_SaveToClipboardFormat_AData: ^THandle;    _VarParam_SaveToClipboardFormat_APalette: ^HPALETTE;    _Event_OnChange: TNotifyEvent;    _Event_OnProgress: TProgressEvent;    procedure OnChange(Sender: TObject);    procedure OnProgress(Sender: TObject; Stage: TProgressStage; PercentDone: Byte; RedrawNow: Boolean; const R: TRect; const Msg: string);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMetafileCanvasClassInfo = class(TCanvasClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TSharedImageClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMetafileImageClassInfo = class(TSharedImageClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMetafileClassInfo = class(TGraphicClassInfo)  private    _Prop_Handle: HENHMETAFILE;    _MethodRes_ReleaseHandle: HENHMETAFILE;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBitmapImageClassInfo = class(TSharedImageClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBitmapClassInfo = class(TGraphicClassInfo)  private    _Prop_Handle: HBITMAP;    _Prop_MaskHandle: HBITMAP;    _MethodRes_ReleaseHandle: HBITMAP;    _MethodRes_ReleaseMaskHandle: HBITMAP;    _MethodRes_ReleasePalette: HPALETTE;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TIconImageClassInfo = class(TSharedImageClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TIconClassInfo = class(TGraphicClassInfo)  private    _Prop_Handle: HICON;    _MethodRes_ReleaseHandle: HICON;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTGraphicsObject = class(TGraphicsObject);  TProtectedTFont = class(TFont);  TProtectedTPen = class(TPen);  TProtectedTBrush = class(TBrush);  TProtectedTCanvas = class(TCanvas);  TProtectedTGraphic = class(TGraphic);  TProtectedTPicture = class(TPicture);  TProtectedTMetafileCanvas = class(TMetafileCanvas);  TProtectedTSharedImage = class(TSharedImage);  TProtectedTMetafileImage = class(TMetafileImage);  TProtectedTMetafile = class(TMetafile);  TProtectedTBitmapImage = class(TBitmapImage);  TProtectedTBitmap = class(TBitmap);  TProtectedTIconImage = class(TIconImage);  TProtectedTIcon = class(TIcon);const  TGraphicsObjectProperties: String =     'Define::OwnerCriticalSection::psReadable..psWritable::pvPublic::0';  TGraphicsObjectMethods: String =     '';  TGraphicsObjectConstructors: String =     '';  TGraphicsObjectEvents: String =     'Define::OnChange::pvPublic::1::Sender';  TFontProperties: String =     'Define::FontAdapter::psReadable..psWritable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::PixelsPerInch::psReadable..psWritable::pvPublic::0::' +    'Define::Charset::psReadable..psWritable::pvPublished::0::' +    'Define::Color::psReadable..psWritable::pvPublished::0::' +    'Define::Height::psReadable..psWritable::pvPublished::0::' +    'Define::Name::psReadable..psWritable::pvPublished::0::' +    'Define::Pitch::psReadable..psWritable::pvPublished::0::' +    'Define::Size::psReadable..psWritable::pvPublished::0::' +    'Define::Style::psReadable..psWritable::pvPublished::0';  TFontMethods: String =     '';  TFontConstructors: String =     'Create::0';  TFontEvents: String =     '';  TPenProperties: String =     'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::Color::psReadable..psWritable::pvPublished::0::' +    'Define::Mode::psReadable..psWritable::pvPublished::0::' +    'Define::Style::psReadable..psWritable::pvPublished::0::' +    'Define::Width::psReadable..psWritable::pvPublished::0';  TPenMethods: String =     '';  TPenConstructors: String =     'Create::0';  TPenEvents: String =     '';  TBrushProperties: String =     'Define::Bitmap::psReadable..psWritable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::Color::psReadable..psWritable::pvPublished::0::' +    'Define::Style::psReadable..psWritable::pvPublished::0';  TBrushMethods: String =     '';  TBrushConstructors: String =     'Create::0';  TBrushEvents: String =     '';  TCanvasProperties: String =     'Define::ClipRect::psReadable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::LockCount::psReadable::pvPublic::0::' +    'Define::CanvasOrientation::psReadable::pvPublic::0::' +    'Define::PenPos::psReadable..psWritable::pvPublic::0::' +    'Define::Pixels::psReadable..psWritable..psIndexed::pvPublic::2::X::Y::' +    'Define::TextFlags::psReadable..psWritable::pvPublic::0::' +    'Define::Brush::psReadable..psWritable::pvPublished::0::' +    'Define::CopyMode::psReadable..psWritable::pvPublished::0::' +    'Define::Font::psReadable..psWritable::pvPublished::0::' +    'Define::Pen::psReadable..psWritable::pvPublished::0';  TCanvasMethods: String =     'Arc::msProcedure::8::X1::Y1::X2::Y2::X3::Y3::X4::Y4::' +    'BrushCopy::msProcedure::4::Dest::Bitmap::Source::Color::' +    'Chord::msProcedure::8::X1::Y1::X2::Y2::X3::Y3::X4::Y4::' +    'CopyRect::msProcedure::3::Dest::Canvas::Source::' +    'Draw::msProcedure::3::X::Y::Graphic::' +    'DrawFocusRect::msProcedure::1::Rect::' +    'FillRect::msProcedure::1::Rect::' +    'FloodFill::msProcedure::4::X::Y::Color::FillStyle::' +    'FrameRect::msProcedure::1::Rect::' +    'LineTo::msProcedure::2::X::Y::' +    'Lock::msProcedure::0::' +    'MoveTo::msProcedure::2::X::Y::' +    'Pie::msProcedure::8::X1::Y1::X2::Y2::X3::Y3::X4::Y4::' +    'Refresh::msProcedure::0::' +    'RoundRect::msProcedure::6::X1::Y1::X2::Y2::X3::Y3::' +    'StretchDraw::msProcedure::2::Rect::Graphic::' +    'TextExtent::msFunction::1::Text::' +    'TextHeight::msFunction::1::Text::' +    'TextOut::msProcedure::3::X::Y::Text::' +    'TextRect::msProcedure::4::Rect::X::Y::Text::' +    'TextWidth::msFunction::1::Text::' +    'TryLock::msFunction::0::' +    'Unlock::msProcedure::0';  TCanvasConstructors: String =     'Create::0';  TCanvasEvents: String =     'Define::OnChange::pvPublic::1::Sender::' +    'Define::OnChanging::pvPublic::1::Sender';  TGraphicProperties: String =     'Define::Empty::psReadable::pvPublic::0::' +    'Define::Height::psReadable..psWritable::pvPublic::0::' +    'Define::Modified::psReadable..psWritable::pvPublic::0::' +    'Define::Palette::psReadable..psWritable::pvPublic::0::' +    'Define::PaletteModified::psReadable..psWritable::pvPublic::0::' +    'Define::Transparent::psReadable..psWritable::pvPublic::0::' +    'Define::Width::psReadable..psWritable::pvPublic::0';  TGraphicMethods: String =     'LoadFromFile::msProcedure::1::Filename::' +    'SaveToFile::msProcedure::1::Filename::' +    'LoadFromStream::msProcedure::1::Stream::' +    'SaveToStream::msProcedure::1::Stream::' +    'LoadFromClipboardFormat::msProcedure::3::AFormat::AData::APalette::' +    'SaveToClipboardFormat::msProcedure::3::AFormat::AData::APalette';  TGraphicConstructors: String =     '';  TGraphicEvents: String =     'Define::OnChange::pvPublic::1::Sender::' +    'Define::OnProgress::pvPublic::6::Sender::Stage::PercentDone::RedrawNow::R::Msg';  TPictureProperties: String =     'Define::Bitmap::psReadable..psWritable::pvPublic::0::' +    'Define::Graphic::psReadable..psWritable::pvPublic::0::' +    'Define::PictureAdapter::psReadable..psWritable::pvPublic::0::' +    'Define::Height::psReadable::pvPublic::0::' +    'Define::Icon::psReadable..psWritable::pvPublic::0::' +    'Define::Metafile::psReadable..psWritable::pvPublic::0::' +    'Define::Width::psReadable::pvPublic::0';  TPictureMethods: String =     'LoadFromFile::msProcedure::1::Filename::' +    'SaveToFile::msProcedure::1::Filename::' +    'LoadFromClipboardFormat::msProcedure::3::AFormat::AData::APalette::' +    'SaveToClipboardFormat::msProcedure::3::AFormat::AData::APalette::' +    'SupportsClipboardFormat::msFunction::1::AFormat::' +    'RegisterFileFormat::msProcedure::3::AExtension::ADescription::AGraphicClass::' +    'RegisterFileFormatRes::msProcedure::3::AExtension::ADescriptionResID::AGraphicClass::' +    'RegisterClipboardFormat::msProcedure::2::AFormat::AGraphicClass::' +    'UnregisterGraphicClass::msProcedure::1::AClass';  TPictureConstructors: String =     'Create::0';  TPictureEvents: String =     'Define::OnChange::pvPublic::1::Sender::' +    'Define::OnProgress::pvPublic::6::Sender::Stage::PercentDone::RedrawNow::R::Msg';  TMetafileCanvasProperties: String =     '';  TMetafileCanvasMethods: String =     '';  TMetafileCanvasConstructors: String =     'Create::2::AMetafile::ReferenceDevice::' +    'CreateWithComment::4::AMetafile::ReferenceDevice::CreatedBy::Description';  TMetafileCanvasEvents: String =     '';  TSharedImageProperties: String =     'Define::RefCount::psReadable::pvProtected::0';  TSharedImageMethods: String =     '';  TSharedImageConstructors: String =     '';  TSharedImageEvents: String =     '';  TMetafileImageProperties: String =     '';  TMetafileImageMethods: String =     '';  TMetafileImageConstructors: String =     '';  TMetafileImageEvents: String =     '';  TMetafileProperties: String =     'Define::CreatedBy::psReadable::pvPublic::0::' +    'Define::Description::psReadable::pvPublic::0::' +    'Define::Enhanced::psReadable..psWritable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::MMWidth::psReadable..psWritable::pvPublic::0::' +    'Define::MMHeight::psReadable..psWritable::pvPublic::0::' +    'Define::Inch::psReadable..psWritable::pvPublic::0';  TMetafileMethods: String =     'Clear::msProcedure::0::' +    'ReleaseHandle::msFunction::0';  TMetafileConstructors: String =     '';  TMetafileEvents: String =     '';  TBitmapImageProperties: String =     '';  TBitmapImageMethods: String =     '';  TBitmapImageConstructors: String =     '';  TBitmapImageEvents: String =     '';  TBitmapProperties: String =     'Define::Canvas::psReadable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::HandleType::psReadable..psWritable::pvPublic::0::' +    'Define::IgnorePalette::psReadable..psWritable::pvPublic::0::' +    'Define::MaskHandle::psReadable..psWritable::pvPublic::0::' +    'Define::Monochrome::psReadable..psWritable::pvPublic::0::' +    'Define::PixelFormat::psReadable..psWritable::pvPublic::0::' +    'Define::ScanLine::psReadable..psIndexed::pvPublic::1::Row::' +    'Define::TransparentColor::psReadable..psWritable::pvPublic::0::' +    'Define::TransparentMode::psReadable..psWritable::pvPublic::0';  TBitmapMethods: String =     'Dormant::msProcedure::0::' +    'FreeImage::msProcedure::0::' +    'LoadFromResourceName::msProcedure::2::Instance::ResName::' +    'LoadFromResourceID::msProcedure::2::Instance::ResID::' +    'Mask::msProcedure::1::TransparentColor::' +    'ReleaseHandle::msFunction::0::' +    'ReleaseMaskHandle::msFunction::0::' +    'ReleasePalette::msFunction::0';  TBitmapConstructors: String =     '';  TBitmapEvents: String =     '';  TIconImageProperties: String =     '';  TIconImageMethods: String =     '';  TIconImageConstructors: String =     '';  TIconImageEvents: String =     '';  TIconProperties: String =     'Define::Handle::psReadable..psWritable::pvPublic::0';  TIconMethods: String =     'ReleaseHandle::msFunction::0';  TIconConstructors: String =     '';  TIconEvents: String =     '';procedure TGraphicsObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTGraphicsObject(Owner).OnChange;  TProtectedTGraphicsObject(Owner).OnChange := OnChange;end;procedure TGraphicsObjectClassInfo.UnConnectEventHandlers;begin  TProtectedTGraphicsObject(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TGraphicsObjectClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TGraphicsObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TGraphicsObjectProperties);end;procedure TGraphicsObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TGraphicsObjectMethods);end;procedure TGraphicsObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TGraphicsObjectConstructors);end;procedure TGraphicsObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TGraphicsObjectEvents);end;function TGraphicsObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'OwnerCriticalSection' then begin    Result := Longint(TProtectedTGraphicsObject(Owner).OwnerCriticalSection);  end else    Result := inherited GetProperty(Prop);end;procedure TGraphicsObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'OwnerCriticalSection' then begin    TProtectedTGraphicsObject(Owner).OwnerCriticalSection := PRTLCriticalSection(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TGraphicsObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TGraphicsObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TFontClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TFontClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TFontClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TFontProperties);end;procedure TFontClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TFontMethods);end;procedure TFontClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TFontConstructors);end;procedure TFontClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TFontEvents);end;function TFontClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'FontAdapter' then begin    Result := Longint(TProtectedTFont(Owner).FontAdapter);  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTFont(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'PixelsPerInch' then begin    Result := TProtectedTFont(Owner).PixelsPerInch;  end else if Prop.Name = 'Charset' then begin    Result := TProtectedTFont(Owner).Charset;  end else if Prop.Name = 'Color' then begin    Result := TProtectedTFont(Owner).Color;  end else if Prop.Name = 'Height' then begin    Result := TProtectedTFont(Owner).Height;  end else if Prop.Name = 'Name' then begin    Result := TProtectedTFont(Owner).Name;  end else if Prop.Name = 'Pitch' then begin    Result := TProtectedTFont(Owner).Pitch;  end else if Prop.Name = 'Size' then begin    Result := TProtectedTFont(Owner).Size;  end else if Prop.Name = 'Style' then begin    _Prop_Style := TProtectedTFont(Owner).Style;    Result := Longint(@_Prop_Style);  end else    Result := inherited GetProperty(Prop);end;procedure TFontClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;  _Style: ^TFontStyles;begin  if Prop.Name = 'FontAdapter' then begin    TProtectedTFont(Owner).FontAdapter := IChangeNotifier(Longint(Value));  end else if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTFont(Owner).Handle := _Handle^;  end else if Prop.Name = 'PixelsPerInch' then begin    TProtectedTFont(Owner).PixelsPerInch := Value;  end else if Prop.Name = 'Charset' then begin    TProtectedTFont(Owner).Charset := Value;  end else if Prop.Name = 'Color' then begin    TProtectedTFont(Owner).Color := Value;  end else if Prop.Name = 'Height' then begin    TProtectedTFont(Owner).Height := Value;  end else if Prop.Name = 'Name' then begin    TProtectedTFont(Owner).Name := Value;  end else if Prop.Name = 'Pitch' then begin    TProtectedTFont(Owner).Pitch := Value;  end else if Prop.Name = 'Size' then begin    TProtectedTFont(Owner).Size := Value;  end else if Prop.Name = 'Style' then begin    _Style := Pointer(Longint(Value));    TProtectedTFont(Owner).Style := _Style^;  end else    inherited SetProperty(Prop, Value);end;procedure TFontClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TFontClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TPenClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TPenClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TPenClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TPenProperties);end;procedure TPenClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TPenMethods);end;procedure TPenClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TPenConstructors);end;procedure TPenClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TPenEvents);end;function TPenClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTPen(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'Color' then begin    Result := TProtectedTPen(Owner).Color;  end else if Prop.Name = 'Mode' then begin    Result := TProtectedTPen(Owner).Mode;  end else if Prop.Name = 'Style' then begin    Result := TProtectedTPen(Owner).Style;  end else if Prop.Name = 'Width' then begin    Result := TProtectedTPen(Owner).Width;  end else    Result := inherited GetProperty(Prop);end;procedure TPenClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;begin  if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTPen(Owner).Handle := _Handle^;  end else if Prop.Name = 'Color' then begin    TProtectedTPen(Owner).Color := Value;  end else if Prop.Name = 'Mode' then begin    TProtectedTPen(Owner).Mode := Value;  end else if Prop.Name = 'Style' then begin    TProtectedTPen(Owner).Style := Value;  end else if Prop.Name = 'Width' then begin    TProtectedTPen(Owner).Width := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TPenClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TPenClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBrushClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TBrushClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TBrushClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBrushProperties);end;procedure TBrushClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBrushMethods);end;procedure TBrushClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBrushConstructors);end;procedure TBrushClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBrushEvents);end;function TBrushClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Bitmap' then begin    Result := Longint(TProtectedTBrush(Owner).Bitmap);  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTBrush(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'Color' then begin    Result := TProtectedTBrush(Owner).Color;  end else if Prop.Name = 'Style' then begin    Result := TProtectedTBrush(Owner).Style;  end else    Result := inherited GetProperty(Prop);end;procedure TBrushClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;begin  if Prop.Name = 'Bitmap' then begin    TProtectedTBrush(Owner).Bitmap := TBitmap(Longint(Value));  end else if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTBrush(Owner).Handle := _Handle^;  end else if Prop.Name = 'Color' then begin    TProtectedTBrush(Owner).Color := Value;  end else if Prop.Name = 'Style' then begin    TProtectedTBrush(Owner).Style := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TBrushClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TBrushClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCanvasClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTCanvas(Owner).OnChange;  TProtectedTCanvas(Owner).OnChange := OnChange;  _Event_OnChanging := TProtectedTCanvas(Owner).OnChanging;  TProtectedTCanvas(Owner).OnChanging := OnChanging;end;procedure TCanvasClassInfo.UnConnectEventHandlers;begin  TProtectedTCanvas(Owner).OnChange := _Event_OnChange;  TProtectedTCanvas(Owner).OnChanging := _Event_OnChanging;  inherited UnConnectEventHandlers;end;procedure TCanvasClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TCanvasClassInfo.OnChanging(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChanging');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChanging) then _Event_OnChanging(Sender);  FireEvent(_E);end;procedure TCanvasClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCanvasProperties);end;procedure TCanvasClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCanvasMethods);end;procedure TCanvasClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCanvasConstructors);end;procedure TCanvasClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCanvasEvents);end;function TCanvasClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ClipRect' then begin    _Prop_ClipRect := TProtectedTCanvas(Owner).ClipRect;    Result := Longint(@_Prop_ClipRect);  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTCanvas(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'LockCount' then begin    Result := TProtectedTCanvas(Owner).LockCount;  end else if Prop.Name = 'CanvasOrientation' then begin    Result := TProtectedTCanvas(Owner).CanvasOrientation;  end else if Prop.Name = 'PenPos' then begin    _Prop_PenPos := TProtectedTCanvas(Owner).PenPos;    Result := Longint(@_Prop_PenPos);  end else if Prop.Name = 'Pixels' then begin    Result := TProtectedTCanvas(Owner).Pixels[Prop.Indexes[0].Value, Prop.Indexes[1].Value];  end else if Prop.Name = 'TextFlags' then begin    Result := TProtectedTCanvas(Owner).TextFlags;  end else if Prop.Name = 'Brush' then begin    Result := Longint(TProtectedTCanvas(Owner).Brush);  end else if Prop.Name = 'CopyMode' then begin    Result := TProtectedTCanvas(Owner).CopyMode;  end else if Prop.Name = 'Font' then begin    Result := Longint(TProtectedTCanvas(Owner).Font);  end else if Prop.Name = 'Pen' then begin    Result := Longint(TProtectedTCanvas(Owner).Pen);  end else    Result := inherited GetProperty(Prop);end;procedure TCanvasClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;  _PenPos: ^TPoint;begin  if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTCanvas(Owner).Handle := _Handle^;  end else if Prop.Name = 'PenPos' then begin    _PenPos := Pointer(Longint(Value));    TProtectedTCanvas(Owner).PenPos := _PenPos^;  end else if Prop.Name = 'Pixels' then begin    TProtectedTCanvas(Owner).Pixels[Prop.Indexes[0].Value, Prop.Indexes[1].Value] := Value;  end else if Prop.Name = 'TextFlags' then begin    TProtectedTCanvas(Owner).TextFlags := Value;  end else if Prop.Name = 'Brush' then begin    TProtectedTCanvas(Owner).Brush := TBrush(Longint(Value));  end else if Prop.Name = 'CopyMode' then begin    TProtectedTCanvas(Owner).CopyMode := Value;  end else if Prop.Name = 'Font' then begin    TProtectedTCanvas(Owner).Font := TFont(Longint(Value));  end else if Prop.Name = 'Pen' then begin    TProtectedTCanvas(Owner).Pen := TPen(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TCanvasClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_BrushCopy_Dest: ^TRect;  _Param_BrushCopy_Source: ^TRect;  _Param_CopyRect_Dest: ^TRect;  _Param_CopyRect_Source: ^TRect;  _Param_DrawFocusRect_Rect: ^TRect;  _Param_FillRect_Rect: ^TRect;  _Param_FrameRect_Rect: ^TRect;  _Param_StretchDraw_Rect: ^TRect;  _Param_TextRect_Rect: ^TRect;begin  if Method.Name = 'Arc' then begin    TProtectedTCanvas(Owner).Arc(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value, Method.Args[5].Value, Method.Args[6].Value, Method.Args[7].Value);  end else if Method.Name = 'BrushCopy' then begin    _Param_BrushCopy_Dest := Pointer(Longint(Method.Args[0].Value));    _Param_BrushCopy_Source := Pointer(Longint(Method.Args[2].Value));    TProtectedTCanvas(Owner).BrushCopy(_Param_BrushCopy_Dest^, TBitmap(Longint(Method.Args[1].Value)), _Param_BrushCopy_Source^, Method.Args[3].Value);  end else if Method.Name = 'Chord' then begin    TProtectedTCanvas(Owner).Chord(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value, Method.Args[5].Value, Method.Args[6].Value, Method.Args[7].Value);  end else if Method.Name = 'CopyRect' then begin    _Param_CopyRect_Dest := Pointer(Longint(Method.Args[0].Value));    _Param_CopyRect_Source := Pointer(Longint(Method.Args[2].Value));    TProtectedTCanvas(Owner).CopyRect(_Param_CopyRect_Dest^, TCanvas(Longint(Method.Args[1].Value)), _Param_CopyRect_Source^);  end else if Method.Name = 'Draw' then begin    TProtectedTCanvas(Owner).Draw(Method.Args[0].Value, Method.Args[1].Value, TGraphic(Longint(Method.Args[2].Value)));  end else if Method.Name = 'DrawFocusRect' then begin    _Param_DrawFocusRect_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTCanvas(Owner).DrawFocusRect(_Param_DrawFocusRect_Rect^);  end else if Method.Name = 'FillRect' then begin    _Param_FillRect_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTCanvas(Owner).FillRect(_Param_FillRect_Rect^);  end else if Method.Name = 'FloodFill' then begin    TProtectedTCanvas(Owner).FloodFill(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value);  end else if Method.Name = 'FrameRect' then begin    _Param_FrameRect_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTCanvas(Owner).FrameRect(_Param_FrameRect_Rect^);  end else if Method.Name = 'LineTo' then begin    TProtectedTCanvas(Owner).LineTo(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Lock' then begin    TProtectedTCanvas(Owner).Lock();  end else if Method.Name = 'MoveTo' then begin    TProtectedTCanvas(Owner).MoveTo(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Pie' then begin    TProtectedTCanvas(Owner).Pie(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value, Method.Args[5].Value, Method.Args[6].Value, Method.Args[7].Value);  end else if Method.Name = 'Refresh' then begin    TProtectedTCanvas(Owner).Refresh();  end else if Method.Name = 'RoundRect' then begin    TProtectedTCanvas(Owner).RoundRect(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value, Method.Args[5].Value);  end else if Method.Name = 'StretchDraw' then begin    _Param_StretchDraw_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTCanvas(Owner).StretchDraw(_Param_StretchDraw_Rect^, TGraphic(Longint(Method.Args[1].Value)));  end else if Method.Name = 'TextExtent' then begin    _MethodRes_TextExtent := TProtectedTCanvas(Owner).TextExtent(Method.Args[0].Value);    Method.Result := Longint(@_MethodRes_TextExtent);  end else if Method.Name = 'TextHeight' then begin    TProtectedTCanvas(Owner).TextHeight(Method.Args[0].Value);  end else if Method.Name = 'TextOut' then begin    TProtectedTCanvas(Owner).TextOut(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'TextRect' then begin    _Param_TextRect_Rect := Pointer(Longint(Method.Args[0].Value));    TProtectedTCanvas(Owner).TextRect(_Param_TextRect_Rect^, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value);  end else if Method.Name = 'TextWidth' then begin    TProtectedTCanvas(Owner).TextWidth(Method.Args[0].Value);  end else if Method.Name = 'TryLock' then begin    TProtectedTCanvas(Owner).TryLock();  end else if Method.Name = 'Unlock' then begin    TProtectedTCanvas(Owner).Unlock();  end else    inherited InvokeMethod(Method);end;procedure TCanvasClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TGraphicClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTGraphic(Owner).OnChange;  TProtectedTGraphic(Owner).OnChange := OnChange;  _Event_OnProgress := TProtectedTGraphic(Owner).OnProgress;  TProtectedTGraphic(Owner).OnProgress := OnProgress;end;procedure TGraphicClassInfo.UnConnectEventHandlers;begin  TProtectedTGraphic(Owner).OnChange := _Event_OnChange;  TProtectedTGraphic(Owner).OnProgress := _Event_OnProgress;  inherited UnConnectEventHandlers;end;procedure TGraphicClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TGraphicClassInfo.OnProgress(Sender: TObject; Stage: TProgressStage; PercentDone: Byte; RedrawNow: Boolean; const R: TRect; const Msg: string);var  _E: TradEventInfo;begin  _E := FindEvent('OnProgress');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Stage;  _E.Args[2].Value := PercentDone;  _E.Args[3].Value := RedrawNow;  _E.Args[4].Value := Longint(@R);  _E.Args[5].Value := Msg;  if Assigned(_Event_OnProgress) then _Event_OnProgress(Sender, Stage, PercentDone, RedrawNow, R, Msg);  FireEvent(_E);end;procedure TGraphicClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TGraphicProperties);end;procedure TGraphicClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TGraphicMethods);end;procedure TGraphicClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TGraphicConstructors);end;procedure TGraphicClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TGraphicEvents);end;function TGraphicClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Empty' then begin    Result := TProtectedTGraphic(Owner).Empty;  end else if Prop.Name = 'Height' then begin    Result := TProtectedTGraphic(Owner).Height;  end else if Prop.Name = 'Modified' then begin    Result := TProtectedTGraphic(Owner).Modified;  end else if Prop.Name = 'Palette' then begin    _Prop_Palette := TProtectedTGraphic(Owner).Palette;    Result := Longint(@_Prop_Palette);  end else if Prop.Name = 'PaletteModified' then begin    Result := TProtectedTGraphic(Owner).PaletteModified;  end else if Prop.Name = 'Transparent' then begin    Result := TProtectedTGraphic(Owner).Transparent;  end else if Prop.Name = 'Width' then begin    Result := TProtectedTGraphic(Owner).Width;  end else    Result := inherited GetProperty(Prop);end;procedure TGraphicClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Palette: ^Longword;begin  if Prop.Name = 'Height' then begin    TProtectedTGraphic(Owner).Height := Value;  end else if Prop.Name = 'Modified' then begin    TProtectedTGraphic(Owner).Modified := Value;  end else if Prop.Name = 'Palette' then begin    _Palette := Pointer(Longint(Value));    TProtectedTGraphic(Owner).Palette := _Palette^;  end else if Prop.Name = 'PaletteModified' then begin    TProtectedTGraphic(Owner).PaletteModified := Value;  end else if Prop.Name = 'Transparent' then begin    TProtectedTGraphic(Owner).Transparent := Value;  end else if Prop.Name = 'Width' then begin    TProtectedTGraphic(Owner).Width := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TGraphicClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_LoadFromClipboardFormat_AData: ^THandle;  _Param_LoadFromClipboardFormat_APalette: ^HPALETTE;begin  if Method.Name = 'LoadFromFile' then begin    TProtectedTGraphic(Owner).LoadFromFile(Method.Args[0].Value);  end else if Method.Name = 'SaveToFile' then begin    TProtectedTGraphic(Owner).SaveToFile(Method.Args[0].Value);  end else if Method.Name = 'LoadFromStream' then begin    TProtectedTGraphic(Owner).LoadFromStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'SaveToStream' then begin    TProtectedTGraphic(Owner).SaveToStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'LoadFromClipboardFormat' then begin    _Param_LoadFromClipboardFormat_AData := Pointer(Longint(Method.Args[1].Value));    _Param_LoadFromClipboardFormat_APalette := Pointer(Longint(Method.Args[2].Value));    TProtectedTGraphic(Owner).LoadFromClipboardFormat(Method.Args[0].Value, _Param_LoadFromClipboardFormat_AData^, _Param_LoadFromClipboardFormat_APalette^);  end else if Method.Name = 'SaveToClipboardFormat' then begin    _VarParam_SaveToClipboardFormat_AFormat := Method.Args[0].Value;    _VarParam_SaveToClipboardFormat_AData := Pointer(Longint(Method.Args[1].Value));    _VarParam_SaveToClipboardFormat_APalette := Pointer(Longint(Method.Args[2].Value));    TProtectedTGraphic(Owner).SaveToClipboardFormat(_VarParam_SaveToClipboardFormat_AFormat, _VarParam_SaveToClipboardFormat_AData^, _VarParam_SaveToClipboardFormat_APalette^);    Method.Args[0].Value := _VarParam_SaveToClipboardFormat_AFormat;    Method.Args[1].Value := Longint(_VarParam_SaveToClipboardFormat_AData);    Method.Args[2].Value := Longint(_VarParam_SaveToClipboardFormat_APalette);  end else    inherited InvokeMethod(Method);end;procedure TGraphicClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TPictureClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTPicture(Owner).OnChange;  TProtectedTPicture(Owner).OnChange := OnChange;  _Event_OnProgress := TProtectedTPicture(Owner).OnProgress;  TProtectedTPicture(Owner).OnProgress := OnProgress;end;procedure TPictureClassInfo.UnConnectEventHandlers;begin  TProtectedTPicture(Owner).OnChange := _Event_OnChange;  TProtectedTPicture(Owner).OnProgress := _Event_OnProgress;  inherited UnConnectEventHandlers;end;procedure TPictureClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TPictureClassInfo.OnProgress(Sender: TObject; Stage: TProgressStage; PercentDone: Byte; RedrawNow: Boolean; const R: TRect; const Msg: string);var  _E: TradEventInfo;begin  _E := FindEvent('OnProgress');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := Stage;  _E.Args[2].Value := PercentDone;  _E.Args[3].Value := RedrawNow;  _E.Args[4].Value := Longint(@R);  _E.Args[5].Value := Msg;  if Assigned(_Event_OnProgress) then _Event_OnProgress(Sender, Stage, PercentDone, RedrawNow, R, Msg);  FireEvent(_E);end;procedure TPictureClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TPictureProperties);end;procedure TPictureClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TPictureMethods);end;procedure TPictureClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TPictureConstructors);end;procedure TPictureClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TPictureEvents);end;function TPictureClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Bitmap' then begin    Result := Longint(TProtectedTPicture(Owner).Bitmap);  end else if Prop.Name = 'Graphic' then begin    Result := Longint(TProtectedTPicture(Owner).Graphic);  end else if Prop.Name = 'PictureAdapter' then begin    Result := Longint(TProtectedTPicture(Owner).PictureAdapter);  end else if Prop.Name = 'Height' then begin    Result := TProtectedTPicture(Owner).Height;  end else if Prop.Name = 'Icon' then begin    Result := Longint(TProtectedTPicture(Owner).Icon);  end else if Prop.Name = 'Metafile' then begin    Result := Longint(TProtectedTPicture(Owner).Metafile);  end else if Prop.Name = 'Width' then begin    Result := TProtectedTPicture(Owner).Width;  end else    Result := inherited GetProperty(Prop);end;procedure TPictureClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Bitmap' then begin    TProtectedTPicture(Owner).Bitmap := TBitmap(Longint(Value));  end else if Prop.Name = 'Graphic' then begin    TProtectedTPicture(Owner).Graphic := TGraphic(Longint(Value));  end else if Prop.Name = 'PictureAdapter' then begin    TProtectedTPicture(Owner).PictureAdapter := IChangeNotifier(Longint(Value));  end else if Prop.Name = 'Icon' then begin    TProtectedTPicture(Owner).Icon := TIcon(Longint(Value));  end else if Prop.Name = 'Metafile' then begin    TProtectedTPicture(Owner).Metafile := TMetafile(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TPictureClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_LoadFromClipboardFormat_AData: ^THandle;  _Param_LoadFromClipboardFormat_APalette: ^HPALETTE;begin  if Method.Name = 'LoadFromFile' then begin    TProtectedTPicture(Owner).LoadFromFile(Method.Args[0].Value);  end else if Method.Name = 'SaveToFile' then begin    TProtectedTPicture(Owner).SaveToFile(Method.Args[0].Value);  end else if Method.Name = 'LoadFromClipboardFormat' then begin    _Param_LoadFromClipboardFormat_AData := Pointer(Longint(Method.Args[1].Value));    _Param_LoadFromClipboardFormat_APalette := Pointer(Longint(Method.Args[2].Value));    TProtectedTPicture(Owner).LoadFromClipboardFormat(Method.Args[0].Value, _Param_LoadFromClipboardFormat_AData^, _Param_LoadFromClipboardFormat_APalette^);  end else if Method.Name = 'SaveToClipboardFormat' then begin    _VarParam_SaveToClipboardFormat_AFormat := Method.Args[0].Value;    _VarParam_SaveToClipboardFormat_AData := Pointer(Longint(Method.Args[1].Value));    _VarParam_SaveToClipboardFormat_APalette := Pointer(Longint(Method.Args[2].Value));    TProtectedTPicture(Owner).SaveToClipboardFormat(_VarParam_SaveToClipboardFormat_AFormat, _VarParam_SaveToClipboardFormat_AData^, _VarParam_SaveToClipboardFormat_APalette^);    Method.Args[0].Value := _VarParam_SaveToClipboardFormat_AFormat;    Method.Args[1].Value := Longint(_VarParam_SaveToClipboardFormat_AData);    Method.Args[2].Value := Longint(_VarParam_SaveToClipboardFormat_APalette);  end else if Method.Name = 'SupportsClipboardFormat' then begin    TProtectedTPicture(Owner).SupportsClipboardFormat(Method.Args[0].Value);  end else if Method.Name = 'RegisterFileFormat' then begin    TProtectedTPicture(Owner).RegisterFileFormat(Method.Args[0].Value, Method.Args[1].Value, TGraphicClass(Longint(Method.Args[2].Value)));  end else if Method.Name = 'RegisterFileFormatRes' then begin    TProtectedTPicture(Owner).RegisterFileFormatRes(Method.Args[0].Value, Method.Args[1].Value, TGraphicClass(Longint(Method.Args[2].Value)));  end else if Method.Name = 'RegisterClipboardFormat' then begin    TProtectedTPicture(Owner).RegisterClipboardFormat(Method.Args[0].Value, TGraphicClass(Longint(Method.Args[1].Value)));  end else if Method.Name = 'UnregisterGraphicClass' then begin    TProtectedTPicture(Owner).UnregisterGraphicClass(TGraphicClass(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TPictureClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMetafileCanvasClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMetafileCanvasClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMetafileCanvasClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMetafileCanvasProperties);end;procedure TMetafileCanvasClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMetafileCanvasMethods);end;procedure TMetafileCanvasClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMetafileCanvasConstructors);end;procedure TMetafileCanvasClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMetafileCanvasEvents);end;function TMetafileCanvasClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TMetafileCanvasClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TMetafileCanvasClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TMetafileCanvasClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TSharedImageClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TSharedImageClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TSharedImageClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TSharedImageProperties);end;procedure TSharedImageClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TSharedImageMethods);end;procedure TSharedImageClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TSharedImageConstructors);end;procedure TSharedImageClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TSharedImageEvents);end;function TSharedImageClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'RefCount' then begin    Result := TProtectedTSharedImage(Owner).RefCount;  end else    Result := inherited GetProperty(Prop);end;procedure TSharedImageClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TSharedImageClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TSharedImageClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMetafileImageClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMetafileImageClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMetafileImageClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMetafileImageProperties);end;procedure TMetafileImageClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMetafileImageMethods);end;procedure TMetafileImageClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMetafileImageConstructors);end;procedure TMetafileImageClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMetafileImageEvents);end;function TMetafileImageClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TMetafileImageClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TMetafileImageClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TMetafileImageClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMetafileClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMetafileClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMetafileClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMetafileProperties);end;procedure TMetafileClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMetafileMethods);end;procedure TMetafileClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMetafileConstructors);end;procedure TMetafileClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMetafileEvents);end;function TMetafileClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'CreatedBy' then begin    Result := TProtectedTMetafile(Owner).CreatedBy;  end else if Prop.Name = 'Description' then begin    Result := TProtectedTMetafile(Owner).Description;  end else if Prop.Name = 'Enhanced' then begin    Result := TProtectedTMetafile(Owner).Enhanced;  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTMetafile(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'MMWidth' then begin    Result := TProtectedTMetafile(Owner).MMWidth;  end else if Prop.Name = 'MMHeight' then begin    Result := TProtectedTMetafile(Owner).MMHeight;  end else if Prop.Name = 'Inch' then begin    Result := TProtectedTMetafile(Owner).Inch;  end else    Result := inherited GetProperty(Prop);end;procedure TMetafileClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;begin  if Prop.Name = 'Enhanced' then begin    TProtectedTMetafile(Owner).Enhanced := Value;  end else if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTMetafile(Owner).Handle := _Handle^;  end else if Prop.Name = 'MMWidth' then begin    TProtectedTMetafile(Owner).MMWidth := Value;  end else if Prop.Name = 'MMHeight' then begin    TProtectedTMetafile(Owner).MMHeight := Value;  end else if Prop.Name = 'Inch' then begin    TProtectedTMetafile(Owner).Inch := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TMetafileClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Clear' then begin    TProtectedTMetafile(Owner).Clear();  end else if Method.Name = 'ReleaseHandle' then begin    _MethodRes_ReleaseHandle := TProtectedTMetafile(Owner).ReleaseHandle();    Method.Result := Longint(@_MethodRes_ReleaseHandle);  end else    inherited InvokeMethod(Method);end;procedure TMetafileClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBitmapImageClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TBitmapImageClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TBitmapImageClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBitmapImageProperties);end;procedure TBitmapImageClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBitmapImageMethods);end;procedure TBitmapImageClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBitmapImageConstructors);end;procedure TBitmapImageClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBitmapImageEvents);end;function TBitmapImageClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TBitmapImageClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TBitmapImageClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TBitmapImageClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBitmapClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TBitmapClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TBitmapClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBitmapProperties);end;procedure TBitmapClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBitmapMethods);end;procedure TBitmapClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBitmapConstructors);end;procedure TBitmapClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBitmapEvents);end;function TBitmapClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Canvas' then begin    Result := Longint(TProtectedTBitmap(Owner).Canvas);  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTBitmap(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'HandleType' then begin    Result := TProtectedTBitmap(Owner).HandleType;  end else if Prop.Name = 'IgnorePalette' then begin    Result := TProtectedTBitmap(Owner).IgnorePalette;  end else if Prop.Name = 'MaskHandle' then begin    _Prop_MaskHandle := TProtectedTBitmap(Owner).MaskHandle;    Result := Longint(@_Prop_MaskHandle);  end else if Prop.Name = 'Monochrome' then begin    Result := TProtectedTBitmap(Owner).Monochrome;  end else if Prop.Name = 'PixelFormat' then begin    Result := TProtectedTBitmap(Owner).PixelFormat;  end else if Prop.Name = 'ScanLine' then begin    Result := Longint(TProtectedTBitmap(Owner).ScanLine[Prop.Indexes[0].Value]);  end else if Prop.Name = 'TransparentColor' then begin    Result := TProtectedTBitmap(Owner).TransparentColor;  end else if Prop.Name = 'TransparentMode' then begin    Result := TProtectedTBitmap(Owner).TransparentMode;  end else    Result := inherited GetProperty(Prop);end;procedure TBitmapClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;  _MaskHandle: ^Longword;begin  if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTBitmap(Owner).Handle := _Handle^;  end else if Prop.Name = 'HandleType' then begin    TProtectedTBitmap(Owner).HandleType := Value;  end else if Prop.Name = 'IgnorePalette' then begin    TProtectedTBitmap(Owner).IgnorePalette := Value;  end else if Prop.Name = 'MaskHandle' then begin    _MaskHandle := Pointer(Longint(Value));    TProtectedTBitmap(Owner).MaskHandle := _MaskHandle^;  end else if Prop.Name = 'Monochrome' then begin    TProtectedTBitmap(Owner).Monochrome := Value;  end else if Prop.Name = 'PixelFormat' then begin    TProtectedTBitmap(Owner).PixelFormat := Value;  end else if Prop.Name = 'TransparentColor' then begin    TProtectedTBitmap(Owner).TransparentColor := Value;  end else if Prop.Name = 'TransparentMode' then begin    TProtectedTBitmap(Owner).TransparentMode := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TBitmapClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_LoadFromResourceName_Instance: ^THandle;  _Param_LoadFromResourceID_Instance: ^THandle;begin  if Method.Name = 'Dormant' then begin    TProtectedTBitmap(Owner).Dormant();  end else if Method.Name = 'FreeImage' then begin    TProtectedTBitmap(Owner).FreeImage();  end else if Method.Name = 'LoadFromResourceName' then begin    _Param_LoadFromResourceName_Instance := Pointer(Longint(Method.Args[0].Value));    TProtectedTBitmap(Owner).LoadFromResourceName(_Param_LoadFromResourceName_Instance^, Method.Args[1].Value);  end else if Method.Name = 'LoadFromResourceID' then begin    _Param_LoadFromResourceID_Instance := Pointer(Longint(Method.Args[0].Value));    TProtectedTBitmap(Owner).LoadFromResourceID(_Param_LoadFromResourceID_Instance^, Method.Args[1].Value);  end else if Method.Name = 'Mask' then begin    TProtectedTBitmap(Owner).Mask(Method.Args[0].Value);  end else if Method.Name = 'ReleaseHandle' then begin    _MethodRes_ReleaseHandle := TProtectedTBitmap(Owner).ReleaseHandle();    Method.Result := Longint(@_MethodRes_ReleaseHandle);  end else if Method.Name = 'ReleaseMaskHandle' then begin    _MethodRes_ReleaseMaskHandle := TProtectedTBitmap(Owner).ReleaseMaskHandle();    Method.Result := Longint(@_MethodRes_ReleaseMaskHandle);  end else if Method.Name = 'ReleasePalette' then begin    _MethodRes_ReleasePalette := TProtectedTBitmap(Owner).ReleasePalette();    Method.Result := Longint(@_MethodRes_ReleasePalette);  end else    inherited InvokeMethod(Method);end;procedure TBitmapClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TIconImageClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TIconImageClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TIconImageClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TIconImageProperties);end;procedure TIconImageClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TIconImageMethods);end;procedure TIconImageClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TIconImageConstructors);end;procedure TIconImageClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TIconImageEvents);end;function TIconImageClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TIconImageClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TIconImageClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TIconImageClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TIconClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TIconClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TIconClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TIconProperties);end;procedure TIconClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TIconMethods);end;procedure TIconClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TIconConstructors);end;procedure TIconClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TIconEvents);end;function TIconClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTIcon(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else    Result := inherited GetProperty(Prop);end;procedure TIconClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;begin  if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTIcon(Owner).Handle := _Handle^;  end else    inherited SetProperty(Prop, Value);end;procedure TIconClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'ReleaseHandle' then begin    _MethodRes_ReleaseHandle := TProtectedTIcon(Owner).ReleaseHandle();    Method.Result := Longint(@_MethodRes_ReleaseHandle);  end else    inherited InvokeMethod(Method);end;procedure TIconClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TGraphicsObject', TGraphicsObjectClassInfo);  TradClassRegistry.RegisterClass('TFont', TFontClassInfo);  TradClassRegistry.RegisterClass('TPen', TPenClassInfo);  TradClassRegistry.RegisterClass('TBrush', TBrushClassInfo);  TradClassRegistry.RegisterClass('TCanvas', TCanvasClassInfo);  TradClassRegistry.RegisterClass('TGraphic', TGraphicClassInfo);  TradClassRegistry.RegisterClass('TPicture', TPictureClassInfo);  TradClassRegistry.RegisterClass('TMetafileCanvas', TMetafileCanvasClassInfo);  TradClassRegistry.RegisterClass('TSharedImage', TSharedImageClassInfo);  TradClassRegistry.RegisterClass('TMetafileImage', TMetafileImageClassInfo);  TradClassRegistry.RegisterClass('TMetafile', TMetafileClassInfo);  TradClassRegistry.RegisterClass('TBitmapImage', TBitmapImageClassInfo);  TradClassRegistry.RegisterClass('TBitmap', TBitmapClassInfo);  TradClassRegistry.RegisterClass('TIconImage', TIconImageClassInfo);  TradClassRegistry.RegisterClass('TIcon', TIconClassInfo);end.