{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radstdctrls;interfaceuses RadCommon, Windows, stdctrls, radControls, Controls, Classes, Graphics, Menus, Forms;type  TCustomGroupBoxClassInfo = class;  TGroupBoxClassInfo = class;  TCustomLabelClassInfo = class;  TLabelClassInfo = class;  TCustomEditClassInfo = class;  TEditClassInfo = class;  TCustomMemoClassInfo = class;  TMemoClassInfo = class;  TCustomComboBoxClassInfo = class;  TComboBoxClassInfo = class;  TButtonActionLinkClassInfo = class;  TButtonControlClassInfo = class;  TButtonClassInfo = class;  TCustomCheckBoxClassInfo = class;  TCheckBoxClassInfo = class;  TRadioButtonClassInfo = class;  TCustomListBoxClassInfo = class;  TListBoxClassInfo = class;  TScrollBarClassInfo = class;  TCustomStaticTextClassInfo = class;  TStaticTextClassInfo = class;  TCustomGroupBoxClassInfo = class(TCustomControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TGroupBoxClassInfo = class(TCustomGroupBoxClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomLabelClassInfo = class(TGraphicControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TLabelClassInfo = class(TCustomLabelClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomEditClassInfo = class(TWinControlClassInfo)  private    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TEditClassInfo = class(TCustomEditClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomMemoClassInfo = class(TCustomEditClassInfo)  private    _Prop_CaretPos: TPoint;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMemoClassInfo = class(TCustomMemoClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomComboBoxClassInfo = class(TWinControlClassInfo)  private    _Prop_EditHandle: HWND;    _Prop_ListHandle: HWND;    _Event_OnChange: TNotifyEvent;    _Event_OnDropDown: TNotifyEvent;    _Event_OnDrawItem: TDrawItemEvent;    _Event_OnMeasureItem: TMeasureItemEvent;    procedure OnChange(Sender: TObject);    procedure OnDropDown(Sender: TObject);    procedure OnDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);    procedure OnMeasureItem(Control: TWinControl; Index: Integer; var Height: Integer);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TComboBoxClassInfo = class(TCustomComboBoxClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TButtonActionLinkClassInfo = class(TWinControlActionLinkClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TButtonControlClassInfo = class(TWinControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TButtonClassInfo = class(TButtonControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomCheckBoxClassInfo = class(TButtonControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCheckBoxClassInfo = class(TCustomCheckBoxClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TRadioButtonClassInfo = class(TButtonControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomListBoxClassInfo = class(TWinControlClassInfo)  private    _MethodRes_ItemRect: TRect;    _Event_OnDrawItem: TDrawItemEvent;    _Event_OnMeasureItem: TMeasureItemEvent;    procedure OnDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);    procedure OnMeasureItem(Control: TWinControl; Index: Integer; var Height: Integer);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TListBoxClassInfo = class(TCustomListBoxClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TScrollBarClassInfo = class(TWinControlClassInfo)  private    _Event_OnChange: TNotifyEvent;    _Event_OnScroll: TScrollEvent;    procedure OnChange(Sender: TObject);    procedure OnScroll(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomStaticTextClassInfo = class(TWinControlClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TStaticTextClassInfo = class(TCustomStaticTextClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTCustomGroupBox = class(TCustomGroupBox);  TProtectedTGroupBox = class(TGroupBox);  TProtectedTCustomLabel = class(TCustomLabel);  TProtectedTLabel = class(TLabel);  TProtectedTCustomEdit = class(TCustomEdit);  TProtectedTEdit = class(TEdit);  TProtectedTCustomMemo = class(TCustomMemo);  TProtectedTMemo = class(TMemo);  TProtectedTCustomComboBox = class(TCustomComboBox);  TProtectedTComboBox = class(TComboBox);  TProtectedTButtonActionLink = class(TButtonActionLink);  TProtectedTButtonControl = class(TButtonControl);  TProtectedTButton = class(TButton);  TProtectedTCustomCheckBox = class(TCustomCheckBox);  TProtectedTCheckBox = class(TCheckBox);  TProtectedTRadioButton = class(TRadioButton);  TProtectedTCustomListBox = class(TCustomListBox);  TProtectedTListBox = class(TListBox);  TProtectedTScrollBar = class(TScrollBar);  TProtectedTCustomStaticText = class(TCustomStaticText);  TProtectedTStaticText = class(TStaticText);const  TCustomGroupBoxProperties: String =     '';  TCustomGroupBoxMethods: String =     '';  TCustomGroupBoxConstructors: String =     '';  TCustomGroupBoxEvents: String =     '';  TGroupBoxProperties: String =     'Override::Align::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Caption::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DockSite::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TGroupBoxMethods: String =     '';  TGroupBoxConstructors: String =     '';  TGroupBoxEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDockDrop::pvPublished::' +    'Override::OnDockOver::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnGetSiteInfo::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished::' +    'Override::OnUnDock::pvPublished';  TCustomLabelProperties: String =     'Define::Alignment::psReadable..psWritable::pvProtected::0::' +    'Define::AutoSize::psReadable..psWritable::pvProtected::0::' +    'Define::FocusControl::psReadable..psWritable::pvProtected::0::' +    'Define::ShowAccelChar::psReadable..psWritable::pvProtected::0::' +    'Define::Transparent::psReadable..psWritable::pvProtected::0::' +    'Define::Layout::psReadable..psWritable::pvProtected::0::' +    'Define::WordWrap::psReadable..psWritable::pvProtected::0::' +    'Override::Canvas::::pvPublic';  TCustomLabelMethods: String =     '';  TCustomLabelConstructors: String =     '';  TCustomLabelEvents: String =     '';  TLabelProperties: String =     'Override::Align::::pvPublished::' +    'Override::Alignment::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::AutoSize::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Caption::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::FocusControl::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowAccelChar::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::Transparent::::pvPublished::' +    'Override::Layout::::pvPublished::' +    'Override::Visible::::pvPublished::' +    'Override::WordWrap::::pvPublished';  TLabelMethods: String =     '';  TLabelConstructors: String =     '';  TLabelEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomEditProperties: String =     'Define::AutoSelect::psReadable..psWritable::pvProtected::0::' +    'Define::AutoSize::psReadable..psWritable::pvProtected::0::' +    'Define::BorderStyle::psReadable..psWritable::pvProtected::0::' +    'Define::CharCase::psReadable..psWritable::pvProtected::0::' +    'Define::HideSelection::psReadable..psWritable::pvProtected::0::' +    'Define::MaxLength::psReadable..psWritable::pvProtected::0::' +    'Define::OEMConvert::psReadable..psWritable::pvProtected::0::' +    'Define::PasswordChar::psReadable..psWritable::pvProtected::0::' +    'Override::ParentColor::::pvProtected::' +    'Define::ReadOnly::psReadable..psWritable::pvProtected::0::' +    'Define::CanUndo::psReadable::pvPublic::0::' +    'Define::Modified::psReadable..psWritable::pvPublic::0::' +    'Define::SelLength::psReadable..psWritable::pvPublic::0::' +    'Define::SelStart::psReadable..psWritable::pvPublic::0::' +    'Define::SelText::psReadable..psWritable::pvPublic::0::' +    'Override::Text::::pvPublic::' +    'Override::TabStop::::pvPublished';  TCustomEditMethods: String =     'Clear::msProcedure::0::' +    'ClearSelection::msProcedure::0::' +    'CopyToClipboard::msProcedure::0::' +    'CutToClipboard::msProcedure::0::' +    'PasteFromClipboard::msProcedure::0::' +    'Undo::msProcedure::0::' +    'ClearUndo::msProcedure::0::' +    'GetSelTextBuf::msFunction::2::Buffer::BufSize::' +    'SelectAll::msProcedure::0::' +    'SetSelTextBuf::msProcedure::1::Buffer';  TCustomEditConstructors: String =     '';  TCustomEditEvents: String =     'Define::OnChange::pvProtected::1::Sender';  TEditProperties: String =     'Override::Anchors::::pvPublished::' +    'Override::AutoSelect::::pvPublished::' +    'Override::AutoSize::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::BorderStyle::::pvPublished::' +    'Override::CharCase::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::HideSelection::::pvPublished::' +    'Override::ImeMode::::pvPublished::' +    'Override::ImeName::::pvPublished::' +    'Override::MaxLength::::pvPublished::' +    'Override::OEMConvert::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PasswordChar::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ReadOnly::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Text::::pvPublished::' +    'Override::Visible::::pvPublished';  TEditMethods: String =     '';  TEditConstructors: String =     '';  TEditEvents: String =     'Override::OnChange::pvPublished::' +    'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomMemoProperties: String =     'Define::Alignment::psReadable..psWritable::pvProtected::0::' +    'Define::ScrollBars::psReadable..psWritable::pvProtected::0::' +    'Define::WantReturns::psReadable..psWritable::pvProtected::0::' +    'Define::WantTabs::psReadable..psWritable::pvProtected::0::' +    'Define::WordWrap::psReadable..psWritable::pvProtected::0::' +    'Define::CaretPos::psReadable::pvPublic::0::' +    'Define::Lines::psReadable..psWritable::pvPublic::0';  TCustomMemoMethods: String =     '';  TCustomMemoConstructors: String =     '';  TCustomMemoEvents: String =     '';  TMemoProperties: String =     'Override::Align::::pvPublished::' +    'Override::Alignment::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::BorderStyle::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::HideSelection::::pvPublished::' +    'Override::ImeMode::::pvPublished::' +    'Override::ImeName::::pvPublished::' +    'Override::Lines::::pvPublished::' +    'Override::MaxLength::::pvPublished::' +    'Override::OEMConvert::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ReadOnly::::pvPublished::' +    'Override::ScrollBars::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished::' +    'Override::WantReturns::::pvPublished::' +    'Override::WantTabs::::pvPublished::' +    'Override::WordWrap::::pvPublished';  TMemoMethods: String =     '';  TMemoConstructors: String =     '';  TMemoEvents: String =     'Override::OnChange::pvPublished::' +    'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomComboBoxProperties: String =     'Define::DropDownCount::psReadable..psWritable::pvProtected::0::' +    'Define::EditHandle::psReadable::pvProtected::0::' +    'Define::ItemHeight::psReadable..psWritable::pvProtected::0::' +    'Define::ListHandle::psReadable::pvProtected::0::' +    'Define::MaxLength::psReadable..psWritable::pvProtected::0::' +    'Override::ParentColor::::pvProtected::' +    'Define::Sorted::psReadable..psWritable::pvProtected::0::' +    'Define::Style::psReadable..psWritable::pvProtected::0::' +    'Define::CharCase::psReadable..psWritable::pvPublic::0::' +    'Define::Canvas::psReadable::pvPublic::0::' +    'Define::DroppedDown::psReadable..psWritable::pvPublic::0::' +    'Define::Items::psReadable..psWritable::pvPublic::0::' +    'Define::ItemIndex::psReadable..psWritable::pvPublic::0::' +    'Define::SelLength::psReadable..psWritable::pvPublic::0::' +    'Define::SelStart::psReadable..psWritable::pvPublic::0::' +    'Define::SelText::psReadable..psWritable::pvPublic::0::' +    'Override::TabStop::::pvPublished';  TCustomComboBoxMethods: String =     'Clear::msProcedure::0::' +    'SelectAll::msProcedure::0';  TCustomComboBoxConstructors: String =     '';  TCustomComboBoxEvents: String =     'Define::OnChange::pvProtected::1::Sender::' +    'Define::OnDropDown::pvProtected::1::Sender::' +    'Define::OnDrawItem::pvProtected::4::Control::Index::Rect::State::' +    'Define::OnMeasureItem::pvProtected::3::Control::Index::Height';  TComboBoxProperties: String =     'Override::Style::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::DropDownCount::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ImeMode::::pvPublished::' +    'Override::ImeName::::pvPublished::' +    'Override::ItemHeight::::pvPublished::' +    'Override::MaxLength::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::Sorted::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Text::::pvPublished::' +    'Override::Visible::::pvPublished::' +    'Override::Items::::pvPublished';  TComboBoxMethods: String =     '';  TComboBoxConstructors: String =     '';  TComboBoxEvents: String =     'Override::OnChange::pvPublished::' +    'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnDrawItem::pvPublished::' +    'Override::OnDropDown::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMeasureItem::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TButtonActionLinkProperties: String =     '';  TButtonActionLinkMethods: String =     '';  TButtonActionLinkConstructors: String =     '';  TButtonActionLinkEvents: String =     '';  TButtonControlProperties: String =     'Define::Checked::psReadable..psWritable::pvProtected::0::' +    'Define::ClicksDisabled::psReadable..psWritable::pvProtected::0';  TButtonControlMethods: String =     '';  TButtonControlConstructors: String =     '';  TButtonControlEvents: String =     '';  TButtonProperties: String =     'Override::Action::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Define::Cancel::psReadable..psWritable::pvPublished::0::' +    'Override::Caption::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Define::Default::psReadable..psWritable::pvPublished::0::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Define::ModalResult::psReadable..psWritable::pvPublished::0::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TButtonMethods: String =     '';  TButtonConstructors: String =     '';  TButtonEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomCheckBoxProperties: String =     'Define::Alignment::psReadable..psWritable::pvProtected::0::' +    'Define::AllowGrayed::psReadable..psWritable::pvProtected::0::' +    'Define::State::psReadable..psWritable::pvProtected::0::' +    'Override::TabStop::::pvPublished';  TCustomCheckBoxMethods: String =     '';  TCustomCheckBoxConstructors: String =     '';  TCustomCheckBoxEvents: String =     '';  TCheckBoxProperties: String =     'Override::Action::::pvPublished::' +    'Override::Alignment::::pvPublished::' +    'Override::AllowGrayed::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Caption::::pvPublished::' +    'Override::Checked::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::State::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TCheckBoxMethods: String =     '';  TCheckBoxConstructors: String =     '';  TCheckBoxEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TRadioButtonProperties: String =     'Override::Action::::pvPublished::' +    'Define::Alignment::psReadable..psWritable::pvPublished::0::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Caption::::pvPublished::' +    'Override::Checked::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TRadioButtonMethods: String =     '';  TRadioButtonConstructors: String =     '';  TRadioButtonEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomListBoxProperties: String =     'Define::BorderStyle::psReadable..psWritable::pvProtected::0::' +    'Define::Columns::psReadable..psWritable::pvProtected::0::' +    'Define::ExtendedSelect::psReadable..psWritable::pvProtected::0::' +    'Define::IntegralHeight::psReadable..psWritable::pvProtected::0::' +    'Define::ItemHeight::psReadable..psWritable::pvProtected::0::' +    'Define::MultiSelect::psReadable..psWritable::pvProtected::0::' +    'Override::ParentColor::::pvProtected::' +    'Define::Sorted::psReadable..psWritable::pvProtected::0::' +    'Define::Style::psReadable..psWritable::pvProtected::0::' +    'Define::TabWidth::psReadable..psWritable::pvProtected::0::' +    'Define::Canvas::psReadable::pvPublic::0::' +    'Define::Items::psReadable..psWritable::pvPublic::0::' +    'Define::ItemIndex::psReadable..psWritable::pvPublic::0::' +    'Define::SelCount::psReadable::pvPublic::0::' +    'Define::Selected::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::TopIndex::psReadable..psWritable::pvPublic::0::' +    'Override::TabStop::::pvPublished';  TCustomListBoxMethods: String =     'Clear::msProcedure::0::' +    'ItemAtPos::msFunction::2::Pos::Existing::' +    'ItemRect::msFunction::1::Index';  TCustomListBoxConstructors: String =     '';  TCustomListBoxEvents: String =     'Define::OnDrawItem::pvProtected::4::Control::Index::Rect::State::' +    'Define::OnMeasureItem::pvProtected::3::Control::Index::Height';  TListBoxProperties: String =     'Override::Align::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::BorderStyle::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Columns::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::ExtendedSelect::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ImeMode::::pvPublished::' +    'Override::ImeName::::pvPublished::' +    'Override::IntegralHeight::::pvPublished::' +    'Override::ItemHeight::::pvPublished::' +    'Override::Items::::pvPublished::' +    'Override::MultiSelect::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::Sorted::::pvPublished::' +    'Override::Style::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::TabWidth::::pvPublished::' +    'Override::Visible::::pvPublished';  TListBoxMethods: String =     '';  TListBoxConstructors: String =     '';  TListBoxEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnDrawItem::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Override::OnMeasureItem::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TScrollBarProperties: String =     'Override::Align::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::Ctl3D::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Define::Kind::psReadable..psWritable::pvPublished::0::' +    'Define::LargeChange::psReadable..psWritable::pvPublished::0::' +    'Define::Max::psReadable..psWritable::pvPublished::0::' +    'Define::Min::psReadable..psWritable::pvPublished::0::' +    'Define::PageSize::psReadable..psWritable::pvPublished::0::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentCtl3D::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Define::Position::psReadable..psWritable::pvPublished::0::' +    'Override::ShowHint::::pvPublished::' +    'Define::SmallChange::psReadable..psWritable::pvPublished::0::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TScrollBarMethods: String =     'SetParams::msProcedure::3::APosition::AMin::AMax';  TScrollBarConstructors: String =     '';  TScrollBarEvents: String =     'Override::OnContextPopup::pvPublished::' +    'Define::OnChange::pvPublished::1::Sender::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnEnter::pvPublished::' +    'Override::OnExit::pvPublished::' +    'Override::OnKeyDown::pvPublished::' +    'Override::OnKeyPress::pvPublished::' +    'Override::OnKeyUp::pvPublished::' +    'Define::OnScroll::pvPublished::3::Sender::ScrollCode::ScrollPos::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';  TCustomStaticTextProperties: String =     'Define::Alignment::psReadable..psWritable::pvProtected::0::' +    'Define::AutoSize::psReadable..psWritable::pvProtected::0::' +    'Define::BorderStyle::psReadable..psWritable::pvProtected::0::' +    'Define::FocusControl::psReadable..psWritable::pvProtected::0::' +    'Define::ShowAccelChar::psReadable..psWritable::pvProtected::0';  TCustomStaticTextMethods: String =     '';  TCustomStaticTextConstructors: String =     '';  TCustomStaticTextEvents: String =     '';  TStaticTextProperties: String =     'Override::Align::::pvPublished::' +    'Override::Alignment::::pvPublished::' +    'Override::Anchors::::pvPublished::' +    'Override::AutoSize::::pvPublished::' +    'Override::BiDiMode::::pvPublished::' +    'Override::BorderStyle::::pvPublished::' +    'Override::Caption::::pvPublished::' +    'Override::Color::::pvPublished::' +    'Override::Constraints::::pvPublished::' +    'Override::DragCursor::::pvPublished::' +    'Override::DragKind::::pvPublished::' +    'Override::DragMode::::pvPublished::' +    'Override::Enabled::::pvPublished::' +    'Override::FocusControl::::pvPublished::' +    'Override::Font::::pvPublished::' +    'Override::ParentBiDiMode::::pvPublished::' +    'Override::ParentColor::::pvPublished::' +    'Override::ParentFont::::pvPublished::' +    'Override::ParentShowHint::::pvPublished::' +    'Override::PopupMenu::::pvPublished::' +    'Override::ShowAccelChar::::pvPublished::' +    'Override::ShowHint::::pvPublished::' +    'Override::TabOrder::::pvPublished::' +    'Override::TabStop::::pvPublished::' +    'Override::Visible::::pvPublished';  TStaticTextMethods: String =     '';  TStaticTextConstructors: String =     '';  TStaticTextEvents: String =     'Override::OnClick::pvPublished::' +    'Override::OnContextPopup::pvPublished::' +    'Override::OnDblClick::pvPublished::' +    'Override::OnDragDrop::pvPublished::' +    'Override::OnDragOver::pvPublished::' +    'Override::OnEndDock::pvPublished::' +    'Override::OnEndDrag::pvPublished::' +    'Override::OnMouseDown::pvPublished::' +    'Override::OnMouseMove::pvPublished::' +    'Override::OnMouseUp::pvPublished::' +    'Override::OnStartDock::pvPublished::' +    'Override::OnStartDrag::pvPublished';procedure TCustomGroupBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomGroupBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomGroupBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomGroupBoxProperties);end;procedure TCustomGroupBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomGroupBoxMethods);end;procedure TCustomGroupBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomGroupBoxConstructors);end;procedure TCustomGroupBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomGroupBoxEvents);end;function TCustomGroupBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TCustomGroupBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TCustomGroupBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomGroupBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TGroupBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TGroupBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TGroupBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TGroupBoxProperties);end;procedure TGroupBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TGroupBoxMethods);end;procedure TGroupBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TGroupBoxConstructors);end;procedure TGroupBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TGroupBoxEvents);end;function TGroupBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TGroupBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TGroupBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TGroupBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomLabelClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomLabelClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomLabelClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomLabelProperties);end;procedure TCustomLabelClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomLabelMethods);end;procedure TCustomLabelClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomLabelConstructors);end;procedure TCustomLabelClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomLabelEvents);end;function TCustomLabelClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Alignment' then begin    Result := TProtectedTCustomLabel(Owner).Alignment;  end else if Prop.Name = 'AutoSize' then begin    Result := TProtectedTCustomLabel(Owner).AutoSize;  end else if Prop.Name = 'FocusControl' then begin    Result := Longint(TProtectedTCustomLabel(Owner).FocusControl);  end else if Prop.Name = 'ShowAccelChar' then begin    Result := TProtectedTCustomLabel(Owner).ShowAccelChar;  end else if Prop.Name = 'Transparent' then begin    Result := TProtectedTCustomLabel(Owner).Transparent;  end else if Prop.Name = 'Layout' then begin    Result := TProtectedTCustomLabel(Owner).Layout;  end else if Prop.Name = 'WordWrap' then begin    Result := TProtectedTCustomLabel(Owner).WordWrap;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomLabelClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Alignment' then begin    TProtectedTCustomLabel(Owner).Alignment := Value;  end else if Prop.Name = 'AutoSize' then begin    TProtectedTCustomLabel(Owner).AutoSize := Value;  end else if Prop.Name = 'FocusControl' then begin    TProtectedTCustomLabel(Owner).FocusControl := TWinControl(Longint(Value));  end else if Prop.Name = 'ShowAccelChar' then begin    TProtectedTCustomLabel(Owner).ShowAccelChar := Value;  end else if Prop.Name = 'Transparent' then begin    TProtectedTCustomLabel(Owner).Transparent := Value;  end else if Prop.Name = 'Layout' then begin    TProtectedTCustomLabel(Owner).Layout := Value;  end else if Prop.Name = 'WordWrap' then begin    TProtectedTCustomLabel(Owner).WordWrap := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomLabelClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomLabelClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TLabelClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TLabelClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TLabelClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TLabelProperties);end;procedure TLabelClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TLabelMethods);end;procedure TLabelClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TLabelConstructors);end;procedure TLabelClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TLabelEvents);end;function TLabelClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TLabelClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TLabelClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TLabelClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomEditClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTCustomEdit(Owner).OnChange;  TProtectedTCustomEdit(Owner).OnChange := OnChange;end;procedure TCustomEditClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomEdit(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TCustomEditClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TCustomEditClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomEditProperties);end;procedure TCustomEditClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomEditMethods);end;procedure TCustomEditClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomEditConstructors);end;procedure TCustomEditClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomEditEvents);end;function TCustomEditClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'AutoSelect' then begin    Result := TProtectedTCustomEdit(Owner).AutoSelect;  end else if Prop.Name = 'AutoSize' then begin    Result := TProtectedTCustomEdit(Owner).AutoSize;  end else if Prop.Name = 'BorderStyle' then begin    Result := TProtectedTCustomEdit(Owner).BorderStyle;  end else if Prop.Name = 'CharCase' then begin    Result := TProtectedTCustomEdit(Owner).CharCase;  end else if Prop.Name = 'HideSelection' then begin    Result := TProtectedTCustomEdit(Owner).HideSelection;  end else if Prop.Name = 'MaxLength' then begin    Result := TProtectedTCustomEdit(Owner).MaxLength;  end else if Prop.Name = 'OEMConvert' then begin    Result := TProtectedTCustomEdit(Owner).OEMConvert;  end else if Prop.Name = 'PasswordChar' then begin    Result := '' + TProtectedTCustomEdit(Owner).PasswordChar;  end else if Prop.Name = 'ReadOnly' then begin    Result := TProtectedTCustomEdit(Owner).ReadOnly;  end else if Prop.Name = 'CanUndo' then begin    Result := TProtectedTCustomEdit(Owner).CanUndo;  end else if Prop.Name = 'Modified' then begin    Result := TProtectedTCustomEdit(Owner).Modified;  end else if Prop.Name = 'SelLength' then begin    Result := TProtectedTCustomEdit(Owner).SelLength;  end else if Prop.Name = 'SelStart' then begin    Result := TProtectedTCustomEdit(Owner).SelStart;  end else if Prop.Name = 'SelText' then begin    Result := TProtectedTCustomEdit(Owner).SelText;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomEditClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'AutoSelect' then begin    TProtectedTCustomEdit(Owner).AutoSelect := Value;  end else if Prop.Name = 'AutoSize' then begin    TProtectedTCustomEdit(Owner).AutoSize := Value;  end else if Prop.Name = 'BorderStyle' then begin    TProtectedTCustomEdit(Owner).BorderStyle := Value;  end else if Prop.Name = 'CharCase' then begin    TProtectedTCustomEdit(Owner).CharCase := Value;  end else if Prop.Name = 'HideSelection' then begin    TProtectedTCustomEdit(Owner).HideSelection := Value;  end else if Prop.Name = 'MaxLength' then begin    TProtectedTCustomEdit(Owner).MaxLength := Value;  end else if Prop.Name = 'OEMConvert' then begin    TProtectedTCustomEdit(Owner).OEMConvert := Value;  end else if Prop.Name = 'PasswordChar' then begin    TProtectedTCustomEdit(Owner).PasswordChar := String(Value)[1];  end else if Prop.Name = 'ReadOnly' then begin    TProtectedTCustomEdit(Owner).ReadOnly := Value;  end else if Prop.Name = 'Modified' then begin    TProtectedTCustomEdit(Owner).Modified := Value;  end else if Prop.Name = 'SelLength' then begin    TProtectedTCustomEdit(Owner).SelLength := Value;  end else if Prop.Name = 'SelStart' then begin    TProtectedTCustomEdit(Owner).SelStart := Value;  end else if Prop.Name = 'SelText' then begin    TProtectedTCustomEdit(Owner).SelText := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomEditClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Clear' then begin    TProtectedTCustomEdit(Owner).Clear();  end else if Method.Name = 'ClearSelection' then begin    TProtectedTCustomEdit(Owner).ClearSelection();  end else if Method.Name = 'CopyToClipboard' then begin    TProtectedTCustomEdit(Owner).CopyToClipboard();  end else if Method.Name = 'CutToClipboard' then begin    TProtectedTCustomEdit(Owner).CutToClipboard();  end else if Method.Name = 'PasteFromClipboard' then begin    TProtectedTCustomEdit(Owner).PasteFromClipboard();  end else if Method.Name = 'Undo' then begin    TProtectedTCustomEdit(Owner).Undo();  end else if Method.Name = 'ClearUndo' then begin    TProtectedTCustomEdit(Owner).ClearUndo();  end else if Method.Name = 'GetSelTextBuf' then begin    TProtectedTCustomEdit(Owner).GetSelTextBuf(PChar(Longint(Method.Args[0].Value)), Method.Args[1].Value);  end else if Method.Name = 'SelectAll' then begin    TProtectedTCustomEdit(Owner).SelectAll();  end else if Method.Name = 'SetSelTextBuf' then begin    TProtectedTCustomEdit(Owner).SetSelTextBuf(PChar(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TCustomEditClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TEditClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TEditClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TEditClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TEditProperties);end;procedure TEditClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TEditMethods);end;procedure TEditClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TEditConstructors);end;procedure TEditClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TEditEvents);end;function TEditClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TEditClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TEditClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TEditClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomMemoClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomMemoClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomMemoClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomMemoProperties);end;procedure TCustomMemoClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomMemoMethods);end;procedure TCustomMemoClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomMemoConstructors);end;procedure TCustomMemoClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomMemoEvents);end;function TCustomMemoClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Alignment' then begin    Result := TProtectedTCustomMemo(Owner).Alignment;  end else if Prop.Name = 'ScrollBars' then begin    Result := TProtectedTCustomMemo(Owner).ScrollBars;  end else if Prop.Name = 'WantReturns' then begin    Result := TProtectedTCustomMemo(Owner).WantReturns;  end else if Prop.Name = 'WantTabs' then begin    Result := TProtectedTCustomMemo(Owner).WantTabs;  end else if Prop.Name = 'WordWrap' then begin    Result := TProtectedTCustomMemo(Owner).WordWrap;  end else if Prop.Name = 'CaretPos' then begin    _Prop_CaretPos := TProtectedTCustomMemo(Owner).CaretPos;    Result := Longint(@_Prop_CaretPos);  end else if Prop.Name = 'Lines' then begin    Result := Longint(TProtectedTCustomMemo(Owner).Lines);  end else    Result := inherited GetProperty(Prop);end;procedure TCustomMemoClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Alignment' then begin    TProtectedTCustomMemo(Owner).Alignment := Value;  end else if Prop.Name = 'ScrollBars' then begin    TProtectedTCustomMemo(Owner).ScrollBars := Value;  end else if Prop.Name = 'WantReturns' then begin    TProtectedTCustomMemo(Owner).WantReturns := Value;  end else if Prop.Name = 'WantTabs' then begin    TProtectedTCustomMemo(Owner).WantTabs := Value;  end else if Prop.Name = 'WordWrap' then begin    TProtectedTCustomMemo(Owner).WordWrap := Value;  end else if Prop.Name = 'Lines' then begin    TProtectedTCustomMemo(Owner).Lines := TStrings(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TCustomMemoClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomMemoClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMemoClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMemoClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMemoClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMemoProperties);end;procedure TMemoClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMemoMethods);end;procedure TMemoClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMemoConstructors);end;procedure TMemoClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMemoEvents);end;function TMemoClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TMemoClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TMemoClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TMemoClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomComboBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTCustomComboBox(Owner).OnChange;  TProtectedTCustomComboBox(Owner).OnChange := OnChange;  _Event_OnDropDown := TProtectedTCustomComboBox(Owner).OnDropDown;  TProtectedTCustomComboBox(Owner).OnDropDown := OnDropDown;  _Event_OnDrawItem := TProtectedTCustomComboBox(Owner).OnDrawItem;  TProtectedTCustomComboBox(Owner).OnDrawItem := OnDrawItem;  _Event_OnMeasureItem := TProtectedTCustomComboBox(Owner).OnMeasureItem;  TProtectedTCustomComboBox(Owner).OnMeasureItem := OnMeasureItem;end;procedure TCustomComboBoxClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomComboBox(Owner).OnChange := _Event_OnChange;  TProtectedTCustomComboBox(Owner).OnDropDown := _Event_OnDropDown;  TProtectedTCustomComboBox(Owner).OnDrawItem := _Event_OnDrawItem;  TProtectedTCustomComboBox(Owner).OnMeasureItem := _Event_OnMeasureItem;  inherited UnConnectEventHandlers;end;procedure TCustomComboBoxClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TCustomComboBoxClassInfo.OnDropDown(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnDropDown');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnDropDown) then _Event_OnDropDown(Sender);  FireEvent(_E);end;procedure TCustomComboBoxClassInfo.OnDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);var  _E: TradEventInfo;begin  _E := FindEvent('OnDrawItem');  _E.Args[0].Value := Longint(Control);  _E.Args[1].Value := Index;  _E.Args[2].Value := Longint(@Rect);  _E.Args[3].Value := Longint(@State);  if Assigned(_Event_OnDrawItem) then _Event_OnDrawItem(Control, Index, Rect, State);  FireEvent(_E);end;procedure TCustomComboBoxClassInfo.OnMeasureItem(Control: TWinControl; Index: Integer; var Height: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnMeasureItem');  _E.Args[0].Value := Longint(Control);  _E.Args[1].Value := Index;  _E.Args[2].Value := Height;  if Assigned(_Event_OnMeasureItem) then _Event_OnMeasureItem(Control, Index, Height);  FireEvent(_E);  Height := _E.Args[2].Value;end;procedure TCustomComboBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomComboBoxProperties);end;procedure TCustomComboBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomComboBoxMethods);end;procedure TCustomComboBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomComboBoxConstructors);end;procedure TCustomComboBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomComboBoxEvents);end;function TCustomComboBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'DropDownCount' then begin    Result := TProtectedTCustomComboBox(Owner).DropDownCount;  end else if Prop.Name = 'EditHandle' then begin    _Prop_EditHandle := TProtectedTCustomComboBox(Owner).EditHandle;    Result := Longint(@_Prop_EditHandle);  end else if Prop.Name = 'ItemHeight' then begin    Result := TProtectedTCustomComboBox(Owner).ItemHeight;  end else if Prop.Name = 'ListHandle' then begin    _Prop_ListHandle := TProtectedTCustomComboBox(Owner).ListHandle;    Result := Longint(@_Prop_ListHandle);  end else if Prop.Name = 'MaxLength' then begin    Result := TProtectedTCustomComboBox(Owner).MaxLength;  end else if Prop.Name = 'Sorted' then begin    Result := TProtectedTCustomComboBox(Owner).Sorted;  end else if Prop.Name = 'Style' then begin    Result := TProtectedTCustomComboBox(Owner).Style;  end else if Prop.Name = 'CharCase' then begin    Result := TProtectedTCustomComboBox(Owner).CharCase;  end else if Prop.Name = 'Canvas' then begin    Result := Longint(TProtectedTCustomComboBox(Owner).Canvas);  end else if Prop.Name = 'DroppedDown' then begin    Result := TProtectedTCustomComboBox(Owner).DroppedDown;  end else if Prop.Name = 'Items' then begin    Result := Longint(TProtectedTCustomComboBox(Owner).Items);  end else if Prop.Name = 'ItemIndex' then begin    Result := TProtectedTCustomComboBox(Owner).ItemIndex;  end else if Prop.Name = 'SelLength' then begin    Result := TProtectedTCustomComboBox(Owner).SelLength;  end else if Prop.Name = 'SelStart' then begin    Result := TProtectedTCustomComboBox(Owner).SelStart;  end else if Prop.Name = 'SelText' then begin    Result := TProtectedTCustomComboBox(Owner).SelText;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomComboBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'DropDownCount' then begin    TProtectedTCustomComboBox(Owner).DropDownCount := Value;  end else if Prop.Name = 'ItemHeight' then begin    TProtectedTCustomComboBox(Owner).ItemHeight := Value;  end else if Prop.Name = 'MaxLength' then begin    TProtectedTCustomComboBox(Owner).MaxLength := Value;  end else if Prop.Name = 'Sorted' then begin    TProtectedTCustomComboBox(Owner).Sorted := Value;  end else if Prop.Name = 'Style' then begin    TProtectedTCustomComboBox(Owner).Style := Value;  end else if Prop.Name = 'CharCase' then begin    TProtectedTCustomComboBox(Owner).CharCase := Value;  end else if Prop.Name = 'DroppedDown' then begin    TProtectedTCustomComboBox(Owner).DroppedDown := Value;  end else if Prop.Name = 'Items' then begin    TProtectedTCustomComboBox(Owner).Items := TStrings(Longint(Value));  end else if Prop.Name = 'ItemIndex' then begin    TProtectedTCustomComboBox(Owner).ItemIndex := Value;  end else if Prop.Name = 'SelLength' then begin    TProtectedTCustomComboBox(Owner).SelLength := Value;  end else if Prop.Name = 'SelStart' then begin    TProtectedTCustomComboBox(Owner).SelStart := Value;  end else if Prop.Name = 'SelText' then begin    TProtectedTCustomComboBox(Owner).SelText := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomComboBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Clear' then begin    TProtectedTCustomComboBox(Owner).Clear();  end else if Method.Name = 'SelectAll' then begin    TProtectedTCustomComboBox(Owner).SelectAll();  end else    inherited InvokeMethod(Method);end;procedure TCustomComboBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TComboBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TComboBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TComboBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TComboBoxProperties);end;procedure TComboBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TComboBoxMethods);end;procedure TComboBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TComboBoxConstructors);end;procedure TComboBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TComboBoxEvents);end;function TComboBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TComboBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TComboBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TComboBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TButtonActionLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TButtonActionLinkClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TButtonActionLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TButtonActionLinkProperties);end;procedure TButtonActionLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TButtonActionLinkMethods);end;procedure TButtonActionLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TButtonActionLinkConstructors);end;procedure TButtonActionLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TButtonActionLinkEvents);end;function TButtonActionLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TButtonActionLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TButtonActionLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TButtonActionLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TButtonControlClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TButtonControlClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TButtonControlClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TButtonControlProperties);end;procedure TButtonControlClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TButtonControlMethods);end;procedure TButtonControlClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TButtonControlConstructors);end;procedure TButtonControlClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TButtonControlEvents);end;function TButtonControlClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Checked' then begin    Result := TProtectedTButtonControl(Owner).Checked;  end else if Prop.Name = 'ClicksDisabled' then begin    Result := TProtectedTButtonControl(Owner).ClicksDisabled;  end else    Result := inherited GetProperty(Prop);end;procedure TButtonControlClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Checked' then begin    TProtectedTButtonControl(Owner).Checked := Value;  end else if Prop.Name = 'ClicksDisabled' then begin    TProtectedTButtonControl(Owner).ClicksDisabled := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TButtonControlClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TButtonControlClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TButtonClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TButtonClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TButtonClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TButtonProperties);end;procedure TButtonClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TButtonMethods);end;procedure TButtonClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TButtonConstructors);end;procedure TButtonClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TButtonEvents);end;function TButtonClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Cancel' then begin    Result := TProtectedTButton(Owner).Cancel;  end else if Prop.Name = 'Default' then begin    Result := TProtectedTButton(Owner).Default;  end else if Prop.Name = 'ModalResult' then begin    Result := TProtectedTButton(Owner).ModalResult;  end else    Result := inherited GetProperty(Prop);end;procedure TButtonClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Cancel' then begin    TProtectedTButton(Owner).Cancel := Value;  end else if Prop.Name = 'Default' then begin    TProtectedTButton(Owner).Default := Value;  end else if Prop.Name = 'ModalResult' then begin    TProtectedTButton(Owner).ModalResult := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TButtonClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TButtonClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomCheckBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomCheckBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomCheckBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomCheckBoxProperties);end;procedure TCustomCheckBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomCheckBoxMethods);end;procedure TCustomCheckBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomCheckBoxConstructors);end;procedure TCustomCheckBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomCheckBoxEvents);end;function TCustomCheckBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Alignment' then begin    Result := TProtectedTCustomCheckBox(Owner).Alignment;  end else if Prop.Name = 'AllowGrayed' then begin    Result := TProtectedTCustomCheckBox(Owner).AllowGrayed;  end else if Prop.Name = 'State' then begin    Result := TProtectedTCustomCheckBox(Owner).State;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomCheckBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Alignment' then begin    TProtectedTCustomCheckBox(Owner).Alignment := Value;  end else if Prop.Name = 'AllowGrayed' then begin    TProtectedTCustomCheckBox(Owner).AllowGrayed := Value;  end else if Prop.Name = 'State' then begin    TProtectedTCustomCheckBox(Owner).State := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomCheckBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomCheckBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCheckBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCheckBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCheckBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCheckBoxProperties);end;procedure TCheckBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCheckBoxMethods);end;procedure TCheckBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCheckBoxConstructors);end;procedure TCheckBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCheckBoxEvents);end;function TCheckBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TCheckBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TCheckBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCheckBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TRadioButtonClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TRadioButtonClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TRadioButtonClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TRadioButtonProperties);end;procedure TRadioButtonClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TRadioButtonMethods);end;procedure TRadioButtonClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TRadioButtonConstructors);end;procedure TRadioButtonClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TRadioButtonEvents);end;function TRadioButtonClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Alignment' then begin    Result := TProtectedTRadioButton(Owner).Alignment;  end else    Result := inherited GetProperty(Prop);end;procedure TRadioButtonClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Alignment' then begin    TProtectedTRadioButton(Owner).Alignment := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TRadioButtonClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TRadioButtonClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomListBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnDrawItem := TProtectedTCustomListBox(Owner).OnDrawItem;  TProtectedTCustomListBox(Owner).OnDrawItem := OnDrawItem;  _Event_OnMeasureItem := TProtectedTCustomListBox(Owner).OnMeasureItem;  TProtectedTCustomListBox(Owner).OnMeasureItem := OnMeasureItem;end;procedure TCustomListBoxClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomListBox(Owner).OnDrawItem := _Event_OnDrawItem;  TProtectedTCustomListBox(Owner).OnMeasureItem := _Event_OnMeasureItem;  inherited UnConnectEventHandlers;end;procedure TCustomListBoxClassInfo.OnDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);var  _E: TradEventInfo;begin  _E := FindEvent('OnDrawItem');  _E.Args[0].Value := Longint(Control);  _E.Args[1].Value := Index;  _E.Args[2].Value := Longint(@Rect);  _E.Args[3].Value := Longint(@State);  if Assigned(_Event_OnDrawItem) then _Event_OnDrawItem(Control, Index, Rect, State);  FireEvent(_E);end;procedure TCustomListBoxClassInfo.OnMeasureItem(Control: TWinControl; Index: Integer; var Height: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnMeasureItem');  _E.Args[0].Value := Longint(Control);  _E.Args[1].Value := Index;  _E.Args[2].Value := Height;  if Assigned(_Event_OnMeasureItem) then _Event_OnMeasureItem(Control, Index, Height);  FireEvent(_E);  Height := _E.Args[2].Value;end;procedure TCustomListBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomListBoxProperties);end;procedure TCustomListBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomListBoxMethods);end;procedure TCustomListBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomListBoxConstructors);end;procedure TCustomListBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomListBoxEvents);end;function TCustomListBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'BorderStyle' then begin    Result := TProtectedTCustomListBox(Owner).BorderStyle;  end else if Prop.Name = 'Columns' then begin    Result := TProtectedTCustomListBox(Owner).Columns;  end else if Prop.Name = 'ExtendedSelect' then begin    Result := TProtectedTCustomListBox(Owner).ExtendedSelect;  end else if Prop.Name = 'IntegralHeight' then begin    Result := TProtectedTCustomListBox(Owner).IntegralHeight;  end else if Prop.Name = 'ItemHeight' then begin    Result := TProtectedTCustomListBox(Owner).ItemHeight;  end else if Prop.Name = 'MultiSelect' then begin    Result := TProtectedTCustomListBox(Owner).MultiSelect;  end else if Prop.Name = 'Sorted' then begin    Result := TProtectedTCustomListBox(Owner).Sorted;  end else if Prop.Name = 'Style' then begin    Result := TProtectedTCustomListBox(Owner).Style;  end else if Prop.Name = 'TabWidth' then begin    Result := TProtectedTCustomListBox(Owner).TabWidth;  end else if Prop.Name = 'Canvas' then begin    Result := Longint(TProtectedTCustomListBox(Owner).Canvas);  end else if Prop.Name = 'Items' then begin    Result := Longint(TProtectedTCustomListBox(Owner).Items);  end else if Prop.Name = 'ItemIndex' then begin    Result := TProtectedTCustomListBox(Owner).ItemIndex;  end else if Prop.Name = 'SelCount' then begin    Result := TProtectedTCustomListBox(Owner).SelCount;  end else if Prop.Name = 'Selected' then begin    Result := TProtectedTCustomListBox(Owner).Selected[Prop.Indexes[0].Value];  end else if Prop.Name = 'TopIndex' then begin    Result := TProtectedTCustomListBox(Owner).TopIndex;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomListBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'BorderStyle' then begin    TProtectedTCustomListBox(Owner).BorderStyle := Value;  end else if Prop.Name = 'Columns' then begin    TProtectedTCustomListBox(Owner).Columns := Value;  end else if Prop.Name = 'ExtendedSelect' then begin    TProtectedTCustomListBox(Owner).ExtendedSelect := Value;  end else if Prop.Name = 'IntegralHeight' then begin    TProtectedTCustomListBox(Owner).IntegralHeight := Value;  end else if Prop.Name = 'ItemHeight' then begin    TProtectedTCustomListBox(Owner).ItemHeight := Value;  end else if Prop.Name = 'MultiSelect' then begin    TProtectedTCustomListBox(Owner).MultiSelect := Value;  end else if Prop.Name = 'Sorted' then begin    TProtectedTCustomListBox(Owner).Sorted := Value;  end else if Prop.Name = 'Style' then begin    TProtectedTCustomListBox(Owner).Style := Value;  end else if Prop.Name = 'TabWidth' then begin    TProtectedTCustomListBox(Owner).TabWidth := Value;  end else if Prop.Name = 'Items' then begin    TProtectedTCustomListBox(Owner).Items := TStrings(Longint(Value));  end else if Prop.Name = 'ItemIndex' then begin    TProtectedTCustomListBox(Owner).ItemIndex := Value;  end else if Prop.Name = 'Selected' then begin    TProtectedTCustomListBox(Owner).Selected[Prop.Indexes[0].Value] := Value;  end else if Prop.Name = 'TopIndex' then begin    TProtectedTCustomListBox(Owner).TopIndex := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomListBoxClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_ItemAtPos_Pos: ^TPoint;begin  if Method.Name = 'Clear' then begin    TProtectedTCustomListBox(Owner).Clear();  end else if Method.Name = 'ItemAtPos' then begin    _Param_ItemAtPos_Pos := Pointer(Longint(Method.Args[0].Value));    TProtectedTCustomListBox(Owner).ItemAtPos(_Param_ItemAtPos_Pos^, Method.Args[1].Value);  end else if Method.Name = 'ItemRect' then begin    _MethodRes_ItemRect := TProtectedTCustomListBox(Owner).ItemRect(Method.Args[0].Value);    Method.Result := Longint(@_MethodRes_ItemRect);  end else    inherited InvokeMethod(Method);end;procedure TCustomListBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TListBoxClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TListBoxClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TListBoxClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TListBoxProperties);end;procedure TListBoxClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TListBoxMethods);end;procedure TListBoxClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TListBoxConstructors);end;procedure TListBoxClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TListBoxEvents);end;function TListBoxClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TListBoxClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TListBoxClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TListBoxClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TScrollBarClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTScrollBar(Owner).OnChange;  TProtectedTScrollBar(Owner).OnChange := OnChange;  _Event_OnScroll := TProtectedTScrollBar(Owner).OnScroll;  TProtectedTScrollBar(Owner).OnScroll := OnScroll;end;procedure TScrollBarClassInfo.UnConnectEventHandlers;begin  TProtectedTScrollBar(Owner).OnChange := _Event_OnChange;  TProtectedTScrollBar(Owner).OnScroll := _Event_OnScroll;  inherited UnConnectEventHandlers;end;procedure TScrollBarClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TScrollBarClassInfo.OnScroll(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);var  _E: TradEventInfo;begin  _E := FindEvent('OnScroll');  _E.Args[0].Value := Longint(Sender);  _E.Args[1].Value := ScrollCode;  _E.Args[2].Value := ScrollPos;  if Assigned(_Event_OnScroll) then _Event_OnScroll(Sender, ScrollCode, ScrollPos);  FireEvent(_E);  ScrollPos := _E.Args[2].Value;end;procedure TScrollBarClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TScrollBarProperties);end;procedure TScrollBarClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TScrollBarMethods);end;procedure TScrollBarClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TScrollBarConstructors);end;procedure TScrollBarClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TScrollBarEvents);end;function TScrollBarClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Kind' then begin    Result := TProtectedTScrollBar(Owner).Kind;  end else if Prop.Name = 'LargeChange' then begin    Result := TProtectedTScrollBar(Owner).LargeChange;  end else if Prop.Name = 'Max' then begin    Result := TProtectedTScrollBar(Owner).Max;  end else if Prop.Name = 'Min' then begin    Result := TProtectedTScrollBar(Owner).Min;  end else if Prop.Name = 'PageSize' then begin    Result := TProtectedTScrollBar(Owner).PageSize;  end else if Prop.Name = 'Position' then begin    Result := TProtectedTScrollBar(Owner).Position;  end else if Prop.Name = 'SmallChange' then begin    Result := TProtectedTScrollBar(Owner).SmallChange;  end else    Result := inherited GetProperty(Prop);end;procedure TScrollBarClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Kind' then begin    TProtectedTScrollBar(Owner).Kind := Value;  end else if Prop.Name = 'LargeChange' then begin    TProtectedTScrollBar(Owner).LargeChange := Value;  end else if Prop.Name = 'Max' then begin    TProtectedTScrollBar(Owner).Max := Value;  end else if Prop.Name = 'Min' then begin    TProtectedTScrollBar(Owner).Min := Value;  end else if Prop.Name = 'PageSize' then begin    TProtectedTScrollBar(Owner).PageSize := Value;  end else if Prop.Name = 'Position' then begin    TProtectedTScrollBar(Owner).Position := Value;  end else if Prop.Name = 'SmallChange' then begin    TProtectedTScrollBar(Owner).SmallChange := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TScrollBarClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'SetParams' then begin    TProtectedTScrollBar(Owner).SetParams(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value);  end else    inherited InvokeMethod(Method);end;procedure TScrollBarClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomStaticTextClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomStaticTextClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomStaticTextClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomStaticTextProperties);end;procedure TCustomStaticTextClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomStaticTextMethods);end;procedure TCustomStaticTextClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomStaticTextConstructors);end;procedure TCustomStaticTextClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomStaticTextEvents);end;function TCustomStaticTextClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Alignment' then begin    Result := TProtectedTCustomStaticText(Owner).Alignment;  end else if Prop.Name = 'AutoSize' then begin    Result := TProtectedTCustomStaticText(Owner).AutoSize;  end else if Prop.Name = 'BorderStyle' then begin    Result := TProtectedTCustomStaticText(Owner).BorderStyle;  end else if Prop.Name = 'FocusControl' then begin    Result := Longint(TProtectedTCustomStaticText(Owner).FocusControl);  end else if Prop.Name = 'ShowAccelChar' then begin    Result := TProtectedTCustomStaticText(Owner).ShowAccelChar;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomStaticTextClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Alignment' then begin    TProtectedTCustomStaticText(Owner).Alignment := Value;  end else if Prop.Name = 'AutoSize' then begin    TProtectedTCustomStaticText(Owner).AutoSize := Value;  end else if Prop.Name = 'BorderStyle' then begin    TProtectedTCustomStaticText(Owner).BorderStyle := Value;  end else if Prop.Name = 'FocusControl' then begin    TProtectedTCustomStaticText(Owner).FocusControl := TWinControl(Longint(Value));  end else if Prop.Name = 'ShowAccelChar' then begin    TProtectedTCustomStaticText(Owner).ShowAccelChar := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomStaticTextClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCustomStaticTextClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TStaticTextClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TStaticTextClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TStaticTextClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TStaticTextProperties);end;procedure TStaticTextClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TStaticTextMethods);end;procedure TStaticTextClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TStaticTextConstructors);end;procedure TStaticTextClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TStaticTextEvents);end;function TStaticTextClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TStaticTextClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TStaticTextClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TStaticTextClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TCustomGroupBox', TCustomGroupBoxClassInfo);  TradClassRegistry.RegisterClass('TGroupBox', TGroupBoxClassInfo);  TradClassRegistry.RegisterClass('TCustomLabel', TCustomLabelClassInfo);  TradClassRegistry.RegisterClass('TLabel', TLabelClassInfo);  TradClassRegistry.RegisterClass('TCustomEdit', TCustomEditClassInfo);  TradClassRegistry.RegisterClass('TEdit', TEditClassInfo);  TradClassRegistry.RegisterClass('TCustomMemo', TCustomMemoClassInfo);  TradClassRegistry.RegisterClass('TMemo', TMemoClassInfo);  TradClassRegistry.RegisterClass('TCustomComboBox', TCustomComboBoxClassInfo);  TradClassRegistry.RegisterClass('TComboBox', TComboBoxClassInfo);  TradClassRegistry.RegisterClass('TButtonActionLink', TButtonActionLinkClassInfo);  TradClassRegistry.RegisterClass('TButtonControl', TButtonControlClassInfo);  TradClassRegistry.RegisterClass('TButton', TButtonClassInfo);  TradClassRegistry.RegisterClass('TCustomCheckBox', TCustomCheckBoxClassInfo);  TradClassRegistry.RegisterClass('TCheckBox', TCheckBoxClassInfo);  TradClassRegistry.RegisterClass('TRadioButton', TRadioButtonClassInfo);  TradClassRegistry.RegisterClass('TCustomListBox', TCustomListBoxClassInfo);  TradClassRegistry.RegisterClass('TListBox', TListBoxClassInfo);  TradClassRegistry.RegisterClass('TScrollBar', TScrollBarClassInfo);  TradClassRegistry.RegisterClass('TCustomStaticText', TCustomStaticTextClassInfo);  TradClassRegistry.RegisterClass('TStaticText', TStaticTextClassInfo);end.