<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>ISqrt</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>ISqrt Function</B></Font></TD></TR></Table>ISqrt (I) computes INT (SQRT (I)), that is, the integral part of the square root of integer I.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSMath.htm">QESBPCSMath</A><P><B>Declaration</B><Br><Font Face="Courier New"><B>Function</B> ISqrt(<B>const</B> I: LongWord): Longword;</Font><P><B>Description</B><Br />Code originally developed by Marcel Martin, used with permission. Rory Daulton introduced a faster routine (based on Marcel's) for most occassions and this is now used with Permission.</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">I&nbsp;</Font></TD><TD>Positive Integer Value to process.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_intmath.htm">Arithmetic Routines for Integers</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> ISqrt (<B>const</B> I: LongWord): LongWord;
<B>const</B>
     Estimates: <B>array</B> [0..31] <B>of</B> Word = (
          <Font Color="#0000DD">// for index i, constant := Trunc(Sqrt((Int64(2) shl i) - 1.0)), which is</Font>
          <Font Color="#0000DD">//   the largest possible ISqrt(n) for  2**i &lt;= n &lt; 2**(i+1)</Font>
          1, 1, 2, 3, 5, 7, 11, 15,
          22, 31, 45, 63, 90, 127, 181, 255,
          362, 511, 724, 1023, 1448, 2047, 2896, 4095,
          5792, 8191, 11585, 16383, 23170, 32767, 46340, 65535);
     <Font Color="#0000DD">// eax  // ebx  // ecx  // edx</Font>
<B>asm</B>  <Font Color="#0000DD">// entry:   // eax = I</Font>
  <Font Color="#0000DD">// calc the result quickly for zero or one (sqrt equals the argument)</Font>
	   cmp     eax, 1
	   jbe     @@<B>end</B>
  <Font Color="#0000DD">// save registers and the argument</Font>
	   push    ebx
	   mov     ebx, eax                <Font Color="#0000DD">// ebx = I</Font>
  <Font Color="#0000DD">// use the logarithm base 2 to load an initial estimate, which is greater</Font>
  <Font Color="#0000DD">//   than or equal to the actual value</Font>
	   bsr     eax, ebx        <Font Color="#0000DD">// eax = ILog2(I) (note upper WORD is now zero)</Font>
	   mov     ax, [word ptr Estimates + eax * 2]
						  <Font Color="#0000DD">// eax = X</Font>
  <Font Color="#0000DD">// repeat ...</Font>
@@<B>repeat</B>:
  <Font Color="#0000DD">// --  save the last estimate [ X ]</Font>
	   mov     ecx, eax                        <Font Color="#0000DD">// ecx = X</Font>
  <Font Color="#0000DD">// --  calc the new estimate [ (I/X + X) / 2 ; the Newton-Raphson formula ]</Font>
	   <B>xor</B>     edx, edx                                <Font Color="#0000DD">// edx = 0</Font>
	   mov     eax, ebx        <Font Color="#0000DD">// eax = I (so edx:eax = I)</Font>
	   <B>div</B>     ecx             <Font Color="#0000DD">// eax = I/X            // edx = I mod X</Font>
	   add     eax, ecx        <Font Color="#0000DD">// eax = I/X + X</Font>
	   <B>shr</B>     eax, 1          <Font Color="#0000DD">// eax = XNew = (I/X+X)/2</Font>
  <Font Color="#0000DD">// until the new estimate &gt;= the last estimate</Font>
  <Font Color="#0000DD">//   [which can never happen in exact floating-point arithmetic, and can</Font>
  <Font Color="#0000DD">//   happen due to truncation only if the last estimate &lt;= Sqrt(I) ]</Font>
	   cmp     eax, ecx
	   jb      @@<B>repeat</B>
  <Font Color="#0000DD">// use the next-to-last estimate as the result</Font>
	   mov     eax, ecx        <Font Color="#0000DD">// eax = X</Font>
  <Font Color="#0000DD">// restore registers</Font>
	   pop     ebx
@@<B>end</B>:              <Font Color="#0000DD">//exit:     // eax = Result</Font>
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>