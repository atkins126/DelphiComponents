<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>IncompleteBeta</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>IncompleteBeta Function</B></Font></TD></TR></Table>Returns the Incomplete Beta Ix(P, Q), where 0 &lt;= X &lt;= 1 and P and Q are positive.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSMath.htm">QESBPCSMath</A><P><B>Declaration</B><Br><Font Face="Courier New"><B>Function</B> IncompleteBeta(X: Extended; P, Q: Extended): Extended;</Font><P><B>Description</B><Br />The Incomplete Beta function is the probability that a random variable from a Beta distribution having parameters P and Q will be less than or equal to X. Accuracy: Gives about 17 digits. Adapted From Collected Algorithms from CACM, Algorithm 179 - Incomplete Beta Function Ratios, Oliver G Ludwig.</P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> IncompleteBeta (X: Extended; P, Q: Extended): Extended;
<Font Color="#0000DD">{ Adapted From Collected Algorithms from CACM
 Algorithm 179 - Incomplete Beta Function Ratios
 Oliver G Ludwig
}</Font>
<B>const</B>
     Epsilon: Extended = 0.5E-18;
     MaxIterations = 1000;
<B>var</B>
     FinSum, InfSum, Temp, Temp1, Term, Term1, QRecur, <B>Index</B>: Extended;
     I: Integer;
     Alter: Boolean;
<B>begin</B>
     <B>if</B> <B>not</B> FloatIsPositive (P) <B>or</B> <B>not</B> FloatIsPositive (Q) <B>or</B> FloatIsNegative (X)
          <B>or</B> GreaterFloat (X, 1) <B>then</B>
     <B>begin</B>
          <B>raise</B> EMathError.Create (rsNotDefinedForValue)
     <B>end</B>;

     <B>if</B> (X = 0) <B>or</B> (X = 1) <B>then</B>
          Result := X
     <B>else</B>
     <B>begin</B>
          <Font Color="#0000DD">// Interchange arguments if necessary to get better convergence</Font>
          <B>if</B> X &lt;= 0.5 <B>then</B>
               Alter := False
          <B>else</B>
          <B>begin</B>
               Alter := True;
               SwapXY (P, Q);
               X := 1 - X;
          <B>end</B>;

          <Font Color="#0000DD">// Recurs on the (effective) Q until the Power Series doesn't alternate</Font>
          FinSum := 0;
          Term := 1;
          Temp := 1 - X;
          QRecur := Q;
          <B>Index</B> := Q;
          <B>repeat</B>
               <B>Index</B> := <B>Index</B> - 1;
               <B>if</B> <B>Index</B> &lt;= 0 <B>then</B>
                    Break;
               QRecur := <B>Index</B>;
               Term := Term * (QRecur + 1) / (Temp * (P + QRecur));
               FinSum := FinSum + Term;
          <B>until</B> False;

          <Font Color="#0000DD">// Sums a Power Series for non-integral effective Q and yields unity for integer Q</Font>
          InfSum := 1;
          Term := 1;
          <B>for</B> I := 1 <B>to</B> MaxIterations <B>do</B>
          <B>begin</B>
               <B>if</B> Term &lt;= Epsilon <B>then</B>
                    Break;
               <B>Index</B> := I;
               Term := Term * X * (<B>Index</B> - QRecur) * (P + <B>Index</B> - 1) /
                    (<B>Index</B> * (P + <B>Index</B>));
               InfSum := InfSum + Term;
          <B>end</B>;

          <Font Color="#0000DD">// Evaluates Gammas</Font>
          Temp := Gamma (QRecur);
          Temp1 := Temp;
          Term := Gamma (QRecur + P);
          Term1 := Term;
          <B>Index</B> := QRecur;
          <B>repeat</B>
               Temp1 := Temp1 * <B>Index</B>;
               Term1 := Term1 * (<B>Index</B> + P);
               <B>Index</B> := <B>Index</B> + 1;
          <B>until</B> <B>Index</B> &gt;= Q - 0.5;

          Temp := XtoY (X, P) * (InfSum * Term / (P * Temp) + FinSum * Term1
               * XtoY (1 - X, Q) / (Q * Temp1)) / Gamma (P);

          <B>if</B> Alter <B>then</B>
               Result := 1 - Temp
          <B>else</B>
               Result := Temp
     <B>end</B>;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>