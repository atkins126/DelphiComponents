<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_Beta</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_Beta Routines</B></Font></TD></TR></Table>Function generates a Random variate in [0,1] from a Beta Distribution with density proportional to BETA**(AA-1) * (1-BETA)**(BB-1).<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_Beta(const aa, bb: Extended): Extended;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_Beta(const aa, bb: Extended; RandomGenerator: TRandomGenFunction): Extended;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Beta(<B>const</B> aa, bb: Extended): Extended;</Font><P><B>Description</B><Br />Uses Cheng'S log logistic method. Adapted from Fortran 77 code from the book: Dagpunar, J. 'Principles of random variate generation' Clarendon Press, Oxford, 1988. ISBN 0-19-852202-9</P><P>Function generates a Random variate in [0,1] from a Beta Distribution with density proportional to BETA**(AA-1) * (1-BETA)**(BB-1). Uses Cheng'S log logistic method.</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">aa&nbsp;</Font></TD><TD>Shape Parameter for Beta Distribution - must be positive.</TD></TR><TR Class="odd"><TD><Font Color="Blue">bb&nbsp;</Font></TD><TD>Shape Parameter for Beta Distribution - must be positive.</TD></TR><TR Class="even"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Beta (<B>const</B> aa, bb: Extended): Extended;
<B>begin</B>
     Result := Random_Beta (aa, bb, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Beta(<B>const</B> aa, bb: Extended; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Beta (<B>const</B> aa, bb: Extended;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;
<B>const</B>
     aln4 = 1.3862943611198906;
<B>var</B>
     a, b, g, r, s, x, y, z: Extended;
     d, f, h, t, c: Extended;
     Swap: Boolean;
     Done: Boolean;
<B>begin</B>
     <B>if</B> (aa &lt;= 0.0) <B>or</B> (bb &lt;= 0.0) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     a := aa;
     b := bb;
     swap := b &gt; a;
     <B>if</B> swap <B>then</B>
     <B>begin</B>
          g := b;
          b := a;
          a := g;
     <B>end</B>;
     d := a / b;
     f := a + b;
     <B>if</B> (b &gt; 1.0) <B>then</B>
     <B>begin</B>
          h := Sqrt ((2.0 * a * b - f) / (f - 2.0));
          t := 1.0;
     <B>end</B>
     <B>else</B>
     <B>begin</B>
          h := b;
          t := 1.0 / (1.0 + XtoY (a / (VLarge * b), b));
     <B>end</B>;
     c := a + h;

     Done := False;
     Result := 0.0;
     <B>repeat</B>
          r := RandomGenerator;
          x := RandomGenerator;
          s := Sqr (r) * x;
          <B>if</B> (r &lt; VSmall) <B>or</B> (s &lt;= 0.0) <B>then</B>
               Continue;

          <B>if</B> (r &lt; t) <B>then</B>
          <B>begin</B>
               x := Ln (r / (1.0 - r)) / h;
               y := d * Exp (x);
               z := c * x + f * Ln ((1.0 + d) / (1.0 + y)) - aln4;
               <B>if</B> (s - 1.0 &gt; z) <B>then</B>
               <B>begin</B>
                    <B>if</B> (s - s * z &gt; 1.0) <B>then</B>
                         Continue;
                    <B>if</B> (Ln (s) &gt; z) <B>then</B>
                         Continue;
               <B>end</B>;
               Result := y / (1.0 + y);
          <B>end</B>
          <B>else</B>
          <B>begin</B>
               <B>if</B> 4.0 * s &gt; XtoY (1.0 + 1.0 / d, f) <B>then</B>
                    Continue;
               Result := 1.0
          <B>end</B>;
          Done := True
     <B>until</B> Done;

     <B>if</B> Swap <B>then</B>
          Result := 1 - Result;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>