<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_Binomial1</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_Binomial1 Routines</B></Font></TD></TR></Table>Function generates a Random Binomial Variate using C D Kemp's method.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_Binomial1(const n: Integer; const p: Extended): Int64;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_Binomial1(const n: Integer; const p: Extended; RandomGenerator: TRandomGenFunction): Int64;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Binomial1(<B>const</B> n: Integer; <B>const</B> p: Extended): Int64;</Font><P><B>Description</B><Br />This algorithm is suitable when many random variates are required with the SAME parameter values for n &amp; p. Reference: Kemp, C.D. (1986). `A modal method for generating binomial variables', Commun. Statist. - Theor. Meth. 15(3), 805-813.</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">n&nbsp;</Font></TD><TD>Number of Bernoulli Trials, must be positive.</TD></TR><TR Class="odd"><TD><Font Color="Blue">p&nbsp;</Font></TD><TD>Bernoulli Probability of Success must be in [0, 1].</TD></TR><TR Class="even"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Binomial1 (<B>const</B> n: Integer; <B>const</B> p: Extended): Int64;
<B>begin</B>
     Result := Random_Binomial1 (n, p, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Binomial1(<B>const</B> n: Integer; <B>const</B> p: Extended; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Int64;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Binomial1 (<B>const</B> n: Integer; <B>const</B> p: Extended;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Int64;
<B>var</B>
     ru, rd: Int64;
     r0: Int64;
     u, pd, pu: Real;
     odds_ratio, p_r: Real;
<B>begin</B>
     r0 := Trunc ((n + 1) * p);
     p_r := bin_prob (n, p, r0);
     <B>if</B> p &lt; 1 <B>then</B>
          odds_ratio := p / (1.0 - p)
     <B>else</B>
          odds_ratio := VLarge;

     u := RandomGenerator;
     u := u - p_r;
     <B>if</B> (u &lt; 0.0) <B>then</B>
     <B>begin</B>
          Result := r0;
          Exit;
     <B>end</B>;

     pu := p_r;
     ru := r0;
     pd := p_r;
     rd := r0;

     <B>repeat</B>
          Dec (rd);
          <B>if</B> (rd &gt;= 0) <B>then</B>
          <B>begin</B>
               pd := pd * (rd + 1.0) / (odds_ratio * (n - rd));
               u := u - pd;
               <B>if</B> (u &lt; 0.0) <B>then</B>
               <B>begin</B>
                    Result := rd;
                    Exit;
               <B>end</B>;
          <B>end</B>;

          Inc (ru);
          <B>if</B> (ru &lt;= n) <B>then</B>
          <B>begin</B>
               pu := pu * (n - ru + 1.0) * odds_ratio / ru;
               u := u - pu;
               <B>if</B> (u &lt; 0.0) <B>then</B>
               <B>begin</B>
                    Result := ru;
                    Exit;
               <B>end</B>;
          <B>end</B>;
     <B>until</B> False;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>