<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_Inv_Gauss</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_Inv_Gauss Routines</B></Font></TD></TR></Table>Function generates a Random Variate in [0, Infinity) from a reparameterised generalised inverse Gaussian (GIG) Distribution with Density proportional to GIG**(H-1) * EXP(-0.5*B*(GIG+1/GIG)) using a ratio method.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_Inv_Gauss(const h, b: Extended): Extended;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_Inv_Gauss(const h, b: Extended; RandomGenerator: TRandomGenFunction): Extended;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Inv_Gauss(<B>const</B> h, b: Extended): Extended;</Font><P><B>Description</B><Br />Adapted from Fortran 77 code from the book: Dagpunar, J. 'Principles of random variate generation' Clarendon Press, Oxford, 1988. ISBN 0-19-852202-9</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">h&nbsp;</Font></TD><TD>Parameter of Distribution, must be positive.</TD></TR><TR Class="odd"><TD><Font Color="Blue">b&nbsp;</Font></TD><TD>Parameter of Distribution, must be positive.</TD></TR><TR Class="even"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Inv_Gauss (<B>const</B> h, b: Extended): Extended;
<B>begin</B>
     Result := Random_Inv_Gauss (h, b, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Inv_Gauss(<B>const</B> h, b: Extended; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Inv_Gauss (<B>const</B> h, b: Extended;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;
<B>var</B>
     ym, xm, r, w, r1, r2, x: Extended;
     a, c, d, e: Extended;
     Done: Boolean;
<B>begin</B>
     <B>if</B> (h &lt; 0.0) <B>or</B> (b &lt;= 0.0) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     <B>if</B> (h &gt; 0.25 * b * Sqrt (VLarge)) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     e := Sqr (b);
     d := h + 1.0;
     ym := (-d + Sqrt (Sqr (d) + e)) / b;
     <B>if</B> (ym &lt; VSmall) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     d := h - 1.0;
     xm := (d + Sqrt (Sqr (d) + e)) / b;
     <B>if</B> (xm &lt; VSmall) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     d := 0.5 * d;
     e := -0.25 * b;
     r := xm + 1.0 / xm;
     w := xm * ym;
     a := XtoY (w, -0.5 * h) * Sqrt (xm / ym) * Exp (-e * (r - ym - 1.0 / ym));
     <B>if</B> (a &lt; vsmall) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     c := -d * Ln (xm) - e * r;

     Done := False;
     x := 0.0;
     <B>repeat</B>
          r1 := RandomGenerator;
          <B>if</B> (r1 &gt; 0.0) <B>then</B>
          <B>begin</B>
               r2 := RandomGenerator;
               x := a * r2 / r1;
               <B>if</B> (x &gt; 0.0) <B>then</B>
               <B>begin</B>
                    <B>if</B> (Ln (r1) &lt; d * Ln (x) + e * (x + 1.0 / x) + c) <B>then</B>
                         Done := True
               <B>end</B>;
          <B>end</B>
     <B>until</B> Done;
     Result := x;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>