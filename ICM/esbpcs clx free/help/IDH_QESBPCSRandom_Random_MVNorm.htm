<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_MVNorm</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_MVNorm Routines</B></Font></TD></TR></Table>Routine to generate an N-Variate Random Normal Vector using a Cholesky Decomposition.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Procedure Random_MVNorm(const h, d: TESBFloatVector; var f, x: TESBFloatVector; var ier: Integer);</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Procedure Random_MVNorm(const h, d: TESBFloatVector; var f, x: TESBFloatVector; var ier: Integer; RandomGenerator: TRandomGenFunction);</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Procedure</B> Random_MVNorm(<B>const</B> h, d: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> f, x: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> ier: Integer);</Font><P><B>Description</B><Br />Adapted from Fortran 77 code from the book: Dagpunar, J. 'Principles of random variate generation' Clarendon Press, Oxford, 1988. ISBN 0-19-852202-9 N.B. An extra argument, ier, has been added to Dagpunar's routine</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">h&nbsp;</Font></TD><TD>H (J) = J'th element of Vector of Means</TD></TR><TR Class="odd"><TD><Font Color="Blue">d&nbsp;</Font></TD><TD>D (J*(J-1)/2+I) = (I,J)'th element of Variance Matrix (J &gt; = I)</TD></TR><TR Class="even"><TD><Font Color="Blue">x&nbsp;</Font></TD><TD>X(J) = J'th element of delivered Vector</TD></TR><TR Class="odd"><TD><Font Color="Blue">f&nbsp;</Font></TD><TD>F((J-1)*(2*N-J)/2+I) = (I,J)'th element of lower triangular decomposition of Variance Matrix (J &lt;= I).</TD></TR><TR Class="even"><TD><Font Color="Blue">ier&nbsp;</Font></TD><TD>1 if the input covariance matrix is not positive definite, 0 otherwise.</TD></TR><TR Class="odd"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>procedure</B> Random_MVNorm (<B>const</B> h, d: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>;
     <B>var</B> f, x: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> ier: Integer);
<B>begin</B>
     Random_MVNorm (h, d, f, x, ier, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Procedure</B> Random_MVNorm(<B>const</B> h, d: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> f, x: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> ier: Integer; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>);</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>procedure</B> Random_MVNorm (<B>const</B> h, d: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>;
     <B>var</B> f, x: <A HREF="IDH_Type_TESBFloatVector.htm">TESBFloatVector</A>; <B>var</B> ier: Integer;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>);
<B>var</B>
     i, j, m, n, n2, fn: Integer;
     y, v: Extended;
<B>begin</B>
     n := Length (h);
     <B>if</B> (n = 0) <B>then</B>
          <B>raise</B> EMathError.Create (rsVectorEmpty);

     fn := n * (n + 1) <B>div</B> 2;
     <B>if</B> (Length (D) &lt; fn) <B>then</B>
          <B>raise</B> EMathError.Create (rsVectorTooSmall);

     SetLength (f, fn);

     ier := 0;

     n2 := 2 * n;
     <B>if</B> (d [0] &lt;= 0.0) <B>then</B>
     <B>begin</B>
          ier := 1;
          Exit;
     <B>end</B>;

     f [0] := Sqrt (d [0]);
     y := 1.0 / f [0];

     <B>for</B> j := 2 <B>to</B> n <B>do</B>
          f [j - 1] := d [j * (j - 1) <B>div</B> 2] * y;

     <B>for</B> i := 2 <B>to</B> n <B>do</B>
     <B>begin</B>
          v := d [i * (i - 1) <B>div</B> 2 + i - 1];
          <B>for</B> m := 1 <B>to</B> i - 1 <B>do</B>
               v := v - Sqr (f [(m - 1) * (n2 - m) <B>div</B> 2 + i - 1]);

          <B>if</B> (v &lt;= 0.0) <B>then</B>
          <B>begin</B>
               ier := 1;
               Exit;
          <B>end</B>;

          v := Sqrt (v);
          y := 1.0 / v;
          F [(i - 1) * (n2 - i) <B>div</B> 2 + i - 1] := v;

          <B>for</B> j := i + 1 <B>to</B> n <B>do</B>
          <B>begin</B>
               v := d [j * (j - 1) <B>div</B> 2 + i - 1];
               <B>for</B> m := 1 <B>to</B> i - 1 <B>do</B>
               <B>begin</B>
                    v := v - f [(m - 1) * (n2 - m) <B>div</B> 2 + i - 1]
                         * f [(m - 1) * (n2 - m) <B>div</B> 2 + j - 1]
               <B>end</B>;
               f [(i - 1) * (n2 - i) <B>div</B> 2 + j - 1] := v * y;
          <B>end</B>;
     <B>end</B>;

     X := Copy (H, 0, n);
     <B>for</B> j := 1 <B>to</B> n <B>do</B>
     <B>begin</B>
          y := Random_Normal (RandomGenerator);
          <B>for</B> i := j <B>to</B> n <B>do</B>
               x [i - 1] := x [i - 1] + f [(j - 1) * (n2 - j) <B>div</B> 2 + i - 1] * y;
     <B>end</B>;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>