<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_Neg_Binomial</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_Neg_Binomial Routines</B></Font></TD></TR></Table>Function generates a Random Negative Binomial variate.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_Neg_Binomial(const sk, p: Extended): Int64;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_Neg_Binomial(const sk, p: Extended; RandomGenerator: TRandomGenFunction): Int64;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Neg_Binomial(<B>const</B> sk, p: Extended): Int64;</Font><P><B>Description</B><Br />Adapted from Fortran 77 code from the book: Dagpunar, J. 'Principles of random variate generation' Clarendon Press, Oxford, 1988. ISBN 0-19-852202-9</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">sk&nbsp;</Font></TD><TD>Number of Failures required (Dagpunar's words!), the "XtoY" parameter of the negative binomial. Must be positive.</TD></TR><TR Class="odd"><TD><Font Color="Blue">p&nbsp;</Font></TD><TD>Probability of Success must be in (0, 1).</TD></TR><TR Class="even"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Neg_Binomial (<B>const</B> sk, p: Extended): Int64;
<B>begin</B>
     Result := Random_Neg_Binomial (sk, p, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Neg_Binomial(<B>const</B> sk, p: Extended; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Int64;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Neg_Binomial (<B>const</B> sk, p: Extended;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Int64;
<B>const</B>
     h = 0.7;
<B>var</B>
     q, x, st, uln, v, r, s, y, g: Extended;
     k, n: Int64;
     i: Integer;
<B>begin</B>
     <B>if</B> (sk &lt;= 0.0) <B>or</B> (p &lt;= 0.0) <B>or</B> (p &gt;= 1.0) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     q := 1.0 - p;
     x := 0.0;
     st := sk;
     <B>if</B> (p &gt; h) <B>then</B>
     <B>begin</B>
          v := 1.0 / Ln (p);
          k := Trunc (st);
          <B>for</B> i := 1 <B>to</B> k <B>do</B>
          <B>begin</B>
               <B>repeat</B>
                    r := RandomGenerator;
               <B>until</B> r &gt; 0.0;
               n := Trunc (v * Ln (r));
               x := x + n;
          <B>end</B>;
          st := st - k;
     <B>end</B>;

     s := 0.0;
     uln := -Ln (VSmall);
     <B>if</B> (st &gt; -uln / Ln (q)) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     y := XtoY (q, st);
     g := st;
     r := RandomGenerator;
     <B>while</B> (y &lt;= r) <B>do</B>
     <B>begin</B>
          r := r - y;
          s := s + 1.0;
          y := y * p * g / s;
          g := g + 1.0;
     <B>end</B>;

     Result := Trunc (x + s + 0.5)
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>