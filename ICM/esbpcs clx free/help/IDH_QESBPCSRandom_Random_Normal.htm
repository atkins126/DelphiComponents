<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_Normal</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_Normal Routines</B></Font></TD></TR></Table>The function random_normal() returns a normally distributed pseudo-random number with zero mean and unit variance.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_Normal: Extended;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_Normal(RandomGenerator: TRandomGenFunction): Extended;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Normal: Extended;</Font><P><B>Description</B><Br />Adapted from the following Fortran 77 code ALGORITHM 712, COLLECTED ALGORITHMS FROM ACM. THIS WORK PUBLISHED IN TRANSACTIONS ON MATHEMATICAL SOFTWARE, VOL. 18, NO. 4, DECEMBER, 1992, PP. 434-435.</P><P>The algorithm uses the ratio of uniforms method of A.J. Kinderman and J.F. Monahan augmented with quadratic bounding curves.</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Normal: Extended;
<B>begin</B>
     Result := Random_Normal (DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_Normal(RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_Normal (RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;
<B>const</B>
     s = 0.449871;
     t = -0.386595;
     a = 0.19600;
     b = 0.25472;
     r1 = 0.27597;
     r2 = 0.27846;
<B>var</B>
     u, v, x, y, q: Extended;
     Done: Boolean;

<B>begin</B>
     <Font Color="#0000DD">//     Generate P = (u,v) uniform in rectangle enclosing acceptance region</Font>

     Done := False;
     <B>repeat</B>
          u := RandomGenerator;
          v := RandomGenerator;
          v := 1.7156 * (v - 0.5);

          <Font Color="#0000DD">// Evaluate the quadratic form</Font>
          x := u - s;
          Y := abs (v) - t;
          q := Sqr (x) + y * (a * y - b * x);

          <Font Color="#0000DD">// Accept P if inside inner ellipse</Font>
          <B>if</B> (q &lt; r1) <B>then</B>
               Done := True
          <B>else</B> <B>if</B> (q &lt;= r2) <B>and</B> (Sqr (v) &lt; -4.0 * Ln (u) * Sqr (u)) <B>then</B>
               Done := True;
     <B>until</B> Done;
     <Font Color="#0000DD">// Return ratio of P's coordinates as the normal deviate</Font>
     <B>if</B> u &lt; VSmall <B>then</B>
          <B>raise</B> EMathError.Create (rsDivideByZero);

     Result := v / u;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>