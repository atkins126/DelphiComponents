<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>Random_von_Mises</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFFFF"><TR><TD><Font Color="#000000F"><B>Random_von_Mises Routines</B></Font></TD></TR></Table>Function generates a Random von Mises Variate.<P><B>Unit</B><Br><A HREF="IDH_Unit_QESBPCSRandom.htm">QESBPCSRandom</A><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Overloaded Variants</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="#0">Function Random_von_Mises(const k: Extended): Extended;</A></TD></TR><TR Class="odd"><TD><A HRef="#1">Function Random_von_Mises(const k: Extended; RandomGenerator: TRandomGenFunction): Extended;</A></TD></TR></Table></P><P><B><A Name="#0">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_von_Mises(<B>const</B> k: Extended): Extended;</Font><P><B>Description</B><Br />Algorithm VMD from: Dagpunar, J.S. (1990) `Sampling from the von Mises distribution via a comparison of random numbers', J. of Appl. Statist., 17, 165-168.</P><P>Fortran 90 code by Alan Miller</P><P>CSIRO Division of Mathematical &amp; Information Sciences</P><P><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Parameters</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><Font Color="Blue">k&nbsp;</Font></TD><TD>Parameter of the von Mises distribution.</TD></TR><TR Class="odd"><TD><Font Color="Blue">RandomGenerator&nbsp;</Font></TD><TD>Optional Function to use for Uniform Random Number Generator. If omitted, Delphi's Random function is used, and if this is done remember to call Randomize if you don't want repeated values.</TD></TR></Table></P><P><B>Category</B><Br><A HREF="idh_cat_floatmath.htm">Arithmetic Routines for Floats</A><Br /><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_von_Mises (<B>const</B> k: Extended): Extended;
<B>begin</B>
     Result := Random_von_Mises (k, DelphiRandom);
<B>End</B>;</pre></td></tr></Table><P><B><A Name="#1">Declaration</A></B><Br><Font Face="Courier New"><B>Function</B> Random_von_Mises(<B>const</B> k: Extended; RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;</Font><Font Color=#FF0000><H3>Implementation</H3></Font> <table border="0" bgcolor="#FFFED9"  style="margin-top: 10; margin-bottom: 10;"> <tr> <td><pre><B>function</B> Random_von_Mises (<B>const</B> k: Extended;
     RandomGenerator: <A HREF="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>): Extended;
<B>var</B>
     j, n, jj: Integer;
     nk: Integer;
     p: <B>array</B> [1..20] <B>of</B> Extended;
     theta: <B>array</B> [0..20] <B>of</B> Extended;
     xx, sump, r, th, lambda, rlast: Extended;
     dk: Extended;
<B>begin</B>
     <B>if</B> (k &lt; 0.0) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     nk := Trunc (k + k + 1.0);
     <B>if</B> (nk &gt; 20) <B>then</B>
          <B>raise</B> EMathError.Create (rsInvalidValue);

     dk := k;
     theta [0] := 0.0;
     <B>if</B> (k &gt; 0.5) <B>then</B>
     <B>begin</B>
          <Font Color="#0000DD">// Set up array p of probabilities.</Font>
          sump := 0.0;
          <B>for</B> j := 1 <B>to</B> nk <B>do</B>
          <B>begin</B>
               <B>if</B> (j &lt; nk) <B>then</B>
                    theta [j] := ESBArcCos (1.0 - j / k)
               <B>else</B>
                    theta [nk] := ESBPi;

               <Font Color="#0000DD">// Numerical integration of e^[k.cos(x)] from theta(j-1) to theta(j)</Font>
               Integral (theta [j - 1], theta [j], p [j], dk);
               sump := sump + p [j];
          <B>end</B>;
          <B>for</B> j := 1 <B>to</B> nk <B>do</B>
               p [j] := p [j] / sump;
     <B>end</B>
     <B>else</B>
     <B>begin</B>
          p [1] := 1.0;
          theta [1] := ESBPi;
     <B>end</B>;

     r := RandomGenerator;
     jj := nk;
     <B>for</B> j := 1 <B>to</B> nk <B>do</B>
     <B>begin</B>
          r := r - p [j];
          <B>if</B> (r &lt; 0.0) <B>then</B>
          <B>begin</B>
               jj := j;
               Break;
          <B>end</B>;
     <B>end</B>;
     r := -r / p [jj];

     <B>repeat</B>
          th := theta [jj - 1] + r * (theta [jj] - theta [j - 1]);
          lambda := k - jj + 1.0 - k * Cos (th);
          n := 1;
          rlast := lambda;

          <B>repeat</B>
               r := RandomGenerator;
               <B>if</B> r &lt;= rlast <B>then</B>
               <B>begin</B>
                    Inc (n);
                    rlast := r;
               <B>end</B>;
          <B>until</B> (r &gt; rlast);

          <B>if</B> <B>not</B> Odd (n) <B>then</B>
               r := RandomGenerator
     <B>until</B> Odd (n);

     th := Abs (th);
     xx := (r - rlast) / (1.0 - rlast) - 0.5;
     <B>if</B> xx &lt; 0 <B>then</B>
          Result := -1 * th
     <B>else</B>
          Result := th;
<B>End</B>;</pre></td></tr></Table><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>