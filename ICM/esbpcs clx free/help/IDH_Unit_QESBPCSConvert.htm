<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>QESBPCSConvert Unit Overview</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFF00"><TR><TD Width="100%"><Font Size="5"> <B>QESBPCSConvert Unit</B> </Font><Font Size="2"><Br /><A HRef="#Routines">Routines</A> </Font></TD></TR></Table><Font Size="2"> Contains the Data Type Conversions and String Routines used by ESBPCS for CLX.<P><B>Description</B><Br>This is designed to work in Borland Delphi 6 CLX and above, Borland C++ Builder 6 CLX and above, and Borland Kylix 2 and above. Most if not all features will work in Kylix 1 but it is not currently supported.<P>This unit contains many useful String and conversion routines that are used throughout ESBPCS. Routines use const parameters were possible.</P><P>Copyright © 1999-2002 ESB Consultancy</P><P>v2.3 - 14 September 2002</P><P><A Name="Routines"><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Routines</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_AlphaCol2Int.htm">AlphaCol2Int</A></B>&nbsp;</TD><TD>Takes a Alphabetic Column Heading like that used in MS Excel and converts it to its Numeric Equivalent.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Angle2Str.htm">Angle2Str</A>&nbsp;</TD><TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_AnsiUpCase.htm">AnsiUpCase</A></B>&nbsp;</TD><TD>Ansi version of the standard UpCase.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_BlankStr.htm">BlankStr</A></B>&nbsp;</TD><TD>Returns a string composed of blank spaces (ie #32).</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2Char.htm">Boolean2Char</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2OnOffStr.htm">Boolean2OnOffStr</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2TF.htm">Boolean2TF</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2TFStr.htm">Boolean2TFStr</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2YB.htm">Boolean2YB</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2YN.htm">Boolean2YN</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Boolean2YNStr.htm">Boolean2YNStr</A></B>&nbsp;</TD><TD>Converts a Boolean Value into the corresponding Character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_CentreChStr.htm">CentreChStr</A></B>&nbsp;</TD><TD>Returns a string with specified characters added to the beginning and end of the string to in effect centre the string within the given length.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_CentreStr.htm">CentreStr</A></B>&nbsp;</TD><TD>Returns a string with blank spaces added to the beginning and end of the string to in effect centre the string within the given length.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_DashStr.htm">DashStr</A></B>&nbsp;</TD><TD>Returns a string composed of dashes (minus signs).</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_DisplayTabsInString.htm">DisplayTabsInString</A></B>&nbsp;</TD><TD>Returns a String with all occurrences of TAB (ie #9) replaced with the contents of <A HREF="IDH_Var_ESBTabStr.htm">ESBTabStr</A>.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_ESBLastPosCh.htm">ESBLastPosCh</A></B>&nbsp;</TD><TD>Returns the Last Position of given Character, processing from the end of the string.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_ESBPosCh.htm">ESBPosCh</A></B>&nbsp;</TD><TD>Returns the first Position of given Character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_ESBPosNCh.htm">ESBPosNCh</A></B>&nbsp;</TD><TD>Returns the Position of the n'th occurrence of given Character.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_ESBProperStr.htm">ESBProperStr</A></B>&nbsp;</TD><TD>Returns Proper String - each word Capitalized - uses Ansi Capitalisation.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_ExtractValue.htm">ExtractValue</A></B>&nbsp;</TD><TD>Retrieves the P'th Value in a String containing several values separated by given Separator which defaults to a semicolon.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_FillStr.htm">FillStr</A></B>&nbsp;</TD><TD>Returns a string filled with the given character.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Float2CEStr.htm">Float2CEStr</A>&nbsp;</TD><TD>Converts a Float into a string without Padding and with Thousands Separators.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Float2CEStr2.htm">Float2CEStr2</A>&nbsp;</TD><TD>Like <A HREF="IDH_QESBPCSConvert_Float2CEStr.htm">Float2CEStr</A> this ccnverts a Float into a string without Padding &amp; with Thousands Separators, except this removes all trailing 0's and the decimal separator if not needed.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Float2CStr.htm">Float2CStr</A>&nbsp;</TD><TD>Converts a Float into a string of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding to the Left and with Thousands Separators.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Float2EStr.htm">Float2EStr</A>&nbsp;</TD><TD>Converts a Float into a string without Padding.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Float2EStr2.htm">Float2EStr2</A>&nbsp;</TD><TD>Like <A HREF="IDH_QESBPCSConvert_Float2EStr.htm">Float2EStr</A> this ccnverts a Float into a string without Padding, except this removes all trailing 0's and the decimal separator if not needed.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Float2Str.htm">Float2Str</A>&nbsp;</TD><TD>Converts a Float into a string of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding to the Left.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Float2ZStr.htm">Float2ZStr</A>&nbsp;</TD><TD>Converts a Float into a string of length Len with Zero Padding to the Left.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Hex2Int.htm">Hex2Int</A></B>&nbsp;</TD><TD>Converts a Hexadecimal (string) into an Integer.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Hex2Int64.htm">Hex2Int64</A></B>&nbsp;</TD><TD>Converts a Hexadecimal (string) into a LongWord.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Hex2LWord.htm">Hex2LWord</A></B>&nbsp;</TD><TD>Converts a Hexadecimal (string) into a LongWord.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Int2CEStr.htm">Int2CEStr</A>&nbsp;</TD><TD>Converts an Integer into a string without Padding and with <B>ThousandSeparators</B> as defined in the Regional Settings.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Int2CStr.htm">Int2CStr</A>&nbsp;</TD><TD>Converts an Integer into a string of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding and with <B>ThousandSeparators</B> as defined in the Regional Settings.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Int2EHex.htm">Int2EHex</A>&nbsp;</TD><TD>Converts an Integer into a Hexadecimal (string) without Padding.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Int2EStr.htm">Int2EStr</A>&nbsp;</TD><TD>Converts an Integer into a string without Padding.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Int2Hex.htm">Int2Hex</A>&nbsp;</TD><TD>Converts an Integer into a Hexademical (string) of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding to the Left.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Int2Placing.htm">Int2Placing</A>&nbsp;</TD><TD>Returns the "Placing" suffix for an integer, ie 1 gives 'st' as in 1st, 12 gives 'th' as in 12th, 22 gives 'nd' as in 22nd, etc.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Int2Str.htm">Int2Str</A>&nbsp;</TD><TD>Converts an Integer into a string of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding to the Left.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_Int2ZHex.htm">Int2ZHex</A>&nbsp;</TD><TD>Converts an Integer into a string of length Len with Zero Padding to the Left.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_Int2ZStr.htm">Int2ZStr</A>&nbsp;</TD><TD>Converts an Integer into a string of length Len with Zero Padding to the Left.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_IntCol2Alpha.htm">IntCol2Alpha</A></B>&nbsp;</TD><TD>Takes a Numeric Column Heading and converts it to its Alphabetic Column Heading like that used in Excel.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_IPStr2LWord.htm">IPStr2LWord</A></B>&nbsp;</TD><TD>Converts a String representing an IP Address 'xxx.xxx.xxx.xxx' into the equivalent LongWord.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_IsAlphaNumericStr.htm">IsAlphaNumericStr</A>&nbsp;</TD><TD>Returns True if the string is not empty and is only made of Standard Alphabetic characters 'A'through 'Z' and 'a' through 'z' or of Digits '0' through '9'.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_IsAlphaStr.htm">IsAlphaStr</A>&nbsp;</TD><TD>Returns True if the string is not empty and is only made of Standard Alphabetic characters 'A'through 'Z' and 'a' through 'z'.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_IsCharSetStr.htm">IsCharSetStr</A>&nbsp;</TD><TD>Returns True if the string is not empty and is only made of Characters in the specificed CharSet.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_IsDigitStr.htm">IsDigitStr</A>&nbsp;</TD><TD>Returns True if the string is not empty and is only made of Digits '0' through '9'.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_LeftAlignStr.htm">LeftAlignStr</A></B>&nbsp;</TD><TD>Returns a string of Length N with blank spaces added to the <B>end</B> of the string if S is too short, or returning the N Left-most characters of S if S is too long.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_LeftStr.htm">LeftStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the first N characters of S.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_LeftTillChStr.htm">LeftTillChStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the characters from S up to but not including the specified one.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_LWord2IPStr.htm">LWord2IPStr</A></B>&nbsp;</TD><TD>Converts a LongWord representing an IP Address and returns the equivalent string representation 'xxx.xxx.xxx.xxx'.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_PadChLeftStr.htm">PadChLeftStr</A></B>&nbsp;</TD><TD>Returns a string with the specified character added to the beginning of the string until the string is of the given length.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_PadChRightStr.htm">PadChRightStr</A></B>&nbsp;</TD><TD>Returns a string with the specified character added to the beginning of the string until the string is of the given length.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_PadLeftStr.htm">PadLeftStr</A></B>&nbsp;</TD><TD>Returns a string with blank spaces added to the beginning of the string until the string is of the given length.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_PadRightStr.htm">PadRightStr</A></B>&nbsp;</TD><TD>Returns a string with blank spaces added to the beginning of the string until the string is of the given length.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_ReplaceChStr.htm">ReplaceChStr</A></B>&nbsp;</TD><TD>Returns the String with all occurrences of OldCh character replaced with NewCh character.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_RightAfterChStr.htm">RightAfterChStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the characters from S after but not including the specified one.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_RightAfterStr.htm">RightAfterStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the remaining characters <B>after</B> the first N Characters of S.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_RightAlignStr.htm">RightAlignStr</A></B>&nbsp;</TD><TD>Returns a string of Length N with blank spaces added to the <B>Beginning</B> of the string if S is too short, or returning the N left-most characters of S if S is too long.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_RightStr.htm">RightStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the last N characters of S.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_RightTillChStr.htm">RightTillChStr</A></B>&nbsp;</TD><TD>Returns the substring consisting of the right most characters from S up to but not including the specified one.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_SciFloat2EStr.htm">SciFloat2EStr</A>&nbsp;</TD><TD>Converts a Float into a string in Scientific Notation without Padding.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_SciFloat2EStr2.htm">SciFloat2EStr2</A>&nbsp;</TD><TD>Converts a Float into a string in Scientific Notation without Padding, except this removes all trailing 0's and the decimal separator if not needed.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_SciFloat2Str.htm">SciFloat2Str</A>&nbsp;</TD><TD>Converts a Float into a string in Scientific Notation of length Len with <A HREF="IDH_Var_ESBNumPadCh.htm">ESBNumPadCh</A> Padding to the Left.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_StarStr.htm">StarStr</A></B>&nbsp;</TD><TD>Returns a string composed of stars (asterisks).</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Byte.htm">Str2Byte</A></B>&nbsp;</TD><TD>Converts a string into a Byte.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Cardinal.htm">Str2Cardinal</A></B>&nbsp;</TD><TD>Converts a string into a Cardinal.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Double.htm">Str2Double</A></B>&nbsp;</TD><TD>Converts a string into a Double.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Float.htm">Str2Float</A></B>&nbsp;</TD><TD>Converts a string into an Extended.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Int.htm">Str2Int</A></B>&nbsp;</TD><TD>Converts a string into an Integer.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Int64.htm">Str2Int64</A></B>&nbsp;</TD><TD>Converts a string into a Int64.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2LInt.htm">Str2LInt</A></B>&nbsp;</TD><TD>Converts a string into a LongInt.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2LWord.htm">Str2LWord</A></B>&nbsp;</TD><TD>Converts a string into a LongWord.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Single.htm">Str2Single</A></B>&nbsp;</TD><TD>Converts a string into a Single.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2SInt.htm">Str2SInt</A></B>&nbsp;</TD><TD>Converts a string into a ShortInt.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_Str2SmallInt.htm">Str2SmallInt</A></B>&nbsp;</TD><TD>Converts a string into a SmallInt.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_Str2Word.htm">Str2Word</A></B>&nbsp;</TD><TD>Converts a string into a Word.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_StripChFromStr.htm">StripChFromStr</A>&nbsp;</TD><TD>Returns a String with all occurrences of the given character removed.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_StripChStr.htm">StripChStr</A>&nbsp;</TD><TD>Returns the String with all specified leading &amp; trailing characters removed.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSConvert_StripLChStr.htm">StripLChStr</A>&nbsp;</TD><TD>Returns the String with all specified leading characters removed.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSConvert_StripTChStr.htm">StripTChStr</A>&nbsp;</TD><TD>Returns the String with all specified trailing characters removed.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_StripThousandSeparators.htm">StripThousandSeparators</A></B>&nbsp;</TD><TD>Returns a string with all occurrences of the Thousands Separator as defined in the regional settings removed.</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_TF2Boolean.htm">TF2Boolean</A></B>&nbsp;</TD><TD>Converts a Character Value into its corresponding Boolean value.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_UnderscoreStr.htm">UnderscoreStr</A></B>&nbsp;</TD><TD>Returns a string composed of Underscores (Shift-Minus).</TD></TR><TR Class="odd"><TD><B><A HRef="IDH_QESBPCSConvert_ValueMatch.htm">ValueMatch</A></B>&nbsp;</TD><TD>Retrieves True if the specified Value is in a String containing several values separated by given Separator which defaults to a semicolon.</TD></TR><TR Class="even"><TD><B><A HRef="IDH_QESBPCSConvert_YN2Boolean.htm">YN2Boolean</A></B>&nbsp;</TD><TD>Converts a Character Value into its corresponding Boolean value.</TD></TR></Table></P><P></Font><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>