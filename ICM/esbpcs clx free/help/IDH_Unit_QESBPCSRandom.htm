<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>QESBPCSRandom Unit Overview</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}
TR.odd {background-color: #F8F8F8};
TR.even {background-color: #EEEEEE};
Table.list {background-color: #FFFFFF};
TD {vertical-align : top}
</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2"><Table Border="0" Width="100%" BGColor="#FFFF00"><TR><TD Width="100%"><Font Size="5"> <B>QESBPCSRandom Unit</B> </Font><Font Size="2"><Br /><A HRef="#Types">Types</A> <A HRef="#Routines">Routines</A> </Font></TD></TR></Table><Font Size="2"> Adaption of the AMRandom Freeware so that it better integrates with ESBPCS for CLX.<P><B>Description</B><Br>This is designed to work in Borland Delphi 6 CLX and above, Borland C++ Builder 6 CLX and above, and Borland Kylix 2 and above. Most if not all features will work in Kylix 1 but it is not currently supported.<P>Supplies various Random Number Generators based on specified Distributions.</P><P>No dependency on the Delphi Math unit - so can be used with Standard Versions of Delphi 4 &amp; 5 that do not include it.</P><P>This unit is equivalent to our Freeware package: <B>AMRandom</B>.</P><P>============================</P><P>Following is from Alan Miller's Original FORTRAN Package:</P><P>Distribution Function/subroutine name</P><P>Normal (Gaussian) Random_Normal</P><P>Gamma Random_Gamma</P><P>Chi-squared Random_ChiSq</P><P>Exponential Random_Exponential</P><P>Weibull Random_Weibull</P><P>Beta Random_Beta</P><P>t Random_T</P><P>Multivariate normal Random_MVNorm</P><P>Generalized inverse Gaussian Random_Inv_Gauss</P><P>Poisson Random_Poisson</P><P>Binomial Random_Binomial1 *</P><P>Random_Binomial2 *</P><P>Negative binomial Random_neg_Binomial</P><P>von Mises Random_von_Mises</P><P>Cauchy Random_Cauchy</P><P>Two functions are provided for the binomial distribution. If the parameter values remain constant, it is recommended that the first function is used (random_binomial1). If one or both of the parameters change, use the second function (random_binomial2).</P><P>Delphi's own random number generator, Random, is used to provide a source of uniformly distributed random numbers.</P><P>N.B. At this stage, only one random number is generated at each call to one of the functions above.</P><P>Some of the code is adapted from Dagpunar's book:</P><P>Dagpunar, J. 'Principles of random variate generation' Clarendon Press, Oxford, 1988. ISBN 0-19-852202-9</P><P>Author: Alan Miller</P><P>CSIRO Division of Mathematical &amp; Information Sciences</P><P>Private Bag 10, Clayton South MDC</P><P>Clayton 3169, Victoria, Australia</P><P>Phone: (+61) 3 9545-8036 Fax: (+61) 3 9545-8080</P><P>e-mail: Alan.Miller @ vic.cmis.csiro.au</P><P>============================</P><P>Copyright © 1999-2002 ESB Consultancy</P><P>v2.3 - 14 September 2002</P><P><A Name="Types"><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Types</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><A HRef="IDH_Type_TRandomGenFunction.htm">TRandomGenFunction</A>&nbsp;</TD><TD>Function type for Uniform Random Number Generator - returns a value 0 &lt;= x &lt;= 1</TD></TR></Table></P><P><A Name="Routines"><Table Border="0" Width="100%" BGColor="#000000"><TR><TD><Font Color="#FFFFFF"><B>Routines</B></Font></TD></TR></Table><Table Class="list" Width="100%" CellSpacing="1" CellPadding="2" BGColor="#EEEEEE"><TR Class="even"><TD><B><A HRef="IDH_QESBPCSRandom_DelphiRandom.htm">DelphiRandom</A></B>&nbsp;</TD><TD>Used to call Delphi's Inbuilt Random Number Generator.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_Beta.htm">Random_Beta</A>&nbsp;</TD><TD>Function generates a Random variate in [0,1] from a Beta Distribution with density proportional to BETA**(AA-1) * (1-BETA)**(BB-1).</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Binomial1.htm">Random_Binomial1</A>&nbsp;</TD><TD>Function generates a Random Binomial Variate using C D Kemp's method.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_Binomial2.htm">Random_Binomial2</A>&nbsp;</TD><TD>Generates a single random deviate from a binomial distribution whose number of trials is N and whose probability of an event in each trial is P.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Cauchy.htm">Random_Cauchy</A>&nbsp;</TD><TD>Generate a random variant from the standard Cauchy distribution.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_ChiSq.htm">Random_ChiSq</A>&nbsp;</TD><TD>Generates a random variate from the Chi-Squared Distribution with given degrees of freedom.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Exponential.htm">Random_Exponential</A>&nbsp;</TD><TD>Function generates a Random Variate in [0, Infinity) from a negative exponential distribution with density proportional to EXP (-random_exponential), using Inversion.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_Gamma.htm">Random_Gamma</A>&nbsp;</TD><TD>Function generates a Random Gamma Variate.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Inv_Gauss.htm">Random_Inv_Gauss</A>&nbsp;</TD><TD>Function generates a Random Variate in [0, Infinity) from a reparameterised generalised inverse Gaussian (GIG) Distribution with Density proportional to GIG**(H-1) * EXP(-0.5*B*(GIG+1/GIG)) using a ratio method.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_MVNorm.htm">Random_MVNorm</A>&nbsp;</TD><TD>Routine to generate an N-Variate Random Normal Vector using a Cholesky Decomposition.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Neg_Binomial.htm">Random_Neg_Binomial</A>&nbsp;</TD><TD>Function generates a Random Negative Binomial variate.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_Normal.htm">Random_Normal</A>&nbsp;</TD><TD>The function random_normal() returns a normally distributed pseudo-random number with zero mean and unit variance.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_Poisson.htm">Random_Poisson</A>&nbsp;</TD><TD>Generates a single random deviate from a Poisson distribution with mean mu.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_T.htm">Random_T</A>&nbsp;</TD><TD>Function generates a random variate from a Student T Distribution using Kinderman and Monahan;s Ratio Method.</TD></TR><TR Class="even"><TD><A HRef="IDH_QESBPCSRandom_Random_von_Mises.htm">Random_von_Mises</A>&nbsp;</TD><TD>Function generates a Random von Mises Variate.</TD></TR><TR Class="odd"><TD><A HRef="IDH_QESBPCSRandom_Random_Weibull.htm">Random_Weibull</A>&nbsp;</TD><TD>Generates a random variate from the Weibull distribution with probability density: a a-1 -x f(x) = a.x e</TD></TR></Table></P><P></Font><P><HR>
<TABLE BORDER="0" WIDTH="100%" BGCOLOR="#000000"><TR><TD>
<Font Color=White><Large>HTML generated by <B>Time2HELP</B></Large></Font>
</TD></TR></Table>
<Small><A HREF="http://www.time2help.com">http://www.time2help.com</A></Small></Body></HTML>