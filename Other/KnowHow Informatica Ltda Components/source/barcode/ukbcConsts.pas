{
=======================================================================

    KLIB v100
    Serious Software Made in Brazil


    home-page: www.knowhow-online.com.br (sorry, just portuguese)
    authors: Demian Lessa (demian@knowhow-online.com.br) and Leonardo Freitas

    Released under the Netscape Public License Version 1.0 
   (see license.txt)

    Unless otherwise noted, all materials provided in this release
    are copyright © 2001 by KnowHow Informatica Ltda.

=======================================================================
}

unit ukbcConsts;

{$I s:\v100\include\iKLIB100.inc}

interface

uses
  ukbcTypes;

const

{$IFDEF KLIB100}
	BARCODE_VER = '1.00';
	BARCODE_VER_INT = 100;
	BARCODE_VER_RELEASE_DATE = '25/07/1999 01:00:00';
{$ELSE}
	BARCODE_VER = '?.??';
	BARCODE_VER_INT = 0;
	BARCODE_VER_RELEASE_DATE = '01/01/1900 00:00:00';
{$ENDIF}

{##RI##}

	tbA = 1;
	tbB = 2;
	tbC = 2;
	bmBar = 1;
	bmBarThick = 3;
	bmBarCrack = 0;
	bmBarThickCrack = 2;

	poSRCAND = 1;
	poSRCDEFAULT = 0;

	Code39eValidChars = [#0..#126];

	LenEANGuard = 3;
	LenEANCentral = 5;

	PosEANStart = 4;
  PosUPCEStop = 45;
	PosEAN8LastStop = 65;
	PosEAN13LastStop = 93;

	PosEAN8FirstStop = 32;
	PosEAN13FirstStop = 46;
	PosEAN8SecondStop = 37;
	PosEAN13SecondStop = 51;

	ISBNPrefix: string[3] = '978';

	SAddOnGuard: string[4] = '1011';
	SAddOnDelineator: string[2] = '01';
	SAddSeparator: string[9] = '000000000';

	SUPCELeftGuard: string[3] = '101';
	SUPCERightGuard: string[6] = '010101';

	SEANGuard: string[3] = '101';
	SEANCentral: string[5] = '01010';

	SMSIStop: string[3] = '121';
	SMSIStart: string[2] = '30';

	SMSIPStop: string[2] = '11';
	SMSIPStart: string[4] = '1101';

	SCode25Stop: string[5] = '30103';
	SCode25Start: string[5] = '30301';

	SCode25iStop: string[3] = '301';
	SCode25iStart: string[4] = '1010';

	SizeCode128Stop = 7;
	SizeCode128Start = 6;
	SCode128Stop: string[SizeCode128Stop] = '2331112';
	SCode128AStart: string[SizeCode128Start] = '211412';
	SCode128BStart: string[SizeCode128Start] = '211214';
	SCode128CStart: string[SizeCode128Start] = '211232';

	SCode39GuardIndex = '121030301'; // *

{ for now, let these be hardcoded as the a/t character pairs }
	SCodabarStart: string[7] = '1032121'; // a
	SCodabarStop: string[7] = '1032121'; // t

{
	alternative pairs: b/t, c/*, d/e
	
	'1032121', // a
	'1212103', // b
	'1012123', // c
	'1012321', // d
	'1032121', // t
	'1212103', // n
	'1012123', // *
	'1012321'  // e
}

{

	For all codes, 1 stands for a bar and 0 stands for
	a space (crack)

}

{
	EAN and UPC
	-----------
}

	EANTable: TKEANTable =
	(
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6', 
		'7', 
		'8', 
		'9'  
	);

	EANEncodingA: TKEANCodes =
	(
		'0001101', //	0
		'0011001', //	1
		'0010011', //	2
		'0111101', //	3
		'0100011', //	4
		'0110001', //	5
		'0101111', //	6
		'0111011', //	7
		'0110111', //	8
		'0001011'  //	9
	);

{
	tables B and C are related (elements Bi and Ci are mirror
	images of one another)
}

	EANEncodingB: TKEANCodes =
	(
		'0100111',	// 0
		'0110011',	// 1	
		'0011011',	// 2
		'0100001',	// 3
		'0011101',	// 4	
		'0111001',	// 5	
		'0000101',	// 6
		'0010001',	// 7	
		'0001001',	// 8
		'0010111'	  // 9
	);

	EANEncodingC: TKEANCodes =
	(
		'1110010', //	0
		'1100110', //	1
		'1101100', //	2
		'1000010', //	3
		'1011100', //	4
		'1001110', //	5
		'1010000', //	6
		'1000100', //	7
		'1001000', //	8
		'1110100'	 // 9
	);

	EAN5LookupTable: array[0..9, 1..5] of Byte =
	(
		( tbB, tbB, tbA, tbA, tbA ),
		( tbB, tbA, tbB, tbA, tbA ),
		( tbB, tbA, tbA, tbB, tbA ),
		( tbB, tbA, tbA, tbA, tbB ),
		( tbA, tbB, tbB, tbA, tbA ),
		( tbA, tbA, tbB, tbB, tbA ),
		( tbA, tbA, tbA, tbB, tbB ),
		( tbA, tbB, tbA, tbB, tbA ),
		( tbA, tbB, tbA, tbA, tbB ),
		( tbA, tbA, tbB, tbA, tbB )
	);

	EAN2LookupTable: array[0..99, 1..2] of Byte =
	(
		( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ),
		( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ),
		( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ),
		( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ),
		( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ),
		( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ),
		( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ),
		( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ),
		( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ),
		( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ),
		( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ),
		( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ),
		( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ),
		( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ),
		( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ),
		( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ),
		( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ),
		( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ),
		( tbB, tbA ), ( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ),
		( tbB, tbB ), ( tbA, tbA ), ( tbA, tbB ), ( tbB, tbA ), ( tbB, tbB )
	);

	UPCELookupTable: array[0..EANCharCount - 1, 1..6] of Byte =
	(
		( tbB, tbB, tbB, tbA, tbA, tbA ),
		( tbB, tbB, tbA, tbB, tbA, tbA ),
		( tbB, tbB, tbA, tbA, tbB, tbA ),
		( tbB, tbB, tbA, tbA, tbA, tbB ),
		( tbB, tbA, tbB, tbB, tbA, tbA ),
		( tbB, tbA, tbA, tbB, tbB, tbA ),
		( tbB, tbA, tbA, tbA, tbB, tbB ),
		( tbB, tbA, tbB, tbA, tbB, tbA ),
		( tbB, tbA, tbB, tbA, tbA, tbB ),
		( tbB, tbA, tbA, tbB, tbA, tbB )
	);

	EANLookupTable: array[0..EANCharCount - 1, 2..7] of Byte =
	(
		( tbA, tbA, tbA, tbA, tbA, tbA ),
		( tbA, tbA, tbB, tbA, tbB, tbB ),
		( tbA, tbA, tbB, tbB, tbA, tbB ),
		( tbA, tbA, tbB, tbB, tbB, tbA ),
		( tbA, tbB, tbA, tbA, tbB, tbB ),
		( tbA, tbB, tbB, tbA, tbA, tbB ),
		( tbA, tbB, tbB, tbB, tbA, tbA ),
		( tbA, tbB, tbA, tbB, tbA, tbB ),
		( tbA, tbB, tbA, tbB, tbB, tbA ),
		( tbA, tbB, tbB, tbA, tbB, tbA )
	);

{
	MSI
	---
}

	MSITable: TKMSITable =
	(
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9'
	);

	MSIEncoding: TKMSICodes =
	(
		'12121212',
		'12121230',
		'12123012',
		'12123030',
		'12301212',
		'12301230',
		'12303012',
		'12303030',
		'30121212',
		'30121230'
	);

{ 0 = 12; 1 = 30; }
	PlesseyEncoding: TKPlesseyCodes =
	(
		'0000',
		'1000',
		'0100',
		'1100',
		'0010',
		'1010',
		'0110',
		'1110',
		'0001',
		'1001'
	);

{

	For Code25, Code25i, Code39, Code39e, and Codabar, 3 stands for
	a wide bar and 2 stands for a wide space (crack)

}

{
	CODE 2 of 5
	-----------
}

	Code25Table: TKCode25Table =
	(
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9'
	);

	Code25Encoding: TKCode25Codes =
	(
		'101030301',
		'301010103',
		'103010103',
		'303010101',
		'101030103',
		'301030101',
		'103030101',
		'101010303',
		'301010301',
		'103010301'
	);

{
	CODE 2 of 5 Interleaved
	-----------------------
}

	Code25iTable: TKCode25iTable =
	(
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9'
	);

	Code25iEncoding: TKCode25iCodes =
	(
		'NNWWN', // 0
		'WNNNW', // 1
		'NWNNW', // 2
		'WWNNN', // 3
		'NNWNW', // 4
		'WNWNN', // 5
		'NWWNN', // 6
		'NNNWW', // 7
		'WNNWN', // 8
		'NWNWN'  // 9
	);

{
	CODE 39
	-------
}

	Code39Table: TKCode39Table =
	(
		'0',
		'1',
    '2',
    '3',
    '4',
    '5',
    '6',
		'7',
    '8',
    '9',
		'A',
    'B',
    'C',
		'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
		'K',
    'L',
    'M',
    'N',
		'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
		'W',
    'X',
    'Y',
		'Z',
    '-',
    '.',
    'S',
		'$',
		'/',
		'+',
		'%'
	);

	Code39Encoding: TKCode39Codes =
	(
		'101230301', // 0
		'301210103', // 1
		'103210103', // 2
		'303210101', // 3
		'101230103', // 4
		'301230101', // 5
		'103230101', // 6
		'101210303', // 7
		'301210301', // 8
		'103210301', // 9
		'301012103', // A
		'103012103', // B
		'303012101', // C
		'101032103', // D
		'301032101', // E
		'103032101', // F
		'101012303', // G
		'301012301', // H
		'103012301', // I
		'101032301', // J
		'301010123', // K
		'103010123', // L
		'303010121', // M
		'101030123', // N
		'301030121', // O
		'103030121', // P
		'101010323', // Q
		'301010321', // R
		'103010321', // S
		'101030321', // T
		'321010103', // U
		'123010103', // V
		'323010101', // W
		'121030103', // X
		'321030101', // Y
		'123030101', // Z
		'121010303', // -
		'321010301', // .
		'123010301', // Space
		'121212101', // $
		'121210121', // /
		'121012121', // +
		'101212121'  // %
	);

{
	CODE 39 Extended
	----------------
}

	Code39eTable: TKCode39eTable =
	(
{ Extended Code39 }
		 #0, // = %U
		 #1, // = $A
		 #2, // = $B
		 #3, // = $C
		 #4, // = $D
		 #5, // = $E
		 #6, // = $F
		 #7, // = $G
		 #8, // = $H
		 #9, // = $I
		#10, // = $J
		#11, // = $K
		#12, // = $L
		#13, // = $M
		#14, // = $N
		#15, // = $O
		#16, // = $P
		#17, // = $Q
		#18, // = $R
		#19, // = $S
		#20, // = $T
		#21, // = $U
		#22, // = $V
		#23, // = $W
		#24, // = $X
		#25, // = $Y
		#26, // = $Z
		#27, // = %A
		#28, // = %B
		#29, // = %C
		#30, // = %D
		#31, // = %E

{ same as Code39 }
		#32, // = Space

{ Extended Code39 }
		#33, // = /A
		#34, // = /B
		#35, // = /C
		#36, // = /D
		#37, // = /E
		#38, // = /F
		#39, // = /G
		#40, // = /H
		#41, // = /I
		#42, // = /J
		#43, // = /K
		#44, // = /L

{ same as Code39 }
		#45, // = /M
		#46, // = /N

{ Extended Code39 }
		#47, //  /O

{ same as Code39 }
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',

{ Extended Code39 }
		#58, // = /Z
		#59, // = %F
		#60, // = %G
		#61, // = %H
		#62, // = %I
		#63, // = %J
		#64, // = %V

{ same as Code39 }
		'A',
		'B',
		'C',
		'D',
		'E',
		'F',
		'G',
		'H',
		'I',
		'J',
		'K',
		'L',
		'M',
		'N',
		'O',
		'P',
		'Q',
		'R',
		'S',
		'T',
		'U',
		'V',
		'W',
		'X',
		'Y',
		'Z',

{ Extended Code39 }
		'[', // = #91 = %K
		'\', // = #92 = %L
		']', // = #93 = %M
		'^', // = #94 = %N
		'_', // = #95 = %O
		'`', // = #96 = %W

		'a', // = +A
		'b', // = +B
		'c', // = +C
		'd', // = +D
		'e', // = +E
		'f', // = +F
		'g', // = +G
		'h', // = +H
		'i', // = +I
		'j', // = +J
		'k', // = +K
		'l', // = +L
		'm', // = +M
		'n', // = +N
		'o', // = +O
		'p', // = +P
		'q', // = +Q
		'r', // = +R
		's', // = +S
		't', // = +T
		'u', // = +U
		'v', // = +V
		'w', // = +W
		'x', // = +X
		'y', // = +Y
		'z', // = +Z
		'{',
		'|',
		'}',
		'~',
		#127 	// DEL = %T
	);

	Code39eEncoding: TKCode39eCodes =
	(
{ Extended Code39 }
		'101212121321010103', //  #0 = %U
		'121212101301012103', //  #1 = $A
		'121212101103012103', //  #2 = $B
		'121212101303012101', //  #3 = $C
		'121212101101032103', //  #4 = $D
		'121212101301032101', //  #5 = $E
		'121212101103032101', //  #6 = $F
		'121212101101012303', //  #7 = $G
		'121212101301012301', //  #8 = $H
		'121212101103012301', //  #9 = $I
		'121212101101032301', // #10 = $J
		'121212101301010123', // #11 = $K
		'121212101103010123', // #12 = $L
		'121212101303010121', // #13 = $M
		'121212101101030123', // #14 = $N
		'121212101301030121', // #15 = $O
		'121212101103030121', // #16 = $P
		'121212101101010323', // #17 = $Q
		'121212101301010321', // #18 = $R
		'121212101103010321', // #19 = $S
		'121212101101030321', // #20 = $T
		'121212101321010103', // #21 = $U
		'121212101123010103', // #22 = $V
		'121212101323010101', // #23 = $W
		'121212101121030103', // #24 = $X
		'121212101321030101', // #25 = $Y
		'121212101123030101', // #26 = $Z
		'101212121301012103', // #27 = %A
		'101212121103012103', // #28 = %B
		'101212121303012101', // #29 = %C
		'101212121101032103', // #30 = %D
		'101212121301032101', // #31 = %E

{ same as Code39 }
		'123010301', // #32 = Space

{ Extended Code39 }
		'121212101301012103', // ! = #33 = /A
		'121212101103012103', // " = #34 = /B
		'121212101303012101', // # = #35 = /C
		'121212101101032103', // $ = #36 = /D
		'121212101301032101', // % = #37 = /E
		'121212101103032101', // & = #38 = /F
		'121212101101012303', // ' = #39 = /G
		'121212101301012301', // ( = #40 = /H
		'121212101103012301', // ) = #41 = /I
		'121212101101032301', // * = #42 = /J
		'121212101301010123', // + = #43 = /K
		'121212101103010123', // , = #44 = /L

{ same as Code39 }
		'121010303', // - alternate: '121212101303010121', // - = #45 = /M
		'321010301', // . alternate: '121212101101030123', // . = #46 = /N

{ Extended Code39 }
		'121212101301030121', // / = #47 = /O

{ same as Code39 }
		'101230301', // 0
		'301210103', // 1
		'103210103', // 2
		'303210101', // 3
		'101230103', // 4
		'301230101', // 5
		'103230101', // 6
		'101210303', // 7
		'301210301', // 8
		'103210301', // 9

{ Extended Code39 }
		'121212101123030101', // : = #58 = /Z
		'101212121103032101', // & = #59 = %F
		'101212121101012303', // ' = #60 = %G
		'101212121301012301', // ( = #61 = %H
		'101212121103012301', // ) = #62 = %I
		'101212121101032301', // * = #63 = %J
		'101212121123010103', // @ = #64 = %V

{ same as Code39 }
		'301012103', // A
		'103012103', // B
		'303012101', // C
		'101032103', // D
		'301032101', // E
		'103032101', // F
		'101012303', // G
		'301012301', // H
		'103012301', // I
		'101032301', // J
		'301010123', // K
		'103010123', // L
		'303010121', // M
		'101030123', // N
		'301030121', // O
		'103030121', // P
		'101010323', // Q
		'301010321', // R
		'103010321', // S
		'101030321', // T
		'321010103', // U
		'123010103', // V
		'323010101', // W
		'121030103', // X
		'321030101', // Y
		'123030101', // Z

{ Extended Code39 }
		'121212101301010123', // [ = #91 = %K
		'101212121103010123', // \ = #92 = %L
		'101212121303010121', // ] = #93 = %M
		'101212121101030123', // ^ = #94 = %N
		'101212121301030121', // _ = #95 = %O
		'101212121323010101', // ` = #96 = %W

		'121012121301012103', // a = +A
		'121012121103012103', // b = +B
		'121012121303012101', // c = +C
		'121012121101032103', // d = +D
		'121012121301032101', // e = +E
		'121012121103032101', // f = +F
		'121012121101012303', // g = +G
		'121012121301012301', // h = +H
		'121012121103012301', // i = +I
		'121012121101032301', // j = +J
		'121012121301010123', // k = +K
		'121012121103010123', // l = +L
		'121012121303010121', // m = +M
		'121012121101030123', // n = +N
		'121012121301030121', // o = +O
		'121012121103030121', // p = +P
		'121012121101010323', // q = +Q
		'121012121301010321', // r = +R
		'121012121103010321', // s = +S
		'121012121101030321', // t = +T
		'121012121321010103', // u = +U
		'121012121123010103', // v = +V
		'121012121323010101', // w = +W
		'121012121121030103', // x = +X
		'121012121321030101', // y = +Y
		'121012121123030101', // z = +Z

		'101212121103030121', // { = %P
		'101212121101010323', // | = %Q
		'101212121301010321', // } = %R
		'101212121103010321', // ~ = %S
		'101212121101030321' // DEL = %T
	);

{
	CODABAR
	-------
}

	CodabarTable: TKCodabarTable =
	(
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		'-',
		'$',
		':',
		'/',
		'.',
		'+'
	);

	CodabarEncoding: TKCodabarCodes =
	(
		'1010123', // 0
		'1010321', // 1
		'1012103', // 2
		'3210101', // 3
		'1030121', // 4
		'3010121', // 5
		'1210103', // 6
		'1210301', // 7
		'1230101', // 8
		'3012101', // 9
		'1012301', // -
		'1032101', // $
		'3010303', // :
		'3030103', // /
		'3030301', // .
		'1030303'  // +
	);

{
	CODE 128
	--------
}

{ Coordinates: ( IsBar, BarWidth ) }

	Code128Mappings: array[0..1, TKCode128WidthChar] of string[4] =
	(
//		( '00', '2', '20', '22' ),
//		( '1', '3', '31', '33' )
		( '0', '00', '000', '0000' ),
		( '1', '11', '111', '1111' )
	);

	Code128ATable: TKCode128Table =
	(
		' ',
		'!',
		'"',
		'#',
		'$',
		'%',
		'&',
		#39,
		'(',
		')',
		'*',
		'+',
		',',
		'-',
		'.',
		'/',
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		':',
		';',
		'<',
		'=',
		'>',
		'?',
		'@',
		'A',
		'B',
		'C',
		'D',
		'E',
		'F',
		'G',
		'H',
		'I',
		'J',
		'K',
		'L',
		'M',
		'N',
		'O',
		'P',
		'Q',
		'R',
		'S',
		'T',
		'U',
		'V',
		'W',
		'X',
		'Y',
		'Z',
		'[',
		'\',
		']',
		'^',
		'_',
		#0,
		#1,
		#2,
		#3,
		#4,
		#5,
		#6,
		#7,
		#8,
		#9,
		#10,
		#11,
		#12,
		#13,
		#14,
		#15,
		#16,
		#17,
		#18,
		#19,
		#20,
		#21,
		#22,
		#23,
		#24,
		#25,
		#26,
		#27,
		#28,
		#29,
		#30,
		#127,
		#128,
		#129,
		#130,
		#131,
		#132,
		#133,
		#134
	);

	Code128BTable: TKCode128Table =
	(
		' ',
		'!',
		'"',
		'#',
		'$',
		'%',
		'&',
		#39,
		'(',
		')',
		'*',
		'+',
		',',
		'-',
		'.',
		'/',
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		':',
		';',
		'<',
		'=',
		'>',
		'?',
		'@',
		'A',
		'B',
		'C',
		'D',
		'E',
		'F',
		'G',
		'H',
		'I',
		'J',
		'K',
		'L',
		'M',
		'N',
		'O',
		'P',
		'Q',
		'R',
		'S',
		'T',
		'U',
		'V',
		'W',
		'X',
		'Y',
		'Z',
		'[',
		'\',
		']',
		'^',
		'_',
		'`',
		'a',
		'b',
		'c',
		'd',
		'e',
		'f',
		'g',
		'h',
		'i',
		'j',
		'k',
		'l',
		'm',
		'n',
		'o',
		'p',
		'q',
		'r',
		's',
		't',
		'u',
		'v',
		'w',
		'x',
		'y',
		'z',
		'{',
		'|',
		'}',
		'~',
		#127,
		#128,
		#129,
		#130,
		#131,
		#132,
		#133,
		#134
	);

	Code128CTable: TKCode128Table =
	(
		'00',
		'01',
		'02',
    '03',
    '04',
    '05',
    '06',
    '07',
		'08',
    '09',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
		'16',
		'17',
    '18',
		'19',
    '20',
    '21',
  	'22',
  	'23',
    '24',
    '25',
    '26',
    '27',
    '28',
    '29',
		'30',
    '31',
    '32',
    '33',
    '34',
    '35',
    '36',
    '37',
		'38',
		'39',
    '40',
		'41',
    '42',
    '43',
    '44',
  	'45',
    '46',
    '47',
    '48',
    '49',
    '50',
    '51',
		'52',
    '53',
    '54',
    '55',
    '56',
    '57',
    '58',
    '59',
		'60',
		'61',
    '62',
		'63',
    '64',    
    '65',    
    '66',    
  	'67',
    '68',    
    '69',
    '70',    
    '61',    
    '72',
    '73',    
		'74',
    '75',    
    '76',    
		'77',
    '78',    
    '79',    
    '80',
    '81',
		'82',
		'83',
		'84',
		'85',
		'86',
		'87',
		'88',
		'89',
		'90',
		'91',
		'92',
		'93',
		'94',
		'95',
		'96',
		'97',
		'98',
		'99',
		#132,
		#133,
		#134
	);

	Code128Encoding: TKCode128Codes =
	(
		'212222',
		'222122',
		'222221',
		'121223',
		'121322',
		'131222',
		'122213',
		'122312',
		'132212',
		'221213',
		'221312',
		'231212',
		'112232',
		'122132',
		'122231',
		'113222',
		'123122',
    '123221',
    '223211',
		'221132',
		'221231',
    '213212',
    '223112',
    '312131',
    '311222',
    '321122',
    '321221',
    '312212',
    '322112',
    '322211',
    '212123',
    '212321',
    '232121',
    '111323',
    '131123',
    '131321',
    '112313',
    '132113',
		'132311',
    '211313',
    '231113',
		'231311',
		'112133',
    '112331',
    '132131',
    '113123',
    '113321',
    '133121',
    '313121',
    '211331',
    '231131',
    '213113',
    '213311',
    '213131',
    '311123',
    '311321',
    '331121',
    '312113',
    '312311',
    '332111',
		'314111',
    '221411',
    '431111',
		'111224',
		'111422',
    '121124',
    '121421',
    '141122',
    '141221',
    '112214',
    '112412',
    '122114',
    '122411',
    '142112',
    '142211',
    '241211',
    '221114',
    '413111',
    '241112',
    '134111',
    '111242',
		'121142',
		'121241',
		'114212',
		'124112',
		'124211',
		'411212',
    '421112',
    '421211',
    '212141',
    '214121',
    '412121',
    '111143',
    '111341',
		'131141',
		'114113',
		'114311',
		'411113',
		'411311',
		'113141',
		'114131',
    '311141',
		'411131'
	);

(*

CODE128

0 	      SP          00           '212222',
1         !           01           '222122',
2         "           02           '222221',
3         #           03           '121223',
4         $           04           '121322',
5         %           05           '131222',
6         &           06           '122213',
7         '           07           '122312',
8         (           08           '132212',
9         )           09           '221213',
10        *           10           '221312',
11        +           11           '231212',
12        ,           12           '112232',
13        -           13           '122132',
14        .           14           '122231',
15        /           15           '113222',
16        0           16           '123122',
17        1           17           '123221',
18        2           18           '223211',
19        3           19           '221132',
20        4           20           '221231',
21        5           21           '213212',
22        6           22           '223112',
23        7           23           '312131',
24        8           24           '311222',
25        9           25           '321122',
26        :           26           '321221',
27        ;           27           '312212',
28        <           28           '322112',
29        =           29           '322211',
30        >           30           '212123',
31        ?           31           '212321',
32        @           32           '232121',
33        A           33           '111323',
34        B           34           '131123',
35        C           35           '131321',
36        D           36           '112313',
37        E           37           '132113',
38        F           38           '132311',
39        G           39           '211313',
40        H           40           '231113',
41        I           41           '231311',
42        J           42           '112133',
43        K           43           '112331',
44        L           44           '132131',
45        M           45           '113123',
46        N           46           '113321',
47        O           47           '133121',
48        P           48           '313121',
49        Q           49           '211331',
50        R           50           '231131',
51        S           51           '213113',
52        T           52           '213311',
53        U           53           '213131',
54        V           54           '311123',
55        W           55           '311321',
56        X           56           '331121',
57        Y           57           '312113',
58        Z           58           '312311',
59        [           59           '332111',
60        \           60           '314111',
61        ]           61           '221411',
62        ^           62           '431111',
63        _           63           '111224',
64        '           64           '111422',
65        a           65           '121124',
66        b           66           '121421',
67        c           67           '141122',
68        d           68           '141221',
69        e           69           '112214',
70        f           70           '112412',
71        g           61           '122114',
72        h           72           '122411',
73        i           73           '142112',
74        j           74           '142211',
75        k           75           '241211',
76        l           76           '221114',
77        m           77           '413111',
78        n           78           '241112',
79        o           79           '134111',
80        p           80           '111242',
81        q           81           '121142',
82        r           82           '121241',
83        s           83           '114212',
84        t           84           '124112',
85        u           85           '124211',
86        v           86           '411212',
87        w           87           '421112',
88        x           88           '421211',
89        y           89           '212141',
90        z           90           '214121',
91        {           91           '412121',
92        |           92           '111143',
93        }           93           '111341',
94        ~           94           '131141',
95        DEL         95 		       '114113',
96        FNC 3       96 		       '114311',
97        FNC 2       97 		       '411113',
98        SHIFT       98 		       '411311',
99        CODE C      99 		       '113141',
100       FNC 4       CODE B       '114131',
101       CODE A      CODE A       '311141',
102       FNC 1       FNC 1        '411131'

*)

{##RI##}

{##NI##}

{
--------------------------------------------------------------------------------
------------------------- Registration Information -----------------------------
--------------------------------------------------------------------------------
}

function GetBarCodeRegistryInfo: LongInt;

{##NI##}

implementation

uses
	SysUtils, uksyConsts, uksyTypes;

{
--------------------------------------------------------------------------------
------------------------- Registration Information -----------------------------
--------------------------------------------------------------------------------
}

{--------------------------- Internal Implementation ---------------------------}

type
	TSignature	 = TUserName;
	TKey				 = TUserName;

	TKRegistryInfo = record
		Signature: TSignature;
		Key: TKey;
		UserName: TUserName;
		Company: TCompanyName;
	end;

const

	KnowHowRegistryInfo: TKRegistryInfo =
	(
{$IFDEF KLIB100}
		Signature: '{09536FA0-BF69-11D2-B212-00C0DFE081C4}'; { do not resource/const }
{$ELSE}
    Signature: *MUST GENERATE AN ERROR!*;
{$ENDIF}
		Key:
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32;
		UserName:
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32;
		Company:
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32#32 +
			#32#32#32#32#32#32#32#32#32#32;
	);

{---------------------------- Public Implementation ----------------------------}

function GetBarCodeRegistryInfo: LongInt;
begin
	Result := LongInt( @KnowHowRegistryInfo ) - SizeOf( TKRegistryInfo );
end;

end.
