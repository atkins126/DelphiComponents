
DOCI 1.18  
==========

Компоненты протестированы и нормально работают под Delphi 4,5,6,7. Вполне вероятно 
что без каких-нибудь переделок компоненты будут работать и под Delphi 3 
(когда то они работали и под Delphi 3 но с тех пор внесено много изменений 
которые на Delphi 3 не тестировались)

Мой e-mail lasersquard@yahoo.com
================================================================================


===============
ОСОБЕННОСТИ !!!
===============

- Работают полностью без BDE! т.е приложение разработаное с использованием
  DOCI компонент не требует установки BDE. Нету проблем с конфликтами версий
  BDE. 
- Большая производительность т.к. нету помежуточных универсальных прослоек 
  (как BDE) между приложением и базой.
- Работа с серверами Oracle 7.3/8/8i при использовании клиента от версии 8/8i.
- TOraSQL - мощный наследник TDataSet. Максимально совместим со стандартными
  компонентами (TQuery). Реализует все возможности TDataSet и добавляет
  много новых.
- Полная поддержка оракловских полей BLOB и CLOB.
- Возможность выполнять хранимые процедуры.
- Возможность выполнять куски PL/SQL кода прямо из клиентского приложения.
- Настройка количества записей получаемых за одно обращение к базе. (намного повышает
  быстродействие при работе с большими таблицами)
- Мощные и быстрые таблицы в памяти. 
   TMemoryDataSet  - TDataSet совместимая компонента. Может показывать данные в 
                     DBGridе. 
   TAMemoryDataSet - Таблица в памяти не совместимая с TDataSet.

- Мощные компоненты для создания и работы с динамическими массивами для всех типов данных.
  (поиск данных реализован на ассемблере)





СОДЕРЖАНИЕ
----------
Введение
Общее описание
Инсталяция
Как работать с компонентами
 Описание
 Примеры


ВВЕДЕНИЕ
--------

Компоненты предназначены для доступа к серверам Oracle 7.3/8/8i из Delphi 4,5,6,7.
Они используют стандартную библиотеку OCI (Oracle Call Interface), которая
 устанавливается при установе Oracle Client for Windows 9x/NT/2000


Поддерживаются оракловские типы BLOB и CLOB.
С версии 1.0 BLOBы работают нормально и у компонент наследников TDataSet.
 (у наследников TDataSet пока только на чтение)

Работают только с клиентами Oracle 8/8i, но можно так ходить и к Oracle 7.3, 
 используя клиентов восьмых. 

Я постараюсь преложить все усилия по отлову багов, но большую роль играют
 ваши отзывы и описание замеченных недостатков - не все я могу самостоятельно
 отловить.

 Мой e-mail - lasersquard@yahoo.com, lasersquad@tut.by
 Кто хочет получать свежие версии и патчи - напишите мне письмо.

В настоящее время поддерживаются данные следующих типов :
  String,
  Boolean,
  Float,
  Date,
  Time,
  DateTime,
  Integer,
  SmallInt,
  Word,
  Currency,
  BLOB,
  CLOB;

Поддерживаются и в полях, и в параметрах. 
 Float и Integer - все понятно.
 Boolean - как NUMBER(1) - 1 байт. Нулевые значения - False, не нулевые - True.
 String  - в памяти - как строка символов фиксированого размера как поле. 
 Date    - хранится как TTimeStamp.Date(integer) - дней с 1.01.0001.
 Time    - хранится как TTimeStamp.Time(integer).
 DateTime- хранится как TTimeStamp.

Пока нету сached updates и полей LargeInt.
Если срочно нужно cached updates или LargeInt то пишите мне и они быстрее будут 
 готовы. 


ОБЩЕЕ ОПИСАНИЕ
--------------

   TOraDB - коннект к базе и управление транзакциями. Для хождения к базе все 
     компоненты используют этот компонент. Все вызовы OCI сосредоточены именно
     в этом компоненте.

   TAOraSQL - непосредственно выполняет вызовы OCI (выполнение запросов и
     кусков PL/SQL кода). Является полнофункциональным компонентом, применяется 
     для случаев когда не нужна совместимость с TDataSet, а именно если нужно 
     выполнить хранимую процедуру или кусок PL/SQL кода или запрос результаты 
     которого не нужно показывать в TDBGridе.
     Работает быстрее TOraSQL т.к не выполняет лишних действий связаных с 
     совместимостью с TDataSet. 
     Позволяет обращаться к результатам запроса по номеру строки. 
     За одно обращение к базе вытягивает столько записей сколько указано
     в свойстве FetchCount. При работе с большими таблицами рекомендуется увеличивать
     значение FetchCount. По умолчанию FetchCount = 100 что соответствует средним 
     размерам данных. 
     Если сделать ему просто Open то запрос откроется, но никакие данные не 
     вытянутся для этого надо использовать либо ReadAll после Open либо OpenAll.
     В этих случаях на клиента вытянутся все строки запроса. Если все строки не 
     нужны то можно использовать ф-цию ReadRecord(RecordNum) которая будет тянуть 
     по FetchCount записей за раз пока не будет вытянуто больше или столько же 
     строк сколько затребовали.
    
   TOraSQL - wrapper вокруг TAOraSQL для совместимости с TDataSet. Аналог TQuery,
     TStoredProc. Позволяет задать запрос к базе, поля (програмно и в дизайнере) 
     в общем работа с TOraSQL идет как со стандартными компонентами Delphi для
     доступа к данным. По умолчанию при открытии запроса вычитывается столько записей
     сколько надо для показа в гриде. Что бы прочитать больше записей можно 
     использовать ф-ции OpenAll, ReadAll, VGoto.
    
   TAOraUpdateSQL - компонента для подсоединения к TOraSQL и задания запросов на
     изменение (INSERT,DELETE,UPDATE) данных в таблице. является аналогом TUpdateSQL
     в Delphi только не содержит редактора как в TUpdateSQL поэтому запросы 
     изменения данных надо писать вручную в свойства DeleteSQL,InsertSQL,ModifySQL


Все классы находятся в следующих файлах:

    DynamicArrays.pas  - мои компоненты для работы с динамическими массивами.
                используются многими другими компонентами. Этот модуль может 
                использоваться отдельно от dOCI компонент т.к. содержит много
                классов для работы с массивами.
                         

    VirtualDataSet.pas - некоторое усовершенствование TDataSet для удобства.
                от него наследуются все компоненты требующие совместимости с 
                TDataSet.

    DataSetQuery.pas   - содержит наследника TVirtualDataSet который содержит
                90% функциональности конечных компонент. Для разработчика 
                компонент класс TDataSetQuery представляет наибольший интерес т.к.
                с перекрытием нескольких методов из него можно сделать нормальный 
                компонент для доступа к любым данным (например легко сделать 
                MemoryTable). Содержит так же класс TABlobStream, который 
                используется внутри TDataSetQuery для доступа к полям типа BLOB.

    OraDB.pas - содержит компонент TOraDB для коннекта к Ораклу, аналог 
                TDatabase в Delphi.

    AOraSQL.pas - содержит непосредственно класс TAOraSQL и используемые им же 2 
                класса TAOraField и TAOraParam для представления полей и параметров
                запроса.

    OraSQL.pas  - содержит класс TOraSQL.

    OraDefines.pas - содержит различные константы и определения для OCI вызовов

    OraError.pas - содержит класс EOraError порожденый от Exception.


ИНСТАЛЯЦИЯ
----------

Откройте package dOCI6.dpk (dOCI5.dpk для Delphi 5 или dOCI7.dpk для Delphi 7). 
Нажмите кнопки "Compile", а потом "Install" и компоненты установятся.
Искать их следует на странице "Data Access" палитры компонентов Delphi.



КАК РАБОТАТЬ С КОМПОНЕНТАМИ
---------------------------

  TOraDB - для коннекта на Oracle (аналог TDatabase в Delphi)
   Свойства :
    Active - открывает/закрывает коннекст к базе.
    DBLogin, DBPassword - имя и пароль в базу.
    DBServer - синоним сервера к которому конектимся (создается с помощью "Oracle
          Net8 Easy Config" либо ручками прописывается в файле 
          %oraclehome%/net80/admin/tnsnames.ora) 
   Методы:
    Open,Close - сконектиться/отконектиться
    StartTransaction,
    CommitTransaction,
    RollbackTransaction - управление транзакциями.


  TOraSQL - запросы к Oracle (совместима с TDataSet)
   Свойства :
    Database - к какой базе ходить(компонента TOraDB)
    SQL - текст запроса (как всегда - параметры начинаются с ':')
    Params - список параметров. 
    FetchCount - для SELECT - сколько записей вытягивать за одно обращение к серверу.
                 Как показывает практика, значение на уровне 1 - это примерно
                 скорость BDE.
    Prepare - подготовить запрос к выполнению. Вызывать необязательно.
    UnPrepare - освободить привязку, сделаную Prepare. Вызывать необязательно.

    Доступ к данным рекомендуется делать через следующие методы :
   GetFieldValue - получить значение поля. Намного быстрее FieldByName('').As...
        но неправильно отдает значения записей находящихся в режиме редактирования.
   GetFieldHArray - получить указатель на массив значений поля
   GetFieldNullHArray - получить указатель на массив признаков Null или NOT Null
      (по последним 2-м методам полезно внимательно просмотреть файл DynamicArrays.pas)

   ReadAll - прочитать все данные с сервера на локальную машину.
   OpenALl -  эквивалентно Open а затем ReadAll.
   VGoto   - прочитать все записи до указаной, если они еще не прочитаны.

  TAOraUpdateSQL - запросы изменения данных
    DeleteSQL, InsertSQL, ModifySQL - сюда пишутся запросы на изменение данных. Так же можно
    писать куски PL/SQL кода с определениями переменных и параметров (параметры начинаются с ':')



Работа с BLOB :

 При работе с TOraSQL BLOB поля можно читать используя стандартные методы от 
 TDataSet.

 Для записи пока надо использовать TAOraSQL. Что бы можно было записывать поля
 BLOB запрос должен содержать фразу "FOR UPDATE", иначе при попытке записать в
 поле BLOB возникнет ошибка. 

 TAOraSQL имеет функции для работы с BLOB:

   GetLobLength - получить размер данных в байтах содержащихся в поле.
   ReadBlob     - читает данные из заданного BLOB поля в буфер.
   WriteBlob    - записывает данные из заданного буфера в BLOB поле.
   ReadBlobToStream - читает весь BLOB в поток
   WriteBlobFromStream - перезаписывает BLOB поле из потока



Примеры
-------

1. Получение курсора из запроса.

   Для этого надо написать запрос, параметром которого является курсор и
   присвоить этому параметру тип данных ftCursor и тип параметра ptResult.
    Например, вызов StoredProc, возвращающей курсор :

   BEGIN  :Result := GetData(12); END;

   В тексте SQL можно писать PL/SQL-блок.


2. Если надо вытянуть запросом всего  несколько чисел (запрос такой что 
   возвращает несколько полей из одной строки таблицы) то лучше использовать 
   для этого параметры, а не поля, например :
    
  BEGIN SELECT Name,Index INTO :Name,:Index FROM Table1 WHERE ID = 6; END; 

   и результат получать через параметры 

   Name:=OraSQL.ParamByName('Name').AsString
   Ind:=OraSQL.ParamByName('Index').AsInteger

   правда типы параметров Name и Index надо будет задать ручками в 
   дизайнере или в коде программы.

  


 With best regards,
    Andrey Romanchenko. lasersquard@yahoo.com, lasersquad@tut.by
