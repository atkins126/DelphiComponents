unit smLngCmp;
//***************************************************************************//
//                                                                             
//           File generated by Smartbears Language Tools version 0.95          
//           www.smartbears.com                                                
//           for support email lng_tlz@smartbears.com                          
//           for information about outsourcing activity                        
//           mail contactus@smartbears.com                                     
//                                                                             
//           Components created:                                               
//           TsmAction                                                
//           TsmRichEdit                                                
//           TsmDBText                                                
//           TsmForm                                                
//           TsmLabel                                                
//           19.01.2003 4:15:38                                                
//                                                             
//***************************************************************************//

interface
uses ActnList,Classes,ComCtrls,Controls,DBCtrls,Forms,smLanguage,smPersistence,
   StdCtrls,SysUtils;

type
  TsmAction = class(TAction, IsmLanguage)
  private
    FLanguage: TsmLanguage;
    FOnLanguageChange: TsmLanguageEvent;
    FOptions: TsmTranslateOptions;
    FBindCount: Integer;
    function GetLanguage: TsmLanguage;
    function GetOnLanguageChange: TsmLanguageEvent;
    procedure SetOnLanguageChange(Value: TsmLanguageEvent);
    procedure SetLanguage(Value: TsmLanguage);
    procedure ForceSetLanguage(Value: TsmLanguage);
    function GetCaption: String;
    procedure RefreshCaption;
    function GetHint: String;
    procedure RefreshHint;

  protected
    procedure DoLanguage(ALanguage: TsmLanguage); virtual;
    function FindID(const APropertyName: String): String;
    procedure SetName(const NewName: TComponentName); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
      override;
    procedure Loaded; override;
    procedure SetCaption(const Value: String); virtual;
    procedure SetHint(const Value: String); virtual;

  public
    constructor Create(AOwner: TComponent); override;
    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
    procedure RefreshData;

  published
    property Language: TsmLanguage read GetLanguage write SetLanguage;
    property OnLanguageChange: TsmLanguageEvent read GetOnLanguageChange
       write SetOnLanguageChange;
    property Options: TsmTranslateOptions read FOptions write FOptions
       default [toSuppressTranslateIfLanguageActionIsLinked];
    property Caption: String read GetCaption write SetCaption;
    property Hint: String read GetHint write SetHint;

  end;

  TsmRichEdit = class(TRichEdit, IsmLanguage)
  private
    FLanguage: TsmLanguage;
    FOnLanguageChange: TsmLanguageEvent;
    FOptions: TsmTranslateOptions;
    FBindCount: Integer;
    function GetLanguage: TsmLanguage;
    function GetOnLanguageChange: TsmLanguageEvent;
    procedure SetOnLanguageChange(Value: TsmLanguageEvent);
    procedure SetLanguage(Value: TsmLanguage);
    procedure ForceSetLanguage(Value: TsmLanguage);
    function GetHint: String;
    procedure RefreshHint;
    function GetLines: TStrings;
    procedure RefreshLines;

  protected
    procedure DoLanguage(ALanguage: TsmLanguage); virtual;
    function FindID(const APropertyName: String): String;
    procedure SetName(const NewName: TComponentName); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
      override;
    procedure CreateWnd; override;
    procedure SetHint(const Value: String); virtual;
    procedure SetLines(const Value: TStrings); virtual;

  public
    constructor Create(AOwner: TComponent); override;
    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
    procedure RefreshData;

  published
    property Language: TsmLanguage read GetLanguage write SetLanguage;
    property OnLanguageChange: TsmLanguageEvent read GetOnLanguageChange
       write SetOnLanguageChange;
    property Options: TsmTranslateOptions read FOptions write FOptions
       default [toSuppressTranslateIfLanguageActionIsLinked];
    property Hint: String read GetHint write SetHint;
    property Lines: TStrings read GetLines write SetLines;

  end;

  TsmDBText = class(TDBText, IsmLanguage)
  private
    FLanguage: TsmLanguage;
    FOnLanguageChange: TsmLanguageEvent;
    FOptions: TsmTranslateOptions;
    FBindCount: Integer;
    function GetLanguage: TsmLanguage;
    function GetOnLanguageChange: TsmLanguageEvent;
    procedure SetOnLanguageChange(Value: TsmLanguageEvent);
    procedure SetLanguage(Value: TsmLanguage);
    procedure ForceSetLanguage(Value: TsmLanguage);
    function GetDataField: String;
    procedure RefreshDataField;
    function GetHint: String;
    procedure RefreshHint;

  protected
    procedure DoLanguage(ALanguage: TsmLanguage); virtual;
    function FindID(const APropertyName: String): String;
    procedure SetName(const NewName: TComponentName); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
      override;
    procedure Loaded; override;
    procedure SetDataField(const Value: String); virtual;
    procedure SetHint(const Value: String); virtual;

  public
    constructor Create(AOwner: TComponent); override;
    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
    procedure RefreshData;

  published
    property Language: TsmLanguage read GetLanguage write SetLanguage;
    property OnLanguageChange: TsmLanguageEvent read GetOnLanguageChange
       write SetOnLanguageChange;
    property Options: TsmTranslateOptions read FOptions write FOptions
       default [toSuppressTranslateIfLanguageActionIsLinked];
    property DataField: String read GetDataField write SetDataField;
    property Hint: String read GetHint write SetHint;

  end;

  TsmForm = class(TForm, IsmLanguage)
  private
    FLanguage: TsmLanguage;
    FOnLanguageChange: TsmLanguageEvent;
    FOptions: TsmTranslateOptions;
    FBindCount: Integer;
    function GetLanguage: TsmLanguage;
    function GetOnLanguageChange: TsmLanguageEvent;
    procedure SetOnLanguageChange(Value: TsmLanguageEvent);
    procedure SetLanguage(Value: TsmLanguage);
    procedure ForceSetLanguage(Value: TsmLanguage);
    function GetCaption: TCaption;
    procedure RefreshCaption;
    function GetHint: String;
    procedure RefreshHint;

  protected
    procedure DoLanguage(ALanguage: TsmLanguage); virtual;
    function FindID(const APropertyName: String): String;
    procedure SetName(const NewName: TComponentName); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
      override;
    procedure SetCaption(const Value: TCaption); virtual;
    procedure SetHint(const Value: String); virtual;

  public
    constructor Create(AOwner: TComponent); override;
    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
    procedure RefreshData;

  published
    property Language: TsmLanguage read GetLanguage write SetLanguage;
    property OnLanguageChange: TsmLanguageEvent read GetOnLanguageChange
       write SetOnLanguageChange;
    property Options: TsmTranslateOptions read FOptions write FOptions
       default [toSuppressTranslateIfLanguageActionIsLinked];
    property Caption: TCaption read GetCaption write SetCaption;
    property Hint: String read GetHint write SetHint;

  end;

  TsmLabel = class(TLabel, IsmLanguage)
  private
    FLanguage: TsmLanguage;
    FOnLanguageChange: TsmLanguageEvent;
    FOptions: TsmTranslateOptions;
    FBindCount: Integer;
    function GetLanguage: TsmLanguage;
    function GetOnLanguageChange: TsmLanguageEvent;
    procedure SetOnLanguageChange(Value: TsmLanguageEvent);
    procedure SetLanguage(Value: TsmLanguage);
    procedure ForceSetLanguage(Value: TsmLanguage);
    function GetCaption: TCaption;
    procedure RefreshCaption;
    function GetHint: String;
    procedure RefreshHint;

  protected
    procedure DoLanguage(ALanguage: TsmLanguage); virtual;
    function FindID(const APropertyName: String): String;
    procedure SetName(const NewName: TComponentName); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
      override;
    procedure Loaded; override;
    procedure SetCaption(const Value: TCaption); virtual;
    procedure SetHint(const Value: String); virtual;

  public
    constructor Create(AOwner: TComponent); override;
    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
    procedure RefreshData;

  published
    property Language: TsmLanguage read GetLanguage write SetLanguage;
    property OnLanguageChange: TsmLanguageEvent read GetOnLanguageChange
       write SetOnLanguageChange;
    property Options: TsmTranslateOptions read FOptions write FOptions
       default [toSuppressTranslateIfLanguageActionIsLinked];
    property Caption: TCaption read GetCaption write SetCaption;
    property Hint: String read GetHint write SetHint;

  end;


procedure Register;

implementation

uses smLanguageUtils;

procedure Register;
begin
   RegisterComponents('smartbears', [TsmRichEdit,TsmDBText,TsmLabel]);
   RegisterActions('Language', [TsmAction], nil);
end;



{ TsmAction }

constructor TsmAction.Create(AOwner: TComponent);
begin
  inherited;
  FLanguage := 0;
  FOptions := [toSuppressTranslateIfLanguageActionIsLinked];
  FBindCount := 0;
end;

procedure TsmAction.AfterConstruction;
begin
  inherited;
  smBindComponentToParent(Self);
end;

procedure TsmAction.BeforeDestruction;
begin
  if FBindCount > 0 then
  begin
    smUnBindComponentFromParent(Self);
    Dec(FBindCount);
  end;
  if FBindCount <> 0 then raise EsmUserComponent.Create(
    'Wrong unbind operation');
  inherited;
end;

procedure TsmAction.Notification(AComponent: TComponent;
  Operation: TOperation);
var
  ldummy: IsmLanguage;
begin
  inherited;
  if (AComponent <> nil) and (AComponent = Owner) and
    (Operation = opRemove) then
  begin
    if AComponent.GetInterface(IsmLanguage, ldummy) then
    begin
      if FBindCount > 0 then
      begin
        smUnBindComponentFromParent(Self);
        Dec(FBindCount);
      end;
    end;
  end;
end;

procedure TsmAction.SetName(const NewName: TComponentName);
begin
  inherited;
  DoLanguage(FLanguage);
end;

procedure TsmAction.Loaded;
begin
  inherited;
  DoLanguage(FLanguage);
end;


function TsmAction.GetLanguage: TsmLanguage;
begin
  Result := FLanguage;
end;

function TsmAction.GetOnLanguageChange: TsmLanguageEvent;
begin
  Result := FOnLanguageChange;
end;

procedure TsmAction.SetOnLanguageChange(Value: TsmLanguageEvent);
begin
  FOnLanguageChange := Value;
end;

procedure TsmAction.SetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  if Value <> FLanguage then
  begin
    FLanguage := Value;
    if toSuppressTranslateIfLanguageActionIsLinked in FOptions then
    begin
       if smHasActionPropertyLanguage(Self) = nil then
          DoLanguage(Value);
    end;

    for i := 0 to ComponentCount - 1 do
      if Components[i].GetInterface(IsmLanguage, lng) then
        lng.Language := Value;
  end;
end;

procedure TsmAction.ForceSetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  FLanguage := Value;
  DoLanguage(Value);

  for i := 0 to ComponentCount - 1 do
    if Components[i].GetInterface(IsmLanguage, lng) then
      lng.ForceSetLanguage(Value);
end;


function TsmAction.FindID(const APropertyName: String): String;
var
  lIgnorePostfix: Boolean;
begin
  lIgnorePostfix := toIgnorePostfix in FOptions;
  Result := smGetID(Self, APropertyName, lIgnorePostfix);
end;

procedure TsmAction.DoLanguage(ALanguage: TsmLanguage);
begin
  if [csLoading, csReading, csWriting, csDestroying] * ComponentState = [] then
  RefreshData;
  if Assigned(FOnLanguageChange) then
    FOnLanguageChange(Self, FLanguage);
end;


procedure TsmAction.RefreshData;
begin
  if ComponentState * [csLoading, csDestroying] = [] then
  begin
    RefreshCaption;
    RefreshHint;
  end;
end;

function TsmAction.GetCaption: String;
begin
   Result := inherited Caption;
end;


procedure TsmAction.SetCaption(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
    begin
        if Value <> GetCaption then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Caption');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshCaption;
        finally
          Instance.DecConnection;
        end;
      end;
    end;
  end;
end;

procedure TsmAction.RefreshCaption;
begin
  try
    inherited Caption := smFindCaption(FindID('Caption'), FLanguage);
  except
    on EsmComponent do inherited Caption := '';
    else raise;
  end;
end;
function TsmAction.GetHint: String;
begin
   Result := inherited Hint;
end;


procedure TsmAction.SetHint(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetHint then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Hint');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshHint;
        finally
          Instance.DecConnection;
        end;
      end;
    end;
  end;
end;

procedure TsmAction.RefreshHint;
begin
  try
    inherited Hint := smFindCaption(FindID('Hint'), FLanguage);
  except
    on EsmComponent do inherited Hint := '';
    else raise;
  end;
end;

{ TsmRichEdit }

constructor TsmRichEdit.Create(AOwner: TComponent);
begin
  inherited;
  FLanguage := 0;
  FOptions := [toSuppressTranslateIfLanguageActionIsLinked];
  FBindCount := 0;
end;

procedure TsmRichEdit.AfterConstruction;
begin
  inherited;
  smBindComponentToParent(Self);
end;

procedure TsmRichEdit.BeforeDestruction;
begin
  if FBindCount > 0 then
  begin
    smUnBindComponentFromParent(Self);
    Dec(FBindCount);
  end;
  if FBindCount <> 0 then raise EsmUserComponent.Create(
    'Wrong unbind operation');
  inherited;
end;

procedure TsmRichEdit.Notification(AComponent: TComponent;
  Operation: TOperation);
var
  ldummy: IsmLanguage;
begin
  inherited;
  if (AComponent <> nil) and (AComponent = Owner) and
    (Operation = opRemove) then
  begin
    if AComponent.GetInterface(IsmLanguage, ldummy) then
    begin
      if FBindCount > 0 then
      begin
        smUnBindComponentFromParent(Self);
        Dec(FBindCount);
      end;
    end;
  end;
end;

procedure TsmRichEdit.SetName(const NewName: TComponentName);
begin
  inherited;
  DoLanguage(FLanguage);
end;

procedure TsmRichEdit.CreateWnd;
begin
  inherited;
  DoLanguage(FLanguage);
end;


function TsmRichEdit.GetLanguage: TsmLanguage;
begin
  Result := FLanguage;
end;

function TsmRichEdit.GetOnLanguageChange: TsmLanguageEvent;
begin
  Result := FOnLanguageChange;
end;

procedure TsmRichEdit.SetOnLanguageChange(Value: TsmLanguageEvent);
begin
  FOnLanguageChange := Value;
end;

procedure TsmRichEdit.SetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  if Value <> FLanguage then
  begin
    FLanguage := Value;
    if toSuppressTranslateIfLanguageActionIsLinked in FOptions then
    begin
       if smHasActionPropertyLanguage(Self) = nil then
          DoLanguage(Value);
    end;

    for i := 0 to ComponentCount - 1 do
      if Components[i].GetInterface(IsmLanguage, lng) then
        lng.Language := Value;
  end;
end;

procedure TsmRichEdit.ForceSetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  FLanguage := Value;
  DoLanguage(Value);

  for i := 0 to ComponentCount - 1 do
    if Components[i].GetInterface(IsmLanguage, lng) then
      lng.ForceSetLanguage(Value);
end;


function TsmRichEdit.FindID(const APropertyName: String): String;
var
  lIgnorePostfix: Boolean;
begin
  lIgnorePostfix := toIgnorePostfix in FOptions;
  Result := smGetID(Self, APropertyName, lIgnorePostfix);
end;

procedure TsmRichEdit.DoLanguage(ALanguage: TsmLanguage);
begin
  if [csLoading, csReading, csWriting, csDestroying] * ComponentState = [] then
  if HandleAllocated then
  begin
    RefreshData;
    Repaint;
  end;
  if Assigned(FOnLanguageChange) then
    FOnLanguageChange(Self, FLanguage);
end;


procedure TsmRichEdit.RefreshData;
begin
  if ComponentState * [csLoading, csDestroying] = [] then
  begin
    RefreshHint;
    RefreshLines;
  end;
end;

function TsmRichEdit.GetHint: String;
begin
   Result := inherited Hint;
end;


procedure TsmRichEdit.SetHint(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetHint then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Hint');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshHint;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmRichEdit.RefreshHint;
begin
  try
    inherited Hint := smFindCaption(FindID('Hint'), FLanguage);
  except
    on EsmComponent do inherited Hint := '';
    else raise;
  end;
end;
function TsmRichEdit.GetLines: TStrings;
begin
   Result := inherited Lines;
end;


procedure TsmRichEdit.SetLines(const Value: TStrings);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetLines then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Lines');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value.Text;
          DataSet.Post;

          RefreshLines;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmRichEdit.RefreshLines;
begin
  try
    inherited Lines.Text := smFindCaption(FindID('Lines'), FLanguage);
  except
    on EsmComponent do inherited Lines.Text := '';
    else raise;
  end;
end;

{ TsmDBText }

constructor TsmDBText.Create(AOwner: TComponent);
begin
  inherited;
  FLanguage := 0;
  FOptions := [toSuppressTranslateIfLanguageActionIsLinked];
  FBindCount := 0;
end;

procedure TsmDBText.AfterConstruction;
begin
  inherited;
  smBindComponentToParent(Self);
end;

procedure TsmDBText.BeforeDestruction;
begin
  if FBindCount > 0 then
  begin
    smUnBindComponentFromParent(Self);
    Dec(FBindCount);
  end;
  if FBindCount <> 0 then raise EsmUserComponent.Create(
    'Wrong unbind operation');
  inherited;
end;

procedure TsmDBText.Notification(AComponent: TComponent;
  Operation: TOperation);
var
  ldummy: IsmLanguage;
begin
  inherited;
  if (AComponent <> nil) and (AComponent = Owner) and
    (Operation = opRemove) then
  begin
    if AComponent.GetInterface(IsmLanguage, ldummy) then
    begin
      if FBindCount > 0 then
      begin
        smUnBindComponentFromParent(Self);
        Dec(FBindCount);
      end;
    end;
  end;
end;

procedure TsmDBText.SetName(const NewName: TComponentName);
begin
  inherited;
  DoLanguage(FLanguage);
end;

procedure TsmDBText.Loaded;
begin
  inherited;
  DoLanguage(FLanguage);
end;


function TsmDBText.GetLanguage: TsmLanguage;
begin
  Result := FLanguage;
end;

function TsmDBText.GetOnLanguageChange: TsmLanguageEvent;
begin
  Result := FOnLanguageChange;
end;

procedure TsmDBText.SetOnLanguageChange(Value: TsmLanguageEvent);
begin
  FOnLanguageChange := Value;
end;

procedure TsmDBText.SetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  if Value <> FLanguage then
  begin
    FLanguage := Value;
    if toSuppressTranslateIfLanguageActionIsLinked in FOptions then
    begin
       if smHasActionPropertyLanguage(Self) = nil then
          DoLanguage(Value);
    end;

    for i := 0 to ComponentCount - 1 do
      if Components[i].GetInterface(IsmLanguage, lng) then
        lng.Language := Value;
  end;
end;

procedure TsmDBText.ForceSetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  FLanguage := Value;
  DoLanguage(Value);

  for i := 0 to ComponentCount - 1 do
    if Components[i].GetInterface(IsmLanguage, lng) then
      lng.ForceSetLanguage(Value);
end;


function TsmDBText.FindID(const APropertyName: String): String;
var
  lIgnorePostfix: Boolean;
begin
  lIgnorePostfix := toIgnorePostfix in FOptions;
  Result := smGetID(Self, APropertyName, lIgnorePostfix);
end;

procedure TsmDBText.DoLanguage(ALanguage: TsmLanguage);
begin
  if [csLoading, csReading, csWriting, csDestroying] * ComponentState = [] then
  RefreshData;
  Repaint;
  if Assigned(FOnLanguageChange) then
    FOnLanguageChange(Self, FLanguage);
end;


procedure TsmDBText.RefreshData;
begin
  if ComponentState * [csLoading, csDestroying] = [] then
  begin
    RefreshDataField;
    RefreshHint;
  end;
end;

function TsmDBText.GetDataField: String;
begin
   Result := inherited DataField;
end;


procedure TsmDBText.SetDataField(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetDataField then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('DataField');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshDataField;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmDBText.RefreshDataField;
begin
  try
    inherited DataField := smFindCaption(FindID('DataField'), FLanguage);
  except
    on EsmComponent do inherited DataField := '';
    else raise;
  end;
end;
function TsmDBText.GetHint: String;
begin
   Result := inherited Hint;
end;


procedure TsmDBText.SetHint(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetHint then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Hint');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshHint;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmDBText.RefreshHint;
begin
  try
    inherited Hint := smFindCaption(FindID('Hint'), FLanguage);
  except
    on EsmComponent do inherited Hint := '';
    else raise;
  end;
end;

{ TsmForm }

constructor TsmForm.Create(AOwner: TComponent);
begin
  inherited;
  FLanguage := 0;
  FOptions := [toSuppressTranslateIfLanguageActionIsLinked];
  FBindCount := 0;
end;

procedure TsmForm.AfterConstruction;
begin
  inherited;
  smBindComponentToParent(Self);
  DoLanguage(FLanguage);
end;

procedure TsmForm.BeforeDestruction;
begin
  if FBindCount > 0 then
  begin
    smUnBindComponentFromParent(Self);
    Dec(FBindCount);
  end;
  if FBindCount <> 0 then raise EsmUserComponent.Create(
    'Wrong unbind operation');
  inherited;
end;

procedure TsmForm.Notification(AComponent: TComponent;
  Operation: TOperation);
var
  ldummy: IsmLanguage;
begin
  inherited;
  if (AComponent <> nil) and (AComponent = Owner) and
    (Operation = opRemove) then
  begin
    if AComponent.GetInterface(IsmLanguage, ldummy) then
    begin
      if FBindCount > 0 then
      begin
        smUnBindComponentFromParent(Self);
        Dec(FBindCount);
      end;
    end;
  end;
end;

procedure TsmForm.SetName(const NewName: TComponentName);
begin
  inherited;
  DoLanguage(FLanguage);
end;


function TsmForm.GetLanguage: TsmLanguage;
begin
  Result := FLanguage;
end;

function TsmForm.GetOnLanguageChange: TsmLanguageEvent;
begin
  Result := FOnLanguageChange;
end;

procedure TsmForm.SetOnLanguageChange(Value: TsmLanguageEvent);
begin
  FOnLanguageChange := Value;
end;

procedure TsmForm.SetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  if Value <> FLanguage then
  begin
    FLanguage := Value;
    if toSuppressTranslateIfLanguageActionIsLinked in FOptions then
    begin
       if smHasActionPropertyLanguage(Self) = nil then
          DoLanguage(Value);
    end;

    for i := 0 to ComponentCount - 1 do
      if Components[i].GetInterface(IsmLanguage, lng) then
        lng.Language := Value;
  end;
end;

procedure TsmForm.ForceSetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  FLanguage := Value;
  DoLanguage(Value);

  for i := 0 to ComponentCount - 1 do
    if Components[i].GetInterface(IsmLanguage, lng) then
      lng.ForceSetLanguage(Value);
end;


function TsmForm.FindID(const APropertyName: String): String;
var
  lIgnorePostfix: Boolean;
begin
  lIgnorePostfix := toIgnorePostfix in FOptions;
  Result := smGetID(Self, APropertyName, lIgnorePostfix);
end;

procedure TsmForm.DoLanguage(ALanguage: TsmLanguage);
begin
  if [csLoading, csReading, csWriting, csDestroying] * ComponentState = [] then
  if HandleAllocated then
  begin
    RefreshData;
    Repaint;
  end;
  if Assigned(FOnLanguageChange) then
    FOnLanguageChange(Self, FLanguage);
end;


procedure TsmForm.RefreshData;
begin
  if ComponentState * [csLoading, csDestroying] = [] then
  begin
    RefreshCaption;
    RefreshHint;
  end;
end;

function TsmForm.GetCaption: TCaption;
begin
   Result := inherited Caption;
end;


procedure TsmForm.SetCaption(const Value: TCaption);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetCaption then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Caption');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshCaption;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmForm.RefreshCaption;
begin
  try
    inherited Caption := smFindCaption(FindID('Caption'), FLanguage);
  except
    on EsmComponent do inherited Caption := '';
    else raise;
  end;
end;
function TsmForm.GetHint: String;
begin
   Result := inherited Hint;
end;


procedure TsmForm.SetHint(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetHint then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Hint');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshHint;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmForm.RefreshHint;
begin
  try
    inherited Hint := smFindCaption(FindID('Hint'), FLanguage);
  except
    on EsmComponent do inherited Hint := '';
    else raise;
  end;
end;

{ TsmLabel }

constructor TsmLabel.Create(AOwner: TComponent);
begin
  inherited;
  FLanguage := 0;
  FOptions := [toSuppressTranslateIfLanguageActionIsLinked];
  FBindCount := 0;
end;

procedure TsmLabel.AfterConstruction;
begin
  inherited;
  smBindComponentToParent(Self);
end;

procedure TsmLabel.BeforeDestruction;
begin
  if FBindCount > 0 then
  begin
    smUnBindComponentFromParent(Self);
    Dec(FBindCount);
  end;
  if FBindCount <> 0 then raise EsmUserComponent.Create(
    'Wrong unbind operation');
  inherited;
end;

procedure TsmLabel.Notification(AComponent: TComponent;
  Operation: TOperation);
var
  ldummy: IsmLanguage;
begin
  inherited;
  if (AComponent <> nil) and (AComponent = Owner) and
    (Operation = opRemove) then
  begin
    if AComponent.GetInterface(IsmLanguage, ldummy) then
    begin
      if FBindCount > 0 then
      begin
        smUnBindComponentFromParent(Self);
        Dec(FBindCount);
      end;
    end;
  end;
end;

procedure TsmLabel.SetName(const NewName: TComponentName);
begin
  inherited;
  DoLanguage(FLanguage);
end;

procedure TsmLabel.Loaded;
begin
  inherited;
  DoLanguage(FLanguage);
end;


function TsmLabel.GetLanguage: TsmLanguage;
begin
  Result := FLanguage;
end;

function TsmLabel.GetOnLanguageChange: TsmLanguageEvent;
begin
  Result := FOnLanguageChange;
end;

procedure TsmLabel.SetOnLanguageChange(Value: TsmLanguageEvent);
begin
  FOnLanguageChange := Value;
end;

procedure TsmLabel.SetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  if Value <> FLanguage then
  begin
    FLanguage := Value;
    if toSuppressTranslateIfLanguageActionIsLinked in FOptions then
    begin
       if smHasActionPropertyLanguage(Self) = nil then
          DoLanguage(Value);
    end;

    for i := 0 to ComponentCount - 1 do
      if Components[i].GetInterface(IsmLanguage, lng) then
        lng.Language := Value;
  end;
end;

procedure TsmLabel.ForceSetLanguage(Value: TsmLanguage);
var
  i: Integer;
  lng: IsmLanguage;
begin
  FLanguage := Value;
  DoLanguage(Value);

  for i := 0 to ComponentCount - 1 do
    if Components[i].GetInterface(IsmLanguage, lng) then
      lng.ForceSetLanguage(Value);
end;


function TsmLabel.FindID(const APropertyName: String): String;
var
  lIgnorePostfix: Boolean;
begin
  lIgnorePostfix := toIgnorePostfix in FOptions;
  Result := smGetID(Self, APropertyName, lIgnorePostfix);
end;

procedure TsmLabel.DoLanguage(ALanguage: TsmLanguage);
begin
  if [csLoading, csReading, csWriting, csDestroying] * ComponentState = [] then
  RefreshData;
  Repaint;
  if Assigned(FOnLanguageChange) then
    FOnLanguageChange(Self, FLanguage);
end;


procedure TsmLabel.RefreshData;
begin
  if ComponentState * [csLoading, csDestroying] = [] then
  begin
    RefreshCaption;
    RefreshHint;
  end;
end;

function TsmLabel.GetCaption: TCaption;
begin
   Result := inherited Caption;
end;


procedure TsmLabel.SetCaption(const Value: TCaption);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetCaption then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Caption');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshCaption;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmLabel.RefreshCaption;
begin
  try
    inherited Caption := smFindCaption(FindID('Caption'), FLanguage);
  except
    on EsmComponent do inherited Caption := '';
    else raise;
  end;
end;
function TsmLabel.GetHint: String;
begin
   Result := inherited Hint;
end;


procedure TsmLabel.SetHint(const Value: String);
var
  lID: String;
begin
  with TsmPersistentRoot.Instance do
  begin
    if (csDesigning in ComponentState) and not IsConnected then
      Exit;

    if (ComponentState * [csLoading, csDestroying] = []) and
       (proAutoOpenConnectionRunTime in Options) then
      begin
        if Value <> GetHint then
      begin
        IncConnection;
        with smGetCaptionTable as IsmCaptionTable do
        try
          try
            lID:=FindID('Hint');
            smFindCaption(lID, FLanguage);
            DataSet.Edit;
          except
            on EsmComponent do
            begin
              DataSet.Insert;
              IDField.Value := lID;
              LanguageField.Value := FLanguage;
            end
            else raise;
          end;

          ValueField.Value := Value;
          DataSet.Post;

          RefreshHint;
        finally
          Instance.DecConnection;
        end;
        Repaint;
      end;
    end;
  end;
end;

procedure TsmLabel.RefreshHint;
begin
  try
    inherited Hint := smFindCaption(FindID('Hint'), FLanguage);
  except
    on EsmComponent do inherited Hint := '';
    else raise;
  end;
end;



end.
