{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radclasses;interfaceuses RadCommon, Windows, classes, radSystem;type  TListClassInfo = class;  TThreadListClassInfo = class;  TInterfaceListClassInfo = class;  TBitsClassInfo = class;  TPersistentClassInfo = class;  TCollectionItemClassInfo = class;  TCollectionClassInfo = class;  TOwnedCollectionClassInfo = class;  TStringsClassInfo = class;  TStringListClassInfo = class;  TStreamClassInfo = class;  THandleStreamClassInfo = class;  TFileStreamClassInfo = class;  TCustomMemoryStreamClassInfo = class;  TMemoryStreamClassInfo = class;  TStringStreamClassInfo = class;  TResourceStreamClassInfo = class;  TFilerClassInfo = class;  TReaderClassInfo = class;  TWriterClassInfo = class;  TThreadClassInfo = class;  TComponentClassInfo = class;  TBasicActionLinkClassInfo = class;  TBasicActionClassInfo = class;  TListClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TThreadListClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TInterfaceListClassInfo = class(TInterfacedObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBitsClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TPersistentClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCollectionItemClassInfo = class(TPersistentClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCollectionClassInfo = class(TPersistentClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TOwnedCollectionClassInfo = class(TCollectionClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TStringsClassInfo = class(TPersistentClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TStringListClassInfo = class(TStringsClassInfo)  private    _VarParam_Find_Index: Integer;    _Event_OnChange: TNotifyEvent;    _Event_OnChanging: TNotifyEvent;    procedure OnChange(Sender: TObject);    procedure OnChanging(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TStreamClassInfo = class(TObjectClassInfo)  private    _VarParam_Read_Buffer: Variant;    _VarParam_ReadBuffer_Buffer: Variant;    _VarParam_WriteResourceHeader_FixupInfo: Integer;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  THandleStreamClassInfo = class(TStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TFileStreamClassInfo = class(THandleStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomMemoryStreamClassInfo = class(TStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TMemoryStreamClassInfo = class(TCustomMemoryStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TStringStreamClassInfo = class(TStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TResourceStreamClassInfo = class(TCustomMemoryStreamClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TFilerClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TReaderClassInfo = class(TFilerClassInfo)  private    _MethodRes_ReadInt64: Int64;    _VarParam_Read_Buf: Variant;    _VarParam_ReadPrefix_Flags: ^TFilerFlags;    _VarParam_ReadPrefix_AChildPos: Integer;    _Event_OnError: TReaderError;    _Event_OnFindMethod: TFindMethodEvent;    _Event_OnSetName: TSetNameEvent;    _Event_OnReferenceName: TReferenceNameEvent;    _Event_OnAncestorNotFound: TAncestorNotFoundEvent;    _Event_OnCreateComponent: TCreateComponentEvent;    _Event_OnFindComponentClass: TFindComponentClassEvent;    procedure OnError(Reader: TReader; const Message: string; var Handled: Boolean);    procedure OnFindMethod(Reader: TReader; const MethodName: string; var Address: Pointer; var Error: Boolean);    procedure OnSetName(Reader: TReader; Component: TComponent; var Name: string);    procedure OnReferenceName(Reader: TReader; var Name: string);    procedure OnAncestorNotFound(Reader: TReader; const ComponentName: string; ComponentClass: TPersistentClass; var Component: TComponent);    procedure OnCreateComponent(Reader: TReader; ComponentClass: TComponentClass; var Component: TComponent);    procedure OnFindComponentClass(Reader: TReader; const ClassName: string; var ComponentClass: TComponentClass);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TWriterClassInfo = class(TFilerClassInfo)  private    _Event_OnFindAncestor: TFindAncestorEvent;    procedure OnFindAncestor(Writer: TWriter; Component: TComponent; const Name: string; var Ancestor: TComponent; var RootAncestor: TComponent);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TThreadClassInfo = class(TObjectClassInfo)  private    _Prop_Handle: THandle;    _Prop_ThreadID: THandle;    _MethodRes_WaitFor: Longword;    _Event_OnTerminate: TNotifyEvent;    procedure OnTerminate(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TComponentClassInfo = class(TPersistentClassInfo)  private    _Prop_ComponentState: TComponentState;    _Prop_ComponentStyle: TComponentStyle;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBasicActionLinkClassInfo = class(TObjectClassInfo)  private    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TBasicActionClassInfo = class(TComponentClassInfo)  private    _Event_OnChange: TNotifyEvent;    _Event_OnExecute: TNotifyEvent;    _Event_OnUpdate: TNotifyEvent;    procedure OnChange(Sender: TObject);    procedure OnExecute(Sender: TObject);    procedure OnUpdate(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTList = class(TList);  TProtectedTThreadList = class(TThreadList);  TProtectedTInterfaceList = class(TInterfaceList);  TProtectedTBits = class(TBits);  TProtectedTPersistent = class(TPersistent);  TProtectedTCollectionItem = class(TCollectionItem);  TProtectedTCollection = class(TCollection);  TProtectedTOwnedCollection = class(TOwnedCollection);  TProtectedTStrings = class(TStrings);  TProtectedTStringList = class(TStringList);  TProtectedTStream = class(TStream);  TProtectedTHandleStream = class(THandleStream);  TProtectedTFileStream = class(TFileStream);  TProtectedTCustomMemoryStream = class(TCustomMemoryStream);  TProtectedTMemoryStream = class(TMemoryStream);  TProtectedTStringStream = class(TStringStream);  TProtectedTResourceStream = class(TResourceStream);  TProtectedTFiler = class(TFiler);  TProtectedTReader = class(TReader);  TProtectedTWriter = class(TWriter);  TProtectedTThread = class(TThread);  TProtectedTComponent = class(TComponent);  TProtectedTBasicActionLink = class(TBasicActionLink);  TProtectedTBasicAction = class(TBasicAction);const  TListProperties: String =     'Define::Capacity::psReadable..psWritable::pvPublic::0::' +    'Define::Count::psReadable..psWritable::pvPublic::0::' +    'Define::Items::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::List::psReadable::pvPublic::0';  TListMethods: String =     'Add::msFunction::1::Item::' +    'Clear::msProcedure::0::' +    'Delete::msProcedure::1::Index::' +    'Exchange::msProcedure::2::Index1::Index2::' +    'Expand::msFunction::0::' +    'Extract::msFunction::1::Item::' +    'First::msFunction::0::' +    'IndexOf::msFunction::1::Item::' +    'Insert::msProcedure::2::Index::Item::' +    'Last::msFunction::0::' +    'Move::msProcedure::2::CurIndex::NewIndex::' +    'Remove::msFunction::1::Item::' +    'Pack::msProcedure::0';  TListConstructors: String =     '';  TListEvents: String =     '';  TThreadListProperties: String =     'Define::Duplicates::psReadable..psWritable::pvPublic::0';  TThreadListMethods: String =     'Add::msProcedure::1::Item::' +    'Clear::msProcedure::0::' +    'LockList::msFunction::0::' +    'Remove::msProcedure::1::Item::' +    'UnlockList::msProcedure::0';  TThreadListConstructors: String =     'Create::0';  TThreadListEvents: String =     '';  TInterfaceListProperties: String =     'Define::Capacity::psReadable..psWritable::pvPublic::0::' +    'Define::Count::psReadable..psWritable::pvPublic::0::' +    'Define::Items::psReadable..psWritable..psIndexed::pvPublic::1::Index';  TInterfaceListMethods: String =     'Clear::msProcedure::0::' +    'Delete::msProcedure::1::Index::' +    'Exchange::msProcedure::2::Index1::Index2::' +    'Expand::msFunction::0::' +    'First::msFunction::0::' +    'IndexOf::msFunction::1::Item::' +    'Add::msFunction::1::Item::' +    'Insert::msProcedure::2::Index::Item::' +    'Last::msFunction::0::' +    'Remove::msFunction::1::Item::' +    'Lock::msProcedure::0::' +    'Unlock::msProcedure::0';  TInterfaceListConstructors: String =     'Create::0';  TInterfaceListEvents: String =     '';  TBitsProperties: String =     'Define::Bits::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::Size::psReadable..psWritable::pvPublic::0';  TBitsMethods: String =     'OpenBit::msFunction::0';  TBitsConstructors: String =     '';  TBitsEvents: String =     '';  TPersistentProperties: String =     '';  TPersistentMethods: String =     'Assign::msProcedure::1::Source::' +    'GetNamePath::msFunction::0';  TPersistentConstructors: String =     '';  TPersistentEvents: String =     '';  TCollectionItemProperties: String =     'Define::Collection::psReadable..psWritable::pvPublic::0::' +    'Define::ID::psReadable::pvPublic::0::' +    'Define::Index::psReadable..psWritable::pvPublic::0::' +    'Define::DisplayName::psReadable..psWritable::pvPublic::0';  TCollectionItemMethods: String =     '';  TCollectionItemConstructors: String =     'Create::1::Collection';  TCollectionItemEvents: String =     '';  TCollectionProperties: String =     'Define::NextID::psReadable::pvProtected::0::' +    'Define::PropName::psReadable..psWritable::pvProtected::0::' +    'Define::UpdateCount::psReadable::pvProtected::0::' +    'Define::Count::psReadable::pvPublic::0::' +    'Define::ItemClass::psReadable::pvPublic::0::' +    'Define::Items::psReadable..psWritable..psIndexed::pvPublic::1::Index';  TCollectionMethods: String =     'Add::msFunction::0::' +    'BeginUpdate::msProcedure::0::' +    'Clear::msProcedure::0::' +    'Delete::msProcedure::1::Index::' +    'EndUpdate::msProcedure::0::' +    'FindItemID::msFunction::1::ID::' +    'Insert::msFunction::1::Index';  TCollectionConstructors: String =     'Create::1::ItemClass';  TCollectionEvents: String =     '';  TOwnedCollectionProperties: String =     '';  TOwnedCollectionMethods: String =     '';  TOwnedCollectionConstructors: String =     'Create::2::AOwner::ItemClass';  TOwnedCollectionEvents: String =     '';  TStringsProperties: String =     'Define::Capacity::psReadable..psWritable::pvPublic::0::' +    'Define::CommaText::psReadable..psWritable::pvPublic::0::' +    'Define::Count::psReadable::pvPublic::0::' +    'Define::Names::psReadable..psIndexed::pvPublic::1::Index::' +    'Define::Objects::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::Values::psReadable..psWritable..psIndexed::pvPublic::1::Name::' +    'Define::Strings::psReadable..psWritable..psIndexed::pvPublic::1::Index::' +    'Define::Text::psReadable..psWritable::pvPublic::0::' +    'Define::StringsAdapter::psReadable..psWritable::pvPublic::0';  TStringsMethods: String =     'Add::msFunction::1::S::' +    'AddObject::msFunction::2::S::AObject::' +    'Append::msProcedure::1::S::' +    'AddStrings::msProcedure::1::Strings::' +    'BeginUpdate::msProcedure::0::' +    'Clear::msProcedure::0::' +    'Delete::msProcedure::1::Index::' +    'EndUpdate::msProcedure::0::' +    'Equals::msFunction::1::Strings::' +    'Exchange::msProcedure::2::Index1::Index2::' +    'GetText::msFunction::0::' +    'IndexOf::msFunction::1::S::' +    'IndexOfName::msFunction::1::Name::' +    'IndexOfObject::msFunction::1::AObject::' +    'Insert::msProcedure::2::Index::S::' +    'InsertObject::msProcedure::3::Index::S::AObject::' +    'LoadFromFile::msProcedure::1::FileName::' +    'LoadFromStream::msProcedure::1::Stream::' +    'Move::msProcedure::2::CurIndex::NewIndex::' +    'SaveToFile::msProcedure::1::FileName::' +    'SaveToStream::msProcedure::1::Stream::' +    'SetText::msProcedure::1::Text';  TStringsConstructors: String =     '';  TStringsEvents: String =     '';  TStringListProperties: String =     'Define::Duplicates::psReadable..psWritable::pvPublic::0::' +    'Define::Sorted::psReadable..psWritable::pvPublic::0';  TStringListMethods: String =     'Find::msFunction::2::S::Index::' +    'Sort::msProcedure::0';  TStringListConstructors: String =     '';  TStringListEvents: String =     'Define::OnChange::pvPublic::1::Sender::' +    'Define::OnChanging::pvPublic::1::Sender';  TStreamProperties: String =     'Define::Position::psReadable..psWritable::pvPublic::0::' +    'Define::Size::psReadable..psWritable::pvPublic::0';  TStreamMethods: String =     'Read::msFunction::2::Buffer::Count::' +    'Write::msFunction::2::Buffer::Count::' +    'Seek::msFunction::2::Offset::Origin::' +    'ReadBuffer::msProcedure::2::Buffer::Count::' +    'WriteBuffer::msProcedure::2::Buffer::Count::' +    'CopyFrom::msFunction::2::Source::Count::' +    'ReadComponent::msFunction::1::Instance::' +    'ReadComponentRes::msFunction::1::Instance::' +    'WriteComponent::msProcedure::1::Instance::' +    'WriteComponentRes::msProcedure::2::ResName::Instance::' +    'WriteDescendent::msProcedure::2::Instance::Ancestor::' +    'WriteDescendentRes::msProcedure::3::ResName::Instance::Ancestor::' +    'WriteResourceHeader::msProcedure::2::ResName::FixupInfo::' +    'FixupResourceHeader::msProcedure::1::FixupInfo::' +    'ReadResHeader::msProcedure::0';  TStreamConstructors: String =     '';  TStreamEvents: String =     '';  THandleStreamProperties: String =     'Define::Handle::psReadable::pvPublic::0';  THandleStreamMethods: String =     '';  THandleStreamConstructors: String =     'Create::1::AHandle';  THandleStreamEvents: String =     '';  TFileStreamProperties: String =     '';  TFileStreamMethods: String =     '';  TFileStreamConstructors: String =     'Create::2::FileName::Mode';  TFileStreamEvents: String =     '';  TCustomMemoryStreamProperties: String =     'Define::Memory::psReadable::pvPublic::0';  TCustomMemoryStreamMethods: String =     'SaveToStream::msProcedure::1::Stream::' +    'SaveToFile::msProcedure::1::FileName';  TCustomMemoryStreamConstructors: String =     '';  TCustomMemoryStreamEvents: String =     '';  TMemoryStreamProperties: String =     'Define::Capacity::psReadable..psWritable::pvProtected::0';  TMemoryStreamMethods: String =     'Clear::msProcedure::0::' +    'LoadFromStream::msProcedure::1::Stream::' +    'LoadFromFile::msProcedure::1::FileName';  TMemoryStreamConstructors: String =     '';  TMemoryStreamEvents: String =     '';  TStringStreamProperties: String =     'Define::DataString::psReadable::pvPublic::0';  TStringStreamMethods: String =     'ReadString::msFunction::1::Count::' +    'WriteString::msProcedure::1::AString';  TStringStreamConstructors: String =     'Create::1::AString';  TStringStreamEvents: String =     '';  TResourceStreamProperties: String =     '';  TResourceStreamMethods: String =     '';  TResourceStreamConstructors: String =     'Create::3::Instance::ResName::ResType::' +    'CreateFromID::3::Instance::ResID::ResType';  TResourceStreamEvents: String =     '';  TFilerProperties: String =     'Define::Root::psReadable..psWritable::pvPublic::0::' +    'Define::LookupRoot::psReadable::pvPublic::0::' +    'Define::Ancestor::psReadable..psWritable::pvPublic::0::' +    'Define::IgnoreChildren::psReadable..psWritable::pvPublic::0';  TFilerMethods: String =     'FlushBuffer::msProcedure::0';  TFilerConstructors: String =     'Create::2::Stream::BufSize';  TFilerEvents: String =     '';  TReaderProperties: String =     'Define::PropName::psReadable::pvProtected::0::' +    'Define::CanHandleExceptions::psReadable::pvProtected::0::' +    'Define::Owner::psReadable..psWritable::pvPublic::0::' +    'Define::Parent::psReadable..psWritable::pvPublic::0::' +    'Define::Position::psReadable..psWritable::pvPublic::0';  TReaderMethods: String =     'BeginReferences::msProcedure::0::' +    'CheckValue::msProcedure::1::Value::' +    'EndOfList::msFunction::0::' +    'EndReferences::msProcedure::0::' +    'FixupReferences::msProcedure::0::' +    'NextValue::msFunction::0::' +    'Read::msProcedure::2::Buf::Count::' +    'ReadBoolean::msFunction::0::' +    'ReadChar::msFunction::0::' +    'ReadCollection::msProcedure::1::Collection::' +    'ReadComponent::msFunction::1::Component::' +    'ReadFloat::msFunction::0::' +    'ReadSingle::msFunction::0::' +    'ReadCurrency::msFunction::0::' +    'ReadDate::msFunction::0::' +    'ReadIdent::msFunction::0::' +    'ReadInteger::msFunction::0::' +    'ReadInt64::msFunction::0::' +    'ReadListBegin::msProcedure::0::' +    'ReadListEnd::msProcedure::0::' +    'ReadPrefix::msProcedure::2::Flags::AChildPos::' +    'ReadRootComponent::msFunction::1::Root::' +    'ReadSignature::msProcedure::0::' +    'ReadStr::msFunction::0::' +    'ReadString::msFunction::0::' +    'ReadWideString::msFunction::0::' +    'ReadValue::msFunction::0::' +    'CopyValue::msProcedure::1::Writer';  TReaderConstructors: String =     '';  TReaderEvents: String =     'Define::OnError::pvPublic::3::Reader::Message::Handled::' +    'Define::OnFindMethod::pvPublic::4::Reader::MethodName::Address::Error::' +    'Define::OnSetName::pvPublic::3::Reader::Component::Name::' +    'Define::OnReferenceName::pvPublic::2::Reader::Name::' +    'Define::OnAncestorNotFound::pvPublic::4::Reader::ComponentName::ComponentClass::Component::' +    'Define::OnCreateComponent::pvPublic::3::Reader::ComponentClass::Component::' +    'Define::OnFindComponentClass::pvPublic::3::Reader::ClassName::ComponentClass';  TWriterProperties: String =     'Define::Position::psReadable..psWritable::pvPublic::0::' +    'Define::RootAncestor::psReadable..psWritable::pvPublic::0';  TWriterMethods: String =     'Write::msProcedure::2::Buf::Count::' +    'WriteBoolean::msProcedure::1::Value::' +    'WriteCollection::msProcedure::1::Value::' +    'WriteComponent::msProcedure::1::Component::' +    'WriteChar::msProcedure::1::Value::' +    'WriteDescendent::msProcedure::2::Root::AAncestor::' +    'WriteFloat::msProcedure::1::Value::' +    'WriteSingle::msProcedure::1::Value::' +    'WriteCurrency::msProcedure::1::Value::' +    'WriteDate::msProcedure::1::Value::' +    'WriteIdent::msProcedure::1::Ident::' +    'WriteListBegin::msProcedure::0::' +    'WriteListEnd::msProcedure::0::' +    'WriteRootComponent::msProcedure::1::Root::' +    'WriteSignature::msProcedure::0::' +    'WriteStr::msProcedure::1::Value::' +    'WriteString::msProcedure::1::Value::' +    'WriteWideString::msProcedure::1::Value';  TWriterConstructors: String =     '';  TWriterEvents: String =     'Define::OnFindAncestor::pvPublic::5::Writer::Component::Name::Ancestor::RootAncestor';  TThreadProperties: String =     'Define::ReturnValue::psReadable..psWritable::pvProtected::0::' +    'Define::Terminated::psReadable::pvProtected::0::' +    'Define::FreeOnTerminate::psReadable..psWritable::pvPublic::0::' +    'Define::Handle::psReadable::pvPublic::0::' +    'Define::Priority::psReadable..psWritable::pvPublic::0::' +    'Define::Suspended::psReadable..psWritable::pvPublic::0::' +    'Define::ThreadID::psReadable::pvPublic::0';  TThreadMethods: String =     'Resume::msProcedure::0::' +    'Suspend::msProcedure::0::' +    'Terminate::msProcedure::0::' +    'WaitFor::msFunction::0';  TThreadConstructors: String =     'Create::1::CreateSuspended';  TThreadEvents: String =     'Define::OnTerminate::pvPublic::1::Sender';  TComponentProperties: String =     'Define::ComObject::psReadable::pvPublic::0::' +    'Define::Components::psReadable..psIndexed::pvPublic::1::Index::' +    'Define::ComponentCount::psReadable::pvPublic::0::' +    'Define::ComponentIndex::psReadable..psWritable::pvPublic::0::' +    'Define::ComponentState::psReadable::pvPublic::0::' +    'Define::ComponentStyle::psReadable::pvPublic::0::' +    'Define::DesignInfo::psReadable..psWritable::pvPublic::0::' +    'Define::Owner::psReadable::pvPublic::0::' +    'Define::VCLComObject::psReadable..psWritable::pvPublic::0::' +    'Define::Name::psReadable..psWritable::pvPublished::0::' +    'Define::Tag::psReadable..psWritable::pvPublished::0';  TComponentMethods: String =     'DestroyComponents::msProcedure::0::' +    'Destroying::msProcedure::0::' +    'ExecuteAction::msFunction::1::Action::' +    'FindComponent::msFunction::1::AName::' +    'FreeNotification::msProcedure::1::AComponent::' +    'RemoveFreeNotification::msProcedure::1::AComponent::' +    'FreeOnRelease::msProcedure::0::' +    'GetParentComponent::msFunction::0::' +    'HasParent::msFunction::0::' +    'InsertComponent::msProcedure::1::AComponent::' +    'RemoveComponent::msProcedure::1::AComponent::' +    'UpdateAction::msFunction::1::Action';  TComponentConstructors: String =     'Create::1::AOwner';  TComponentEvents: String =     '';  TBasicActionLinkProperties: String =     'Define::Action::psReadable..psWritable::pvPublic::0';  TBasicActionLinkMethods: String =     'Execute::msFunction::0::' +    'Update::msFunction::0';  TBasicActionLinkConstructors: String =     'Create::1::AClient';  TBasicActionLinkEvents: String =     'Define::OnChange::pvPublic::1::Sender';  TBasicActionProperties: String =     '';  TBasicActionMethods: String =     'HandlesTarget::msFunction::1::Target::' +    'UpdateTarget::msProcedure::1::Target::' +    'ExecuteTarget::msProcedure::1::Target::' +    'Execute::msFunction::0::' +    'RegisterChanges::msProcedure::1::Value::' +    'UnRegisterChanges::msProcedure::1::Value::' +    'Update::msFunction::0';  TBasicActionConstructors: String =     '';  TBasicActionEvents: String =     'Define::OnChange::pvProtected::1::Sender::' +    'Define::OnExecute::pvPublic::1::Sender::' +    'Define::OnUpdate::pvPublic::1::Sender';procedure TListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TListProperties);end;procedure TListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TListMethods);end;procedure TListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TListConstructors);end;procedure TListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TListEvents);end;function TListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Capacity' then begin    Result := TProtectedTList(Owner).Capacity;  end else if Prop.Name = 'Count' then begin    Result := TProtectedTList(Owner).Count;  end else if Prop.Name = 'Items' then begin    Result := Longint(TProtectedTList(Owner).Items[Prop.Indexes[0].Value]);  end else if Prop.Name = 'List' then begin    Result := Longint(TProtectedTList(Owner).List);  end else    Result := inherited GetProperty(Prop);end;procedure TListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Capacity' then begin    TProtectedTList(Owner).Capacity := Value;  end else if Prop.Name = 'Count' then begin    TProtectedTList(Owner).Count := Value;  end else if Prop.Name = 'Items' then begin    TProtectedTList(Owner).Items[Prop.Indexes[0].Value] := Pointer(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TListClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Add' then begin    TProtectedTList(Owner).Add(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Clear' then begin    TProtectedTList(Owner).Clear();  end else if Method.Name = 'Delete' then begin    TProtectedTList(Owner).Delete(Method.Args[0].Value);  end else if Method.Name = 'Exchange' then begin    TProtectedTList(Owner).Exchange(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Expand' then begin    Method.Result := Longint(TProtectedTList(Owner).Expand());  end else if Method.Name = 'Extract' then begin    Method.Result := Longint(TProtectedTList(Owner).Extract(Pointer(Longint(Method.Args[0].Value))));  end else if Method.Name = 'First' then begin    Method.Result := Longint(TProtectedTList(Owner).First());  end else if Method.Name = 'IndexOf' then begin    TProtectedTList(Owner).IndexOf(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Insert' then begin    TProtectedTList(Owner).Insert(Method.Args[0].Value, Pointer(Longint(Method.Args[1].Value)));  end else if Method.Name = 'Last' then begin    Method.Result := Longint(TProtectedTList(Owner).Last());  end else if Method.Name = 'Move' then begin    TProtectedTList(Owner).Move(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Remove' then begin    TProtectedTList(Owner).Remove(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Pack' then begin    TProtectedTList(Owner).Pack();  end else    inherited InvokeMethod(Method);end;procedure TListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TThreadListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TThreadListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TThreadListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TThreadListProperties);end;procedure TThreadListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TThreadListMethods);end;procedure TThreadListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TThreadListConstructors);end;procedure TThreadListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TThreadListEvents);end;function TThreadListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Duplicates' then begin    Result := TProtectedTThreadList(Owner).Duplicates;  end else    Result := inherited GetProperty(Prop);end;procedure TThreadListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Duplicates' then begin    TProtectedTThreadList(Owner).Duplicates := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TThreadListClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Add' then begin    TProtectedTThreadList(Owner).Add(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Clear' then begin    TProtectedTThreadList(Owner).Clear();  end else if Method.Name = 'LockList' then begin    Method.Result := Longint(TProtectedTThreadList(Owner).LockList());  end else if Method.Name = 'Remove' then begin    TProtectedTThreadList(Owner).Remove(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'UnlockList' then begin    TProtectedTThreadList(Owner).UnlockList();  end else    inherited InvokeMethod(Method);end;procedure TThreadListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TInterfaceListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TInterfaceListClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TInterfaceListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TInterfaceListProperties);end;procedure TInterfaceListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TInterfaceListMethods);end;procedure TInterfaceListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TInterfaceListConstructors);end;procedure TInterfaceListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TInterfaceListEvents);end;function TInterfaceListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Capacity' then begin    Result := TProtectedTInterfaceList(Owner).Capacity;  end else if Prop.Name = 'Count' then begin    Result := TProtectedTInterfaceList(Owner).Count;  end else if Prop.Name = 'Items' then begin    Result := Longint(TProtectedTInterfaceList(Owner).Items[Prop.Indexes[0].Value]);  end else    Result := inherited GetProperty(Prop);end;procedure TInterfaceListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Capacity' then begin    TProtectedTInterfaceList(Owner).Capacity := Value;  end else if Prop.Name = 'Count' then begin    TProtectedTInterfaceList(Owner).Count := Value;  end else if Prop.Name = 'Items' then begin    TProtectedTInterfaceList(Owner).Items[Prop.Indexes[0].Value] := IUnknown(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TInterfaceListClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Clear' then begin    TProtectedTInterfaceList(Owner).Clear();  end else if Method.Name = 'Delete' then begin    TProtectedTInterfaceList(Owner).Delete(Method.Args[0].Value);  end else if Method.Name = 'Exchange' then begin    TProtectedTInterfaceList(Owner).Exchange(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Expand' then begin    Method.Result := Longint(TProtectedTInterfaceList(Owner).Expand());  end else if Method.Name = 'First' then begin    Method.Result := Longint(TProtectedTInterfaceList(Owner).First());  end else if Method.Name = 'IndexOf' then begin    TProtectedTInterfaceList(Owner).IndexOf(IUnknown(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Add' then begin    TProtectedTInterfaceList(Owner).Add(IUnknown(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Insert' then begin    TProtectedTInterfaceList(Owner).Insert(Method.Args[0].Value, IUnknown(Longint(Method.Args[1].Value)));  end else if Method.Name = 'Last' then begin    Method.Result := Longint(TProtectedTInterfaceList(Owner).Last());  end else if Method.Name = 'Remove' then begin    TProtectedTInterfaceList(Owner).Remove(IUnknown(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Lock' then begin    TProtectedTInterfaceList(Owner).Lock();  end else if Method.Name = 'Unlock' then begin    TProtectedTInterfaceList(Owner).Unlock();  end else    inherited InvokeMethod(Method);end;procedure TInterfaceListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBitsClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TBitsClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TBitsClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBitsProperties);end;procedure TBitsClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBitsMethods);end;procedure TBitsClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBitsConstructors);end;procedure TBitsClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBitsEvents);end;function TBitsClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Bits' then begin    Result := TProtectedTBits(Owner).Bits[Prop.Indexes[0].Value];  end else if Prop.Name = 'Size' then begin    Result := TProtectedTBits(Owner).Size;  end else    Result := inherited GetProperty(Prop);end;procedure TBitsClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Bits' then begin    TProtectedTBits(Owner).Bits[Prop.Indexes[0].Value] := Value;  end else if Prop.Name = 'Size' then begin    TProtectedTBits(Owner).Size := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TBitsClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'OpenBit' then begin    TProtectedTBits(Owner).OpenBit();  end else    inherited InvokeMethod(Method);end;procedure TBitsClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TPersistentClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TPersistentClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TPersistentClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TPersistentProperties);end;procedure TPersistentClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TPersistentMethods);end;procedure TPersistentClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TPersistentConstructors);end;procedure TPersistentClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TPersistentEvents);end;function TPersistentClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TPersistentClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TPersistentClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Assign' then begin    TProtectedTPersistent(Owner).Assign(TPersistent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'GetNamePath' then begin    TProtectedTPersistent(Owner).GetNamePath();  end else    inherited InvokeMethod(Method);end;procedure TPersistentClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCollectionItemClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCollectionItemClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCollectionItemClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCollectionItemProperties);end;procedure TCollectionItemClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCollectionItemMethods);end;procedure TCollectionItemClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCollectionItemConstructors);end;procedure TCollectionItemClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCollectionItemEvents);end;function TCollectionItemClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Collection' then begin    Result := Longint(TProtectedTCollectionItem(Owner).Collection);  end else if Prop.Name = 'ID' then begin    Result := TProtectedTCollectionItem(Owner).ID;  end else if Prop.Name = 'Index' then begin    Result := TProtectedTCollectionItem(Owner).Index;  end else if Prop.Name = 'DisplayName' then begin    Result := TProtectedTCollectionItem(Owner).DisplayName;  end else    Result := inherited GetProperty(Prop);end;procedure TCollectionItemClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Collection' then begin    TProtectedTCollectionItem(Owner).Collection := TCollection(Longint(Value));  end else if Prop.Name = 'Index' then begin    TProtectedTCollectionItem(Owner).Index := Value;  end else if Prop.Name = 'DisplayName' then begin    TProtectedTCollectionItem(Owner).DisplayName := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCollectionItemClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TCollectionItemClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCollectionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCollectionClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCollectionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCollectionProperties);end;procedure TCollectionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCollectionMethods);end;procedure TCollectionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCollectionConstructors);end;procedure TCollectionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCollectionEvents);end;function TCollectionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'NextID' then begin    Result := TProtectedTCollection(Owner).NextID;  end else if Prop.Name = 'PropName' then begin    Result := TProtectedTCollection(Owner).PropName;  end else if Prop.Name = 'UpdateCount' then begin    Result := TProtectedTCollection(Owner).UpdateCount;  end else if Prop.Name = 'Count' then begin    Result := TProtectedTCollection(Owner).Count;  end else if Prop.Name = 'ItemClass' then begin    Result := Longint(TProtectedTCollection(Owner).ItemClass);  end else if Prop.Name = 'Items' then begin    Result := Longint(TProtectedTCollection(Owner).Items[Prop.Indexes[0].Value]);  end else    Result := inherited GetProperty(Prop);end;procedure TCollectionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'PropName' then begin    TProtectedTCollection(Owner).PropName := Value;  end else if Prop.Name = 'Items' then begin    TProtectedTCollection(Owner).Items[Prop.Indexes[0].Value] := TCollectionItem(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TCollectionClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Add' then begin    Method.Result := Longint(TProtectedTCollection(Owner).Add());  end else if Method.Name = 'BeginUpdate' then begin    TProtectedTCollection(Owner).BeginUpdate();  end else if Method.Name = 'Clear' then begin    TProtectedTCollection(Owner).Clear();  end else if Method.Name = 'Delete' then begin    TProtectedTCollection(Owner).Delete(Method.Args[0].Value);  end else if Method.Name = 'EndUpdate' then begin    TProtectedTCollection(Owner).EndUpdate();  end else if Method.Name = 'FindItemID' then begin    Method.Result := Longint(TProtectedTCollection(Owner).FindItemID(Method.Args[0].Value));  end else if Method.Name = 'Insert' then begin    Method.Result := Longint(TProtectedTCollection(Owner).Insert(Method.Args[0].Value));  end else    inherited InvokeMethod(Method);end;procedure TCollectionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TOwnedCollectionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TOwnedCollectionClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TOwnedCollectionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TOwnedCollectionProperties);end;procedure TOwnedCollectionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TOwnedCollectionMethods);end;procedure TOwnedCollectionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TOwnedCollectionConstructors);end;procedure TOwnedCollectionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TOwnedCollectionEvents);end;function TOwnedCollectionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TOwnedCollectionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TOwnedCollectionClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TOwnedCollectionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TStringsClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TStringsClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TStringsClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TStringsProperties);end;procedure TStringsClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TStringsMethods);end;procedure TStringsClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TStringsConstructors);end;procedure TStringsClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TStringsEvents);end;function TStringsClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Capacity' then begin    Result := TProtectedTStrings(Owner).Capacity;  end else if Prop.Name = 'CommaText' then begin    Result := TProtectedTStrings(Owner).CommaText;  end else if Prop.Name = 'Count' then begin    Result := TProtectedTStrings(Owner).Count;  end else if Prop.Name = 'Names' then begin    Result := TProtectedTStrings(Owner).Names[Prop.Indexes[0].Value];  end else if Prop.Name = 'Objects' then begin    Result := Longint(TProtectedTStrings(Owner).Objects[Prop.Indexes[0].Value]);  end else if Prop.Name = 'Values' then begin    Result := TProtectedTStrings(Owner).Values[Prop.Indexes[0].Value];  end else if Prop.Name = 'Strings' then begin    Result := TProtectedTStrings(Owner).Strings[Prop.Indexes[0].Value];  end else if Prop.Name = 'Text' then begin    Result := TProtectedTStrings(Owner).Text;  end else if Prop.Name = 'StringsAdapter' then begin    Result := Longint(TProtectedTStrings(Owner).StringsAdapter);  end else    Result := inherited GetProperty(Prop);end;procedure TStringsClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Capacity' then begin    TProtectedTStrings(Owner).Capacity := Value;  end else if Prop.Name = 'CommaText' then begin    TProtectedTStrings(Owner).CommaText := Value;  end else if Prop.Name = 'Objects' then begin    TProtectedTStrings(Owner).Objects[Prop.Indexes[0].Value] := TObject(Longint(Value));  end else if Prop.Name = 'Values' then begin    TProtectedTStrings(Owner).Values[Prop.Indexes[0].Value] := Value;  end else if Prop.Name = 'Strings' then begin    TProtectedTStrings(Owner).Strings[Prop.Indexes[0].Value] := Value;  end else if Prop.Name = 'Text' then begin    TProtectedTStrings(Owner).Text := Value;  end else if Prop.Name = 'StringsAdapter' then begin    TProtectedTStrings(Owner).StringsAdapter := IStringsAdapter(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TStringsClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Add' then begin    TProtectedTStrings(Owner).Add(Method.Args[0].Value);  end else if Method.Name = 'AddObject' then begin    TProtectedTStrings(Owner).AddObject(Method.Args[0].Value, TObject(Longint(Method.Args[1].Value)));  end else if Method.Name = 'Append' then begin    TProtectedTStrings(Owner).Append(Method.Args[0].Value);  end else if Method.Name = 'AddStrings' then begin    TProtectedTStrings(Owner).AddStrings(TStrings(Longint(Method.Args[0].Value)));  end else if Method.Name = 'BeginUpdate' then begin    TProtectedTStrings(Owner).BeginUpdate();  end else if Method.Name = 'Clear' then begin    TProtectedTStrings(Owner).Clear();  end else if Method.Name = 'Delete' then begin    TProtectedTStrings(Owner).Delete(Method.Args[0].Value);  end else if Method.Name = 'EndUpdate' then begin    TProtectedTStrings(Owner).EndUpdate();  end else if Method.Name = 'Equals' then begin    TProtectedTStrings(Owner).Equals(TStrings(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Exchange' then begin    TProtectedTStrings(Owner).Exchange(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'GetText' then begin    Method.Result := Longint(TProtectedTStrings(Owner).GetText());  end else if Method.Name = 'IndexOf' then begin    TProtectedTStrings(Owner).IndexOf(Method.Args[0].Value);  end else if Method.Name = 'IndexOfName' then begin    TProtectedTStrings(Owner).IndexOfName(Method.Args[0].Value);  end else if Method.Name = 'IndexOfObject' then begin    TProtectedTStrings(Owner).IndexOfObject(TObject(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Insert' then begin    TProtectedTStrings(Owner).Insert(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'InsertObject' then begin    TProtectedTStrings(Owner).InsertObject(Method.Args[0].Value, Method.Args[1].Value, TObject(Longint(Method.Args[2].Value)));  end else if Method.Name = 'LoadFromFile' then begin    TProtectedTStrings(Owner).LoadFromFile(Method.Args[0].Value);  end else if Method.Name = 'LoadFromStream' then begin    TProtectedTStrings(Owner).LoadFromStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Move' then begin    TProtectedTStrings(Owner).Move(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'SaveToFile' then begin    TProtectedTStrings(Owner).SaveToFile(Method.Args[0].Value);  end else if Method.Name = 'SaveToStream' then begin    TProtectedTStrings(Owner).SaveToStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'SetText' then begin    TProtectedTStrings(Owner).SetText(PChar(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TStringsClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TStringListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTStringList(Owner).OnChange;  TProtectedTStringList(Owner).OnChange := OnChange;  _Event_OnChanging := TProtectedTStringList(Owner).OnChanging;  TProtectedTStringList(Owner).OnChanging := OnChanging;end;procedure TStringListClassInfo.UnConnectEventHandlers;begin  TProtectedTStringList(Owner).OnChange := _Event_OnChange;  TProtectedTStringList(Owner).OnChanging := _Event_OnChanging;  inherited UnConnectEventHandlers;end;procedure TStringListClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TStringListClassInfo.OnChanging(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChanging');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChanging) then _Event_OnChanging(Sender);  FireEvent(_E);end;procedure TStringListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TStringListProperties);end;procedure TStringListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TStringListMethods);end;procedure TStringListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TStringListConstructors);end;procedure TStringListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TStringListEvents);end;function TStringListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Duplicates' then begin    Result := TProtectedTStringList(Owner).Duplicates;  end else if Prop.Name = 'Sorted' then begin    Result := TProtectedTStringList(Owner).Sorted;  end else    Result := inherited GetProperty(Prop);end;procedure TStringListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Duplicates' then begin    TProtectedTStringList(Owner).Duplicates := Value;  end else if Prop.Name = 'Sorted' then begin    TProtectedTStringList(Owner).Sorted := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TStringListClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Find' then begin    _VarParam_Find_Index := Method.Args[1].Value;    TProtectedTStringList(Owner).Find(Method.Args[0].Value, _VarParam_Find_Index);    Method.Args[1].Value := _VarParam_Find_Index;  end else if Method.Name = 'Sort' then begin    TProtectedTStringList(Owner).Sort();  end else    inherited InvokeMethod(Method);end;procedure TStringListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TStreamProperties);end;procedure TStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TStreamMethods);end;procedure TStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TStreamConstructors);end;procedure TStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TStreamEvents);end;function TStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Position' then begin    Result := TProtectedTStream(Owner).Position;  end else if Prop.Name = 'Size' then begin    Result := TProtectedTStream(Owner).Size;  end else    Result := inherited GetProperty(Prop);end;procedure TStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Position' then begin    TProtectedTStream(Owner).Position := Value;  end else if Prop.Name = 'Size' then begin    TProtectedTStream(Owner).Size := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Read' then begin    _VarParam_Read_Buffer := Method.Args[0].Value;    TProtectedTStream(Owner).Read(_VarParam_Read_Buffer, Method.Args[1].Value);    Method.Args[0].Value := _VarParam_Read_Buffer;  end else if Method.Name = 'Write' then begin    TProtectedTStream(Owner).Write(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Seek' then begin    TProtectedTStream(Owner).Seek(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'ReadBuffer' then begin    _VarParam_ReadBuffer_Buffer := Method.Args[0].Value;    TProtectedTStream(Owner).ReadBuffer(_VarParam_ReadBuffer_Buffer, Method.Args[1].Value);    Method.Args[0].Value := _VarParam_ReadBuffer_Buffer;  end else if Method.Name = 'WriteBuffer' then begin    TProtectedTStream(Owner).WriteBuffer(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'CopyFrom' then begin    TProtectedTStream(Owner).CopyFrom(TStream(Longint(Method.Args[0].Value)), Method.Args[1].Value);  end else if Method.Name = 'ReadComponent' then begin    Method.Result := Longint(TProtectedTStream(Owner).ReadComponent(TComponent(Longint(Method.Args[0].Value))));  end else if Method.Name = 'ReadComponentRes' then begin    Method.Result := Longint(TProtectedTStream(Owner).ReadComponentRes(TComponent(Longint(Method.Args[0].Value))));  end else if Method.Name = 'WriteComponent' then begin    TProtectedTStream(Owner).WriteComponent(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'WriteComponentRes' then begin    TProtectedTStream(Owner).WriteComponentRes(Method.Args[0].Value, TComponent(Longint(Method.Args[1].Value)));  end else if Method.Name = 'WriteDescendent' then begin    TProtectedTStream(Owner).WriteDescendent(TComponent(Longint(Method.Args[0].Value)), TComponent(Longint(Method.Args[1].Value)));  end else if Method.Name = 'WriteDescendentRes' then begin    TProtectedTStream(Owner).WriteDescendentRes(Method.Args[0].Value, TComponent(Longint(Method.Args[1].Value)), TComponent(Longint(Method.Args[2].Value)));  end else if Method.Name = 'WriteResourceHeader' then begin    _VarParam_WriteResourceHeader_FixupInfo := Method.Args[1].Value;    TProtectedTStream(Owner).WriteResourceHeader(Method.Args[0].Value, _VarParam_WriteResourceHeader_FixupInfo);    Method.Args[1].Value := _VarParam_WriteResourceHeader_FixupInfo;  end else if Method.Name = 'FixupResourceHeader' then begin    TProtectedTStream(Owner).FixupResourceHeader(Method.Args[0].Value);  end else if Method.Name = 'ReadResHeader' then begin    TProtectedTStream(Owner).ReadResHeader();  end else    inherited InvokeMethod(Method);end;procedure TStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure THandleStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure THandleStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure THandleStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(THandleStreamProperties);end;procedure THandleStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(THandleStreamMethods);end;procedure THandleStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(THandleStreamConstructors);end;procedure THandleStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(THandleStreamEvents);end;function THandleStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Handle' then begin    Result := TProtectedTHandleStream(Owner).Handle;  end else    Result := inherited GetProperty(Prop);end;procedure THandleStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure THandleStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure THandleStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TFileStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TFileStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TFileStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TFileStreamProperties);end;procedure TFileStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TFileStreamMethods);end;procedure TFileStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TFileStreamConstructors);end;procedure TFileStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TFileStreamEvents);end;function TFileStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TFileStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TFileStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TFileStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomMemoryStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TCustomMemoryStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TCustomMemoryStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomMemoryStreamProperties);end;procedure TCustomMemoryStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomMemoryStreamMethods);end;procedure TCustomMemoryStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomMemoryStreamConstructors);end;procedure TCustomMemoryStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomMemoryStreamEvents);end;function TCustomMemoryStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Memory' then begin    Result := Longint(TProtectedTCustomMemoryStream(Owner).Memory);  end else    Result := inherited GetProperty(Prop);end;procedure TCustomMemoryStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TCustomMemoryStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'SaveToStream' then begin    TProtectedTCustomMemoryStream(Owner).SaveToStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'SaveToFile' then begin    TProtectedTCustomMemoryStream(Owner).SaveToFile(Method.Args[0].Value);  end else    inherited InvokeMethod(Method);end;procedure TCustomMemoryStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TMemoryStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TMemoryStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TMemoryStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TMemoryStreamProperties);end;procedure TMemoryStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TMemoryStreamMethods);end;procedure TMemoryStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TMemoryStreamConstructors);end;procedure TMemoryStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TMemoryStreamEvents);end;function TMemoryStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Capacity' then begin    Result := TProtectedTMemoryStream(Owner).Capacity;  end else    Result := inherited GetProperty(Prop);end;procedure TMemoryStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Capacity' then begin    TProtectedTMemoryStream(Owner).Capacity := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TMemoryStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Clear' then begin    TProtectedTMemoryStream(Owner).Clear();  end else if Method.Name = 'LoadFromStream' then begin    TProtectedTMemoryStream(Owner).LoadFromStream(TStream(Longint(Method.Args[0].Value)));  end else if Method.Name = 'LoadFromFile' then begin    TProtectedTMemoryStream(Owner).LoadFromFile(Method.Args[0].Value);  end else    inherited InvokeMethod(Method);end;procedure TMemoryStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TStringStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TStringStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TStringStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TStringStreamProperties);end;procedure TStringStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TStringStreamMethods);end;procedure TStringStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TStringStreamConstructors);end;procedure TStringStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TStringStreamEvents);end;function TStringStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'DataString' then begin    Result := TProtectedTStringStream(Owner).DataString;  end else    Result := inherited GetProperty(Prop);end;procedure TStringStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TStringStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'ReadString' then begin    TProtectedTStringStream(Owner).ReadString(Method.Args[0].Value);  end else if Method.Name = 'WriteString' then begin    TProtectedTStringStream(Owner).WriteString(Method.Args[0].Value);  end else    inherited InvokeMethod(Method);end;procedure TStringStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TResourceStreamClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TResourceStreamClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TResourceStreamClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TResourceStreamProperties);end;procedure TResourceStreamClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TResourceStreamMethods);end;procedure TResourceStreamClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TResourceStreamConstructors);end;procedure TResourceStreamClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TResourceStreamEvents);end;function TResourceStreamClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TResourceStreamClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TResourceStreamClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TResourceStreamClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TFilerClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TFilerClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TFilerClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TFilerProperties);end;procedure TFilerClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TFilerMethods);end;procedure TFilerClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TFilerConstructors);end;procedure TFilerClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TFilerEvents);end;function TFilerClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Root' then begin    Result := Longint(TProtectedTFiler(Owner).Root);  end else if Prop.Name = 'LookupRoot' then begin    Result := Longint(TProtectedTFiler(Owner).LookupRoot);  end else if Prop.Name = 'Ancestor' then begin    Result := Longint(TProtectedTFiler(Owner).Ancestor);  end else if Prop.Name = 'IgnoreChildren' then begin    Result := TProtectedTFiler(Owner).IgnoreChildren;  end else    Result := inherited GetProperty(Prop);end;procedure TFilerClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Root' then begin    TProtectedTFiler(Owner).Root := TComponent(Longint(Value));  end else if Prop.Name = 'Ancestor' then begin    TProtectedTFiler(Owner).Ancestor := TPersistent(Longint(Value));  end else if Prop.Name = 'IgnoreChildren' then begin    TProtectedTFiler(Owner).IgnoreChildren := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TFilerClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'FlushBuffer' then begin    TProtectedTFiler(Owner).FlushBuffer();  end else    inherited InvokeMethod(Method);end;procedure TFilerClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TReaderClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnError := TProtectedTReader(Owner).OnError;  TProtectedTReader(Owner).OnError := OnError;  _Event_OnFindMethod := TProtectedTReader(Owner).OnFindMethod;  TProtectedTReader(Owner).OnFindMethod := OnFindMethod;  _Event_OnSetName := TProtectedTReader(Owner).OnSetName;  TProtectedTReader(Owner).OnSetName := OnSetName;  _Event_OnReferenceName := TProtectedTReader(Owner).OnReferenceName;  TProtectedTReader(Owner).OnReferenceName := OnReferenceName;  _Event_OnAncestorNotFound := TProtectedTReader(Owner).OnAncestorNotFound;  TProtectedTReader(Owner).OnAncestorNotFound := OnAncestorNotFound;  _Event_OnCreateComponent := TProtectedTReader(Owner).OnCreateComponent;  TProtectedTReader(Owner).OnCreateComponent := OnCreateComponent;  _Event_OnFindComponentClass := TProtectedTReader(Owner).OnFindComponentClass;  TProtectedTReader(Owner).OnFindComponentClass := OnFindComponentClass;end;procedure TReaderClassInfo.UnConnectEventHandlers;begin  TProtectedTReader(Owner).OnError := _Event_OnError;  TProtectedTReader(Owner).OnFindMethod := _Event_OnFindMethod;  TProtectedTReader(Owner).OnSetName := _Event_OnSetName;  TProtectedTReader(Owner).OnReferenceName := _Event_OnReferenceName;  TProtectedTReader(Owner).OnAncestorNotFound := _Event_OnAncestorNotFound;  TProtectedTReader(Owner).OnCreateComponent := _Event_OnCreateComponent;  TProtectedTReader(Owner).OnFindComponentClass := _Event_OnFindComponentClass;  inherited UnConnectEventHandlers;end;procedure TReaderClassInfo.OnError(Reader: TReader; const Message: string; var Handled: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnError');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := Message;  _E.Args[2].Value := Handled;  if Assigned(_Event_OnError) then _Event_OnError(Reader, Message, Handled);  FireEvent(_E);  Handled := _E.Args[2].Value;end;procedure TReaderClassInfo.OnFindMethod(Reader: TReader; const MethodName: string; var Address: Pointer; var Error: Boolean);var  _E: TradEventInfo;begin  _E := FindEvent('OnFindMethod');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := MethodName;  _E.Args[2].Value := Longint(Address);  _E.Args[3].Value := Error;  if Assigned(_Event_OnFindMethod) then _Event_OnFindMethod(Reader, MethodName, Address, Error);  FireEvent(_E);  Address := Pointer(Longint(_E.Args[2].Value));  Error := _E.Args[3].Value;end;procedure TReaderClassInfo.OnSetName(Reader: TReader; Component: TComponent; var Name: string);var  _E: TradEventInfo;begin  _E := FindEvent('OnSetName');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := Longint(Component);  _E.Args[2].Value := Name;  if Assigned(_Event_OnSetName) then _Event_OnSetName(Reader, Component, Name);  FireEvent(_E);  Name := _E.Args[2].Value;end;procedure TReaderClassInfo.OnReferenceName(Reader: TReader; var Name: string);var  _E: TradEventInfo;begin  _E := FindEvent('OnReferenceName');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := Name;  if Assigned(_Event_OnReferenceName) then _Event_OnReferenceName(Reader, Name);  FireEvent(_E);  Name := _E.Args[1].Value;end;procedure TReaderClassInfo.OnAncestorNotFound(Reader: TReader; const ComponentName: string; ComponentClass: TPersistentClass; var Component: TComponent);var  _E: TradEventInfo;begin  _E := FindEvent('OnAncestorNotFound');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := ComponentName;  _E.Args[2].Value := Longint(ComponentClass);  _E.Args[3].Value := Longint(Component);  if Assigned(_Event_OnAncestorNotFound) then _Event_OnAncestorNotFound(Reader, ComponentName, ComponentClass, Component);  FireEvent(_E);  Component := TComponent(Longint(_E.Args[3].Value));end;procedure TReaderClassInfo.OnCreateComponent(Reader: TReader; ComponentClass: TComponentClass; var Component: TComponent);var  _E: TradEventInfo;begin  _E := FindEvent('OnCreateComponent');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := Longint(ComponentClass);  _E.Args[2].Value := Longint(Component);  if Assigned(_Event_OnCreateComponent) then _Event_OnCreateComponent(Reader, ComponentClass, Component);  FireEvent(_E);  Component := TComponent(Longint(_E.Args[2].Value));end;procedure TReaderClassInfo.OnFindComponentClass(Reader: TReader; const ClassName: string; var ComponentClass: TComponentClass);var  _E: TradEventInfo;begin  _E := FindEvent('OnFindComponentClass');  _E.Args[0].Value := Longint(Reader);  _E.Args[1].Value := ClassName;  _E.Args[2].Value := Longint(ComponentClass);  if Assigned(_Event_OnFindComponentClass) then _Event_OnFindComponentClass(Reader, ClassName, ComponentClass);  FireEvent(_E);  ComponentClass := TComponentClass(Longint(_E.Args[2].Value));end;procedure TReaderClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TReaderProperties);end;procedure TReaderClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TReaderMethods);end;procedure TReaderClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TReaderConstructors);end;procedure TReaderClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TReaderEvents);end;function TReaderClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'PropName' then begin    Result := TProtectedTReader(Owner).PropName;  end else if Prop.Name = 'CanHandleExceptions' then begin    Result := TProtectedTReader(Owner).CanHandleExceptions;  end else if Prop.Name = 'Owner' then begin    Result := Longint(TProtectedTReader(Owner).Owner);  end else if Prop.Name = 'Parent' then begin    Result := Longint(TProtectedTReader(Owner).Parent);  end else if Prop.Name = 'Position' then begin    Result := TProtectedTReader(Owner).Position;  end else    Result := inherited GetProperty(Prop);end;procedure TReaderClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Owner' then begin    TProtectedTReader(Owner).Owner := TComponent(Longint(Value));  end else if Prop.Name = 'Parent' then begin    TProtectedTReader(Owner).Parent := TComponent(Longint(Value));  end else if Prop.Name = 'Position' then begin    TProtectedTReader(Owner).Position := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TReaderClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'BeginReferences' then begin    TProtectedTReader(Owner).BeginReferences();  end else if Method.Name = 'CheckValue' then begin    TProtectedTReader(Owner).CheckValue(Method.Args[0].Value);  end else if Method.Name = 'EndOfList' then begin    TProtectedTReader(Owner).EndOfList();  end else if Method.Name = 'EndReferences' then begin    TProtectedTReader(Owner).EndReferences();  end else if Method.Name = 'FixupReferences' then begin    TProtectedTReader(Owner).FixupReferences();  end else if Method.Name = 'NextValue' then begin    TProtectedTReader(Owner).NextValue();  end else if Method.Name = 'Read' then begin    _VarParam_Read_Buf := Method.Args[0].Value;    TProtectedTReader(Owner).Read(_VarParam_Read_Buf, Method.Args[1].Value);    Method.Args[0].Value := _VarParam_Read_Buf;  end else if Method.Name = 'ReadBoolean' then begin    TProtectedTReader(Owner).ReadBoolean();  end else if Method.Name = 'ReadChar' then begin    TProtectedTReader(Owner).ReadChar();  end else if Method.Name = 'ReadCollection' then begin    TProtectedTReader(Owner).ReadCollection(TCollection(Longint(Method.Args[0].Value)));  end else if Method.Name = 'ReadComponent' then begin    Method.Result := Longint(TProtectedTReader(Owner).ReadComponent(TComponent(Longint(Method.Args[0].Value))));  end else if Method.Name = 'ReadFloat' then begin    TProtectedTReader(Owner).ReadFloat();  end else if Method.Name = 'ReadSingle' then begin    TProtectedTReader(Owner).ReadSingle();  end else if Method.Name = 'ReadCurrency' then begin    TProtectedTReader(Owner).ReadCurrency();  end else if Method.Name = 'ReadDate' then begin    TProtectedTReader(Owner).ReadDate();  end else if Method.Name = 'ReadIdent' then begin    TProtectedTReader(Owner).ReadIdent();  end else if Method.Name = 'ReadInteger' then begin    TProtectedTReader(Owner).ReadInteger();  end else if Method.Name = 'ReadInt64' then begin    _MethodRes_ReadInt64 := TProtectedTReader(Owner).ReadInt64();    Method.Result := Longint(@_MethodRes_ReadInt64);  end else if Method.Name = 'ReadListBegin' then begin    TProtectedTReader(Owner).ReadListBegin();  end else if Method.Name = 'ReadListEnd' then begin    TProtectedTReader(Owner).ReadListEnd();  end else if Method.Name = 'ReadPrefix' then begin    _VarParam_ReadPrefix_Flags := Pointer(Longint(Method.Args[0].Value));    _VarParam_ReadPrefix_AChildPos := Method.Args[1].Value;    TProtectedTReader(Owner).ReadPrefix(_VarParam_ReadPrefix_Flags^, _VarParam_ReadPrefix_AChildPos);    Method.Args[0].Value := Longint(_VarParam_ReadPrefix_Flags);    Method.Args[1].Value := _VarParam_ReadPrefix_AChildPos;  end else if Method.Name = 'ReadRootComponent' then begin    Method.Result := Longint(TProtectedTReader(Owner).ReadRootComponent(TComponent(Longint(Method.Args[0].Value))));  end else if Method.Name = 'ReadSignature' then begin    TProtectedTReader(Owner).ReadSignature();  end else if Method.Name = 'ReadStr' then begin    TProtectedTReader(Owner).ReadStr();  end else if Method.Name = 'ReadString' then begin    TProtectedTReader(Owner).ReadString();  end else if Method.Name = 'ReadWideString' then begin    TProtectedTReader(Owner).ReadWideString();  end else if Method.Name = 'ReadValue' then begin    TProtectedTReader(Owner).ReadValue();  end else if Method.Name = 'CopyValue' then begin    TProtectedTReader(Owner).CopyValue(TWriter(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TReaderClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TWriterClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnFindAncestor := TProtectedTWriter(Owner).OnFindAncestor;  TProtectedTWriter(Owner).OnFindAncestor := OnFindAncestor;end;procedure TWriterClassInfo.UnConnectEventHandlers;begin  TProtectedTWriter(Owner).OnFindAncestor := _Event_OnFindAncestor;  inherited UnConnectEventHandlers;end;procedure TWriterClassInfo.OnFindAncestor(Writer: TWriter; Component: TComponent; const Name: string; var Ancestor: TComponent; var RootAncestor: TComponent);var  _E: TradEventInfo;begin  _E := FindEvent('OnFindAncestor');  _E.Args[0].Value := Longint(Writer);  _E.Args[1].Value := Longint(Component);  _E.Args[2].Value := Name;  _E.Args[3].Value := Longint(Ancestor);  _E.Args[4].Value := Longint(RootAncestor);  if Assigned(_Event_OnFindAncestor) then _Event_OnFindAncestor(Writer, Component, Name, Ancestor, RootAncestor);  FireEvent(_E);  Ancestor := TComponent(Longint(_E.Args[3].Value));  RootAncestor := TComponent(Longint(_E.Args[4].Value));end;procedure TWriterClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TWriterProperties);end;procedure TWriterClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TWriterMethods);end;procedure TWriterClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TWriterConstructors);end;procedure TWriterClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TWriterEvents);end;function TWriterClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Position' then begin    Result := TProtectedTWriter(Owner).Position;  end else if Prop.Name = 'RootAncestor' then begin    Result := Longint(TProtectedTWriter(Owner).RootAncestor);  end else    Result := inherited GetProperty(Prop);end;procedure TWriterClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Position' then begin    TProtectedTWriter(Owner).Position := Value;  end else if Prop.Name = 'RootAncestor' then begin    TProtectedTWriter(Owner).RootAncestor := TComponent(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TWriterClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Write' then begin    TProtectedTWriter(Owner).Write(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'WriteBoolean' then begin    TProtectedTWriter(Owner).WriteBoolean(Method.Args[0].Value);  end else if Method.Name = 'WriteCollection' then begin    TProtectedTWriter(Owner).WriteCollection(TCollection(Longint(Method.Args[0].Value)));  end else if Method.Name = 'WriteComponent' then begin    TProtectedTWriter(Owner).WriteComponent(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'WriteChar' then begin    TProtectedTWriter(Owner).WriteChar(String(Method.Args[0].Value)[1]);  end else if Method.Name = 'WriteDescendent' then begin    TProtectedTWriter(Owner).WriteDescendent(TComponent(Longint(Method.Args[0].Value)), TComponent(Longint(Method.Args[1].Value)));  end else if Method.Name = 'WriteFloat' then begin    TProtectedTWriter(Owner).WriteFloat(Method.Args[0].Value);  end else if Method.Name = 'WriteSingle' then begin    TProtectedTWriter(Owner).WriteSingle(Method.Args[0].Value);  end else if Method.Name = 'WriteCurrency' then begin    TProtectedTWriter(Owner).WriteCurrency(Method.Args[0].Value);  end else if Method.Name = 'WriteDate' then begin    TProtectedTWriter(Owner).WriteDate(Method.Args[0].Value);  end else if Method.Name = 'WriteIdent' then begin    TProtectedTWriter(Owner).WriteIdent(Method.Args[0].Value);  end else if Method.Name = 'WriteListBegin' then begin    TProtectedTWriter(Owner).WriteListBegin();  end else if Method.Name = 'WriteListEnd' then begin    TProtectedTWriter(Owner).WriteListEnd();  end else if Method.Name = 'WriteRootComponent' then begin    TProtectedTWriter(Owner).WriteRootComponent(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'WriteSignature' then begin    TProtectedTWriter(Owner).WriteSignature();  end else if Method.Name = 'WriteStr' then begin    TProtectedTWriter(Owner).WriteStr(Method.Args[0].Value);  end else if Method.Name = 'WriteString' then begin    TProtectedTWriter(Owner).WriteString(Method.Args[0].Value);  end else if Method.Name = 'WriteWideString' then begin    TProtectedTWriter(Owner).WriteWideString(Method.Args[0].Value);  end else    inherited InvokeMethod(Method);end;procedure TWriterClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TThreadClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnTerminate := TProtectedTThread(Owner).OnTerminate;  TProtectedTThread(Owner).OnTerminate := OnTerminate;end;procedure TThreadClassInfo.UnConnectEventHandlers;begin  TProtectedTThread(Owner).OnTerminate := _Event_OnTerminate;  inherited UnConnectEventHandlers;end;procedure TThreadClassInfo.OnTerminate(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnTerminate');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnTerminate) then _Event_OnTerminate(Sender);  FireEvent(_E);end;procedure TThreadClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TThreadProperties);end;procedure TThreadClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TThreadMethods);end;procedure TThreadClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TThreadConstructors);end;procedure TThreadClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TThreadEvents);end;function TThreadClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ReturnValue' then begin    Result := TProtectedTThread(Owner).ReturnValue;  end else if Prop.Name = 'Terminated' then begin    Result := TProtectedTThread(Owner).Terminated;  end else if Prop.Name = 'FreeOnTerminate' then begin    Result := TProtectedTThread(Owner).FreeOnTerminate;  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTThread(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'Priority' then begin    Result := TProtectedTThread(Owner).Priority;  end else if Prop.Name = 'Suspended' then begin    Result := TProtectedTThread(Owner).Suspended;  end else if Prop.Name = 'ThreadID' then begin    _Prop_ThreadID := TProtectedTThread(Owner).ThreadID;    Result := Longint(@_Prop_ThreadID);  end else    Result := inherited GetProperty(Prop);end;procedure TThreadClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'ReturnValue' then begin    TProtectedTThread(Owner).ReturnValue := Value;  end else if Prop.Name = 'FreeOnTerminate' then begin    TProtectedTThread(Owner).FreeOnTerminate := Value;  end else if Prop.Name = 'Priority' then begin    TProtectedTThread(Owner).Priority := Value;  end else if Prop.Name = 'Suspended' then begin    TProtectedTThread(Owner).Suspended := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TThreadClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Resume' then begin    TProtectedTThread(Owner).Resume();  end else if Method.Name = 'Suspend' then begin    TProtectedTThread(Owner).Suspend();  end else if Method.Name = 'Terminate' then begin    TProtectedTThread(Owner).Terminate();  end else if Method.Name = 'WaitFor' then begin    _MethodRes_WaitFor := TProtectedTThread(Owner).WaitFor();    Method.Result := Longint(@_MethodRes_WaitFor);  end else    inherited InvokeMethod(Method);end;procedure TThreadClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TComponentClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TComponentClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TComponentClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TComponentProperties);end;procedure TComponentClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TComponentMethods);end;procedure TComponentClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TComponentConstructors);end;procedure TComponentClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TComponentEvents);end;function TComponentClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'ComObject' then begin    Result := Longint(TProtectedTComponent(Owner).ComObject);  end else if Prop.Name = 'Components' then begin    Result := Longint(TProtectedTComponent(Owner).Components[Prop.Indexes[0].Value]);  end else if Prop.Name = 'ComponentCount' then begin    Result := TProtectedTComponent(Owner).ComponentCount;  end else if Prop.Name = 'ComponentIndex' then begin    Result := TProtectedTComponent(Owner).ComponentIndex;  end else if Prop.Name = 'ComponentState' then begin    _Prop_ComponentState := TProtectedTComponent(Owner).ComponentState;    Result := Longint(@_Prop_ComponentState);  end else if Prop.Name = 'ComponentStyle' then begin    _Prop_ComponentStyle := TProtectedTComponent(Owner).ComponentStyle;    Result := Longint(@_Prop_ComponentStyle);  end else if Prop.Name = 'DesignInfo' then begin    Result := TProtectedTComponent(Owner).DesignInfo;  end else if Prop.Name = 'Owner' then begin    Result := Longint(TProtectedTComponent(Owner).Owner);  end else if Prop.Name = 'VCLComObject' then begin    Result := Longint(TProtectedTComponent(Owner).VCLComObject);  end else if Prop.Name = 'Name' then begin    Result := TProtectedTComponent(Owner).Name;  end else if Prop.Name = 'Tag' then begin    Result := TProtectedTComponent(Owner).Tag;  end else    Result := inherited GetProperty(Prop);end;procedure TComponentClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'ComponentIndex' then begin    TProtectedTComponent(Owner).ComponentIndex := Value;  end else if Prop.Name = 'DesignInfo' then begin    TProtectedTComponent(Owner).DesignInfo := Value;  end else if Prop.Name = 'VCLComObject' then begin    TProtectedTComponent(Owner).VCLComObject := Pointer(Longint(Value));  end else if Prop.Name = 'Name' then begin    TProtectedTComponent(Owner).Name := Value;  end else if Prop.Name = 'Tag' then begin    TProtectedTComponent(Owner).Tag := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TComponentClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'DestroyComponents' then begin    TProtectedTComponent(Owner).DestroyComponents();  end else if Method.Name = 'Destroying' then begin    TProtectedTComponent(Owner).Destroying();  end else if Method.Name = 'ExecuteAction' then begin    TProtectedTComponent(Owner).ExecuteAction(TBasicAction(Longint(Method.Args[0].Value)));  end else if Method.Name = 'FindComponent' then begin    Method.Result := Longint(TProtectedTComponent(Owner).FindComponent(Method.Args[0].Value));  end else if Method.Name = 'FreeNotification' then begin    TProtectedTComponent(Owner).FreeNotification(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'RemoveFreeNotification' then begin    TProtectedTComponent(Owner).RemoveFreeNotification(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'FreeOnRelease' then begin    TProtectedTComponent(Owner).FreeOnRelease();  end else if Method.Name = 'GetParentComponent' then begin    Method.Result := Longint(TProtectedTComponent(Owner).GetParentComponent());  end else if Method.Name = 'HasParent' then begin    TProtectedTComponent(Owner).HasParent();  end else if Method.Name = 'InsertComponent' then begin    TProtectedTComponent(Owner).InsertComponent(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'RemoveComponent' then begin    TProtectedTComponent(Owner).RemoveComponent(TComponent(Longint(Method.Args[0].Value)));  end else if Method.Name = 'UpdateAction' then begin    TProtectedTComponent(Owner).UpdateAction(TBasicAction(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TComponentClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBasicActionLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTBasicActionLink(Owner).OnChange;  TProtectedTBasicActionLink(Owner).OnChange := OnChange;end;procedure TBasicActionLinkClassInfo.UnConnectEventHandlers;begin  TProtectedTBasicActionLink(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TBasicActionLinkClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TBasicActionLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBasicActionLinkProperties);end;procedure TBasicActionLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBasicActionLinkMethods);end;procedure TBasicActionLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBasicActionLinkConstructors);end;procedure TBasicActionLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBasicActionLinkEvents);end;function TBasicActionLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Action' then begin    Result := Longint(TProtectedTBasicActionLink(Owner).Action);  end else    Result := inherited GetProperty(Prop);end;procedure TBasicActionLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Action' then begin    TProtectedTBasicActionLink(Owner).Action := TBasicAction(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TBasicActionLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Execute' then begin    TProtectedTBasicActionLink(Owner).Execute();  end else if Method.Name = 'Update' then begin    TProtectedTBasicActionLink(Owner).Update();  end else    inherited InvokeMethod(Method);end;procedure TBasicActionLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TBasicActionClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTBasicAction(Owner).OnChange;  TProtectedTBasicAction(Owner).OnChange := OnChange;  _Event_OnExecute := TProtectedTBasicAction(Owner).OnExecute;  TProtectedTBasicAction(Owner).OnExecute := OnExecute;  _Event_OnUpdate := TProtectedTBasicAction(Owner).OnUpdate;  TProtectedTBasicAction(Owner).OnUpdate := OnUpdate;end;procedure TBasicActionClassInfo.UnConnectEventHandlers;begin  TProtectedTBasicAction(Owner).OnChange := _Event_OnChange;  TProtectedTBasicAction(Owner).OnExecute := _Event_OnExecute;  TProtectedTBasicAction(Owner).OnUpdate := _Event_OnUpdate;  inherited UnConnectEventHandlers;end;procedure TBasicActionClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TBasicActionClassInfo.OnExecute(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnExecute');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnExecute) then _Event_OnExecute(Sender);  FireEvent(_E);end;procedure TBasicActionClassInfo.OnUpdate(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnUpdate');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnUpdate) then _Event_OnUpdate(Sender);  FireEvent(_E);end;procedure TBasicActionClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TBasicActionProperties);end;procedure TBasicActionClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TBasicActionMethods);end;procedure TBasicActionClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TBasicActionConstructors);end;procedure TBasicActionClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TBasicActionEvents);end;function TBasicActionClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin    Result := inherited GetProperty(Prop);end;procedure TBasicActionClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TBasicActionClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'HandlesTarget' then begin    TProtectedTBasicAction(Owner).HandlesTarget(TObject(Longint(Method.Args[0].Value)));  end else if Method.Name = 'UpdateTarget' then begin    TProtectedTBasicAction(Owner).UpdateTarget(TObject(Longint(Method.Args[0].Value)));  end else if Method.Name = 'ExecuteTarget' then begin    TProtectedTBasicAction(Owner).ExecuteTarget(TObject(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Execute' then begin    TProtectedTBasicAction(Owner).Execute();  end else if Method.Name = 'RegisterChanges' then begin    TProtectedTBasicAction(Owner).RegisterChanges(TBasicActionLink(Longint(Method.Args[0].Value)));  end else if Method.Name = 'UnRegisterChanges' then begin    TProtectedTBasicAction(Owner).UnRegisterChanges(TBasicActionLink(Longint(Method.Args[0].Value)));  end else if Method.Name = 'Update' then begin    TProtectedTBasicAction(Owner).Update();  end else    inherited InvokeMethod(Method);end;procedure TBasicActionClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TList', TListClassInfo);  TradClassRegistry.RegisterClass('TThreadList', TThreadListClassInfo);  TradClassRegistry.RegisterClass('TInterfaceList', TInterfaceListClassInfo);  TradClassRegistry.RegisterClass('TBits', TBitsClassInfo);  TradClassRegistry.RegisterClass('TPersistent', TPersistentClassInfo);  TradClassRegistry.RegisterClass('TCollectionItem', TCollectionItemClassInfo);  TradClassRegistry.RegisterClass('TCollection', TCollectionClassInfo);  TradClassRegistry.RegisterClass('TOwnedCollection', TOwnedCollectionClassInfo);  TradClassRegistry.RegisterClass('TStrings', TStringsClassInfo);  TradClassRegistry.RegisterClass('TStringList', TStringListClassInfo);  TradClassRegistry.RegisterClass('TStream', TStreamClassInfo);  TradClassRegistry.RegisterClass('THandleStream', THandleStreamClassInfo);  TradClassRegistry.RegisterClass('TFileStream', TFileStreamClassInfo);  TradClassRegistry.RegisterClass('TCustomMemoryStream', TCustomMemoryStreamClassInfo);  TradClassRegistry.RegisterClass('TMemoryStream', TMemoryStreamClassInfo);  TradClassRegistry.RegisterClass('TStringStream', TStringStreamClassInfo);  TradClassRegistry.RegisterClass('TResourceStream', TResourceStreamClassInfo);  TradClassRegistry.RegisterClass('TFiler', TFilerClassInfo);  TradClassRegistry.RegisterClass('TReader', TReaderClassInfo);  TradClassRegistry.RegisterClass('TWriter', TWriterClassInfo);  TradClassRegistry.RegisterClass('TThread', TThreadClassInfo);  TradClassRegistry.RegisterClass('TComponent', TComponentClassInfo);  TradClassRegistry.RegisterClass('TBasicActionLink', TBasicActionLinkClassInfo);  TradClassRegistry.RegisterClass('TBasicAction', TBasicActionClassInfo);end.