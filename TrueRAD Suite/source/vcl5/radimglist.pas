{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radimglist;interfaceuses RadCommon, Windows, imglist, radSystem, Classes, radClasses, CommCtrl, Graphics;type  TChangeLinkClassInfo = class;  TCustomImageListClassInfo = class;  TChangeLinkClassInfo = class(TObjectClassInfo)  private    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TCustomImageListClassInfo = class(TComponentClassInfo)  private    _Prop_Handle: HIMAGELIST;    _MethodRes_GetHotSpot: TPoint;    _MethodRes_GetImageBitmap: HBITMAP;    _MethodRes_GetMaskBitmap: HBITMAP;    _Event_OnChange: TNotifyEvent;    procedure OnChange(Sender: TObject);  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTChangeLink = class(TChangeLink);  TProtectedTCustomImageList = class(TCustomImageList);const  TChangeLinkProperties: String =     'Define::Sender::psReadable..psWritable::pvPublic::0';  TChangeLinkMethods: String =     'Change::msProcedure::0';  TChangeLinkConstructors: String =     '';  TChangeLinkEvents: String =     'Define::OnChange::pvPublic::1::Sender';  TCustomImageListProperties: String =     'Define::Count::psReadable::pvPublic::0::' +    'Define::Handle::psReadable..psWritable::pvPublic::0::' +    'Define::AllocBy::psReadable..psWritable::pvPublic::0::' +    'Define::BlendColor::psReadable..psWritable::pvPublic::0::' +    'Define::BkColor::psReadable..psWritable::pvPublic::0::' +    'Define::DrawingStyle::psReadable..psWritable::pvPublic::0::' +    'Define::Height::psReadable..psWritable::pvPublic::0::' +    'Define::ImageType::psReadable..psWritable::pvPublic::0::' +    'Define::Masked::psReadable..psWritable::pvPublic::0::' +    'Define::ShareImages::psReadable..psWritable::pvPublic::0::' +    'Define::Width::psReadable..psWritable::pvPublic::0';  TCustomImageListMethods: String =     'Add::msFunction::2::Image::Mask::' +    'AddIcon::msFunction::1::Image::' +    'AddImages::msProcedure::1::Value::' +    'AddMasked::msFunction::2::Image::MaskColor::' +    'Clear::msProcedure::0::' +    'Delete::msProcedure::1::Index::' +    'Draw::msProcedure::5::Canvas::X::Y::Index::Enabled::' +    'DrawOverlay::msProcedure::6::Canvas::X::Y::ImageIndex::Overlay::Enabled::' +    'FileLoad::msFunction::3::ResType::Name::MaskColor::' +    'GetBitmap::msProcedure::2::Index::Image::' +    'GetHotSpot::msFunction::0::' +    'GetIcon::msProcedure::2::Index::Image::' +    'GetImageBitmap::msFunction::0::' +    'GetMaskBitmap::msFunction::0::' +    'GetResource::msFunction::5::ResType::Name::Width::LoadFlags::MaskColor::' +    'GetInstRes::msFunction::6::Instance::ResType::Name::Width::LoadFlags::MaskColor::' +    'HandleAllocated::msFunction::0::' +    'Insert::msProcedure::3::Index::Image::Mask::' +    'InsertIcon::msProcedure::2::Index::Image::' +    'InsertMasked::msProcedure::3::Index::Image::MaskColor::' +    'Move::msProcedure::2::CurIndex::NewIndex::' +    'Overlay::msFunction::2::ImageIndex::Overlay::' +    'RegisterChanges::msProcedure::1::Value::' +    'ResourceLoad::msFunction::3::ResType::Name::MaskColor::' +    'ResInstLoad::msFunction::4::Instance::ResType::Name::MaskColor::' +    'Replace::msProcedure::3::Index::Image::Mask::' +    'ReplaceIcon::msProcedure::2::Index::Image::' +    'ReplaceMasked::msProcedure::3::Index::NewImage::MaskColor::' +    'UnRegisterChanges::msProcedure::1::Value';  TCustomImageListConstructors: String =     'CreateSize::2::AWidth::AHeight';  TCustomImageListEvents: String =     'Define::OnChange::pvPublic::1::Sender';procedure TChangeLinkClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTChangeLink(Owner).OnChange;  TProtectedTChangeLink(Owner).OnChange := OnChange;end;procedure TChangeLinkClassInfo.UnConnectEventHandlers;begin  TProtectedTChangeLink(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TChangeLinkClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TChangeLinkClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TChangeLinkProperties);end;procedure TChangeLinkClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TChangeLinkMethods);end;procedure TChangeLinkClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TChangeLinkConstructors);end;procedure TChangeLinkClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TChangeLinkEvents);end;function TChangeLinkClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Sender' then begin    Result := Longint(TProtectedTChangeLink(Owner).Sender);  end else    Result := inherited GetProperty(Prop);end;procedure TChangeLinkClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin  if Prop.Name = 'Sender' then begin    TProtectedTChangeLink(Owner).Sender := TCustomImageList(Longint(Value));  end else    inherited SetProperty(Prop, Value);end;procedure TChangeLinkClassInfo.InvokeMethod(Method: TradMethodInfo);begin  if Method.Name = 'Change' then begin    TProtectedTChangeLink(Owner).Change();  end else    inherited InvokeMethod(Method);end;procedure TChangeLinkClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TCustomImageListClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;  _Event_OnChange := TProtectedTCustomImageList(Owner).OnChange;  TProtectedTCustomImageList(Owner).OnChange := OnChange;end;procedure TCustomImageListClassInfo.UnConnectEventHandlers;begin  TProtectedTCustomImageList(Owner).OnChange := _Event_OnChange;  inherited UnConnectEventHandlers;end;procedure TCustomImageListClassInfo.OnChange(Sender: TObject);var  _E: TradEventInfo;begin  _E := FindEvent('OnChange');  _E.Args[0].Value := Longint(Sender);  if Assigned(_Event_OnChange) then _Event_OnChange(Sender);  FireEvent(_E);end;procedure TCustomImageListClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TCustomImageListProperties);end;procedure TCustomImageListClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TCustomImageListMethods);end;procedure TCustomImageListClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TCustomImageListConstructors);end;procedure TCustomImageListClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TCustomImageListEvents);end;function TCustomImageListClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Count' then begin    Result := TProtectedTCustomImageList(Owner).Count;  end else if Prop.Name = 'Handle' then begin    _Prop_Handle := TProtectedTCustomImageList(Owner).Handle;    Result := Longint(@_Prop_Handle);  end else if Prop.Name = 'AllocBy' then begin    Result := TProtectedTCustomImageList(Owner).AllocBy;  end else if Prop.Name = 'BlendColor' then begin    Result := TProtectedTCustomImageList(Owner).BlendColor;  end else if Prop.Name = 'BkColor' then begin    Result := TProtectedTCustomImageList(Owner).BkColor;  end else if Prop.Name = 'DrawingStyle' then begin    Result := TProtectedTCustomImageList(Owner).DrawingStyle;  end else if Prop.Name = 'Height' then begin    Result := TProtectedTCustomImageList(Owner).Height;  end else if Prop.Name = 'ImageType' then begin    Result := TProtectedTCustomImageList(Owner).ImageType;  end else if Prop.Name = 'Masked' then begin    Result := TProtectedTCustomImageList(Owner).Masked;  end else if Prop.Name = 'ShareImages' then begin    Result := TProtectedTCustomImageList(Owner).ShareImages;  end else if Prop.Name = 'Width' then begin    Result := TProtectedTCustomImageList(Owner).Width;  end else    Result := inherited GetProperty(Prop);end;procedure TCustomImageListClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);var  _Handle: ^Longword;begin  if Prop.Name = 'Handle' then begin    _Handle := Pointer(Longint(Value));    TProtectedTCustomImageList(Owner).Handle := _Handle^;  end else if Prop.Name = 'AllocBy' then begin    TProtectedTCustomImageList(Owner).AllocBy := Value;  end else if Prop.Name = 'BlendColor' then begin    TProtectedTCustomImageList(Owner).BlendColor := Value;  end else if Prop.Name = 'BkColor' then begin    TProtectedTCustomImageList(Owner).BkColor := Value;  end else if Prop.Name = 'DrawingStyle' then begin    TProtectedTCustomImageList(Owner).DrawingStyle := Value;  end else if Prop.Name = 'Height' then begin    TProtectedTCustomImageList(Owner).Height := Value;  end else if Prop.Name = 'ImageType' then begin    TProtectedTCustomImageList(Owner).ImageType := Value;  end else if Prop.Name = 'Masked' then begin    TProtectedTCustomImageList(Owner).Masked := Value;  end else if Prop.Name = 'ShareImages' then begin    TProtectedTCustomImageList(Owner).ShareImages := Value;  end else if Prop.Name = 'Width' then begin    TProtectedTCustomImageList(Owner).Width := Value;  end else    inherited SetProperty(Prop, Value);end;procedure TCustomImageListClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_GetResource_LoadFlags: ^TLoadResources;  _Param_GetInstRes_Instance: ^THandle;  _Param_GetInstRes_LoadFlags: ^TLoadResources;  _Param_ResInstLoad_Instance: ^THandle;begin  if Method.Name = 'Add' then begin    TProtectedTCustomImageList(Owner).Add(TBitmap(Longint(Method.Args[0].Value)), TBitmap(Longint(Method.Args[1].Value)));  end else if Method.Name = 'AddIcon' then begin    TProtectedTCustomImageList(Owner).AddIcon(TIcon(Longint(Method.Args[0].Value)));  end else if Method.Name = 'AddImages' then begin    TProtectedTCustomImageList(Owner).AddImages(TCustomImageList(Longint(Method.Args[0].Value)));  end else if Method.Name = 'AddMasked' then begin    TProtectedTCustomImageList(Owner).AddMasked(TBitmap(Longint(Method.Args[0].Value)), Method.Args[1].Value);  end else if Method.Name = 'Clear' then begin    TProtectedTCustomImageList(Owner).Clear();  end else if Method.Name = 'Delete' then begin    TProtectedTCustomImageList(Owner).Delete(Method.Args[0].Value);  end else if Method.Name = 'Draw' then begin    TProtectedTCustomImageList(Owner).Draw(TCanvas(Longint(Method.Args[0].Value)), Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value);  end else if Method.Name = 'DrawOverlay' then begin    TProtectedTCustomImageList(Owner).DrawOverlay(TCanvas(Longint(Method.Args[0].Value)), Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, Method.Args[4].Value, Method.Args[5].Value);  end else if Method.Name = 'FileLoad' then begin    TProtectedTCustomImageList(Owner).FileLoad(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'GetBitmap' then begin    TProtectedTCustomImageList(Owner).GetBitmap(Method.Args[0].Value, TBitmap(Longint(Method.Args[1].Value)));  end else if Method.Name = 'GetHotSpot' then begin    _MethodRes_GetHotSpot := TProtectedTCustomImageList(Owner).GetHotSpot();    Method.Result := Longint(@_MethodRes_GetHotSpot);  end else if Method.Name = 'GetIcon' then begin    TProtectedTCustomImageList(Owner).GetIcon(Method.Args[0].Value, TIcon(Longint(Method.Args[1].Value)));  end else if Method.Name = 'GetImageBitmap' then begin    _MethodRes_GetImageBitmap := TProtectedTCustomImageList(Owner).GetImageBitmap();    Method.Result := Longint(@_MethodRes_GetImageBitmap);  end else if Method.Name = 'GetMaskBitmap' then begin    _MethodRes_GetMaskBitmap := TProtectedTCustomImageList(Owner).GetMaskBitmap();    Method.Result := Longint(@_MethodRes_GetMaskBitmap);  end else if Method.Name = 'GetResource' then begin    _Param_GetResource_LoadFlags := Pointer(Longint(Method.Args[3].Value));    TProtectedTCustomImageList(Owner).GetResource(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value, _Param_GetResource_LoadFlags^, Method.Args[4].Value);  end else if Method.Name = 'GetInstRes' then begin    _Param_GetInstRes_Instance := Pointer(Longint(Method.Args[0].Value));    _Param_GetInstRes_LoadFlags := Pointer(Longint(Method.Args[4].Value));    TProtectedTCustomImageList(Owner).GetInstRes(_Param_GetInstRes_Instance^, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value, _Param_GetInstRes_LoadFlags^, Method.Args[5].Value);  end else if Method.Name = 'HandleAllocated' then begin    TProtectedTCustomImageList(Owner).HandleAllocated();  end else if Method.Name = 'Insert' then begin    TProtectedTCustomImageList(Owner).Insert(Method.Args[0].Value, TBitmap(Longint(Method.Args[1].Value)), TBitmap(Longint(Method.Args[2].Value)));  end else if Method.Name = 'InsertIcon' then begin    TProtectedTCustomImageList(Owner).InsertIcon(Method.Args[0].Value, TIcon(Longint(Method.Args[1].Value)));  end else if Method.Name = 'InsertMasked' then begin    TProtectedTCustomImageList(Owner).InsertMasked(Method.Args[0].Value, TBitmap(Longint(Method.Args[1].Value)), Method.Args[2].Value);  end else if Method.Name = 'Move' then begin    TProtectedTCustomImageList(Owner).Move(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'Overlay' then begin    TProtectedTCustomImageList(Owner).Overlay(Method.Args[0].Value, Method.Args[1].Value);  end else if Method.Name = 'RegisterChanges' then begin    TProtectedTCustomImageList(Owner).RegisterChanges(TChangeLink(Longint(Method.Args[0].Value)));  end else if Method.Name = 'ResourceLoad' then begin    TProtectedTCustomImageList(Owner).ResourceLoad(Method.Args[0].Value, Method.Args[1].Value, Method.Args[2].Value);  end else if Method.Name = 'ResInstLoad' then begin    _Param_ResInstLoad_Instance := Pointer(Longint(Method.Args[0].Value));    TProtectedTCustomImageList(Owner).ResInstLoad(_Param_ResInstLoad_Instance^, Method.Args[1].Value, Method.Args[2].Value, Method.Args[3].Value);  end else if Method.Name = 'Replace' then begin    TProtectedTCustomImageList(Owner).Replace(Method.Args[0].Value, TBitmap(Longint(Method.Args[1].Value)), TBitmap(Longint(Method.Args[2].Value)));  end else if Method.Name = 'ReplaceIcon' then begin    TProtectedTCustomImageList(Owner).ReplaceIcon(Method.Args[0].Value, TIcon(Longint(Method.Args[1].Value)));  end else if Method.Name = 'ReplaceMasked' then begin    TProtectedTCustomImageList(Owner).ReplaceMasked(Method.Args[0].Value, TBitmap(Longint(Method.Args[1].Value)), Method.Args[2].Value);  end else if Method.Name = 'UnRegisterChanges' then begin    TProtectedTCustomImageList(Owner).UnRegisterChanges(TChangeLink(Longint(Method.Args[0].Value)));  end else    inherited InvokeMethod(Method);end;procedure TCustomImageListClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TChangeLink', TChangeLinkClassInfo);  TradClassRegistry.RegisterClass('TCustomImageList', TCustomImageListClassInfo);end.