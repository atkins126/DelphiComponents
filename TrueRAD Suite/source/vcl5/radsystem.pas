{*******************************************************}{                                                       }{       This file generated by CI Generator 1.0.0       }{       Copyright (c) 2000 TrueRAD Soft                 }{       ClassInfo Version 1.0                           }{                                                       }{*******************************************************}unit radsystem;interfaceuses RadCommon, Classes;type  TObjectClassInfo = class;  TInterfacedObjectClassInfo = class;  TObjectClassInfo = class(TradClassInfo)  private    _VarParam_GetInterface_Obj: Variant;    _VarParam_Dispatch_Message: Variant;    _VarParam_DefaultHandler_Message: Variant;  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;  TInterfacedObjectClassInfo = class(TObjectClassInfo)  private  protected    procedure ConnectEventHandlers; override;    procedure UnConnectEventHandlers; override;    procedure DefineRADProperties(AProperties: TList); override;    procedure DefineRADMethods(AMethods: TList); override;    procedure DefineRADConstructors(AConstructors: TList); override;    procedure DefineRADEvents(AEvents: TList); override;  public    function GetProperty(Prop: TradPropertyInfo): Variant; override;    procedure SetProperty(Prop: TradPropertyInfo; Value: Variant); override;    procedure InvokeMethod(Method: TradMethodInfo); override;    procedure InvokeConstructor(Constr: TradConstructorInfo); override;  end;implementationtype  TProtectedTObject = class(TObject);  TProtectedTInterfacedObject = class(TInterfacedObject);const  TObjectProperties: String =     'Define::Self::psReadable::pvPublic::0';  TObjectMethods: String =     'Free::msProcedure::0::' +    'InitInstance::msFunction::1::Instance::' +    'CleanupInstance::msProcedure::0::' +    'ClassType::msFunction::0::' +    'ClassName::msFunction::0::' +    'ClassNameIs::msFunction::1::Name::' +    'ClassParent::msFunction::0::' +    'ClassInfo::msFunction::0::' +    'InstanceSize::msFunction::0::' +    'InheritsFrom::msFunction::1::AClass::' +    'MethodAddress::msFunction::1::Name::' +    'MethodName::msFunction::1::Address::' +    'FieldAddress::msFunction::1::Name::' +    'GetInterface::msFunction::2::IID::Obj::' +    'GetInterfaceEntry::msFunction::1::IID::' +    'GetInterfaceTable::msFunction::0::' +    'SafeCallException::msFunction::2::ExceptObject::ExceptAddr::' +    'AfterConstruction::msProcedure::0::' +    'BeforeDestruction::msProcedure::0::' +    'Dispatch::msProcedure::1::Message::' +    'DefaultHandler::msProcedure::1::Message::' +    'NewInstance::msFunction::0::' +    'FreeInstance::msProcedure::0';  TObjectConstructors: String =     'Create::0';  TObjectEvents: String =     '';  TInterfacedObjectProperties: String =     'Define::RefCount::psReadable::pvPublic::0';  TInterfacedObjectMethods: String =     '';  TInterfacedObjectConstructors: String =     '';  TInterfacedObjectEvents: String =     '';procedure TObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TObjectProperties);end;procedure TObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TObjectMethods);end;procedure TObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TObjectConstructors);end;procedure TObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TObjectEvents);end;function TObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'Self' then begin    Result := Longint(Owner);  end else    Result := inherited GetProperty(Prop);end;procedure TObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TObjectClassInfo.InvokeMethod(Method: TradMethodInfo);var  _Param_GetInterface_IID: ^TGUID;  _Param_GetInterfaceEntry_IID: ^TGUID;begin  if Method.Name = 'Free' then begin    TProtectedTObject(Owner).Free();  end else if Method.Name = 'InitInstance' then begin    Method.Result := Longint(TProtectedTObject(Owner).InitInstance(Pointer(Longint(Method.Args[0].Value))));  end else if Method.Name = 'CleanupInstance' then begin    TProtectedTObject(Owner).CleanupInstance();  end else if Method.Name = 'ClassType' then begin    Method.Result := Longint(TProtectedTObject(Owner).ClassType());  end else if Method.Name = 'ClassName' then begin    TProtectedTObject(Owner).ClassName();  end else if Method.Name = 'ClassNameIs' then begin    TProtectedTObject(Owner).ClassNameIs(Method.Args[0].Value);  end else if Method.Name = 'ClassParent' then begin    Method.Result := Longint(TProtectedTObject(Owner).ClassParent());  end else if Method.Name = 'ClassInfo' then begin    Method.Result := Longint(TProtectedTObject(Owner).ClassInfo());  end else if Method.Name = 'InstanceSize' then begin    TProtectedTObject(Owner).InstanceSize();  end else if Method.Name = 'InheritsFrom' then begin    TProtectedTObject(Owner).InheritsFrom(TClass(Longint(Method.Args[0].Value)));  end else if Method.Name = 'MethodAddress' then begin    Method.Result := Longint(TProtectedTObject(Owner).MethodAddress(Method.Args[0].Value));  end else if Method.Name = 'MethodName' then begin    TProtectedTObject(Owner).MethodName(Pointer(Longint(Method.Args[0].Value)));  end else if Method.Name = 'FieldAddress' then begin    Method.Result := Longint(TProtectedTObject(Owner).FieldAddress(Method.Args[0].Value));  end else if Method.Name = 'GetInterface' then begin    _Param_GetInterface_IID := Pointer(Longint(Method.Args[0].Value));    _VarParam_GetInterface_Obj := Method.Args[1].Value;    TProtectedTObject(Owner).GetInterface(_Param_GetInterface_IID^, _VarParam_GetInterface_Obj);    Method.Args[1].Value := _VarParam_GetInterface_Obj;  end else if Method.Name = 'GetInterfaceEntry' then begin    _Param_GetInterfaceEntry_IID := Pointer(Longint(Method.Args[0].Value));    Method.Result := Longint(TProtectedTObject(Owner).GetInterfaceEntry(_Param_GetInterfaceEntry_IID^));  end else if Method.Name = 'GetInterfaceTable' then begin    Method.Result := Longint(TProtectedTObject(Owner).GetInterfaceTable());  end else if Method.Name = 'SafeCallException' then begin    TProtectedTObject(Owner).SafeCallException(TObject(Longint(Method.Args[0].Value)), Pointer(Longint(Method.Args[1].Value)));  end else if Method.Name = 'AfterConstruction' then begin    TProtectedTObject(Owner).AfterConstruction();  end else if Method.Name = 'BeforeDestruction' then begin    TProtectedTObject(Owner).BeforeDestruction();  end else if Method.Name = 'Dispatch' then begin    _VarParam_Dispatch_Message := Method.Args[0].Value;    TProtectedTObject(Owner).Dispatch(_VarParam_Dispatch_Message);    Method.Args[0].Value := _VarParam_Dispatch_Message;  end else if Method.Name = 'DefaultHandler' then begin    _VarParam_DefaultHandler_Message := Method.Args[0].Value;    TProtectedTObject(Owner).DefaultHandler(_VarParam_DefaultHandler_Message);    Method.Args[0].Value := _VarParam_DefaultHandler_Message;  end else if Method.Name = 'NewInstance' then begin    Method.Result := Longint(TProtectedTObject(Owner).NewInstance());  end else if Method.Name = 'FreeInstance' then begin    TProtectedTObject(Owner).FreeInstance();  end else    inherited InvokeMethod(Method);end;procedure TObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;procedure TInterfacedObjectClassInfo.ConnectEventHandlers;begin  inherited ConnectEventHandlers;end;procedure TInterfacedObjectClassInfo.UnConnectEventHandlers;begin  inherited UnConnectEventHandlers;end;procedure TInterfacedObjectClassInfo.DefineRADProperties(AProperties: TList);begin  inherited DefineRADProperties(AProperties);  ReadRADProperties(TInterfacedObjectProperties);end;procedure TInterfacedObjectClassInfo.DefineRADMethods(AMethods: TList);begin  inherited DefineRADMethods(AMethods);  ReadRADMethods(TInterfacedObjectMethods);end;procedure TInterfacedObjectClassInfo.DefineRADConstructors(AConstructors: TList);begin  inherited DefineRADConstructors(AConstructors);  ReadRADConstructors(TInterfacedObjectConstructors);end;procedure TInterfacedObjectClassInfo.DefineRADEvents(AEvents: TList);begin  inherited DefineRADEvents(AEvents);  ReadRADEvents(TInterfacedObjectEvents);end;function TInterfacedObjectClassInfo.GetProperty(Prop: TradPropertyInfo): Variant;begin  if Prop.Name = 'RefCount' then begin    Result := TProtectedTInterfacedObject(Owner).RefCount;  end else    Result := inherited GetProperty(Prop);end;procedure TInterfacedObjectClassInfo.SetProperty(Prop: TradPropertyInfo; Value: Variant);begin    inherited SetProperty(Prop, Value);end;procedure TInterfacedObjectClassInfo.InvokeMethod(Method: TradMethodInfo);begin    inherited InvokeMethod(Method);end;procedure TInterfacedObjectClassInfo.InvokeConstructor(Constr: TradConstructorInfo);beginend;initialization  TradClassRegistry.RegisterClass('TObject', TObjectClassInfo);  TradClassRegistry.RegisterClass('TInterfacedObject', TInterfacedObjectClassInfo);end.